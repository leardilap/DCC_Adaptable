// de2i_150_qsys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2015.09.27.14:18:38

`timescale 1 ps / 1 ps
module de2i_150_qsys_mm_interconnect_0 (
		input  wire        pcie_ip_pcie_core_clk_clk,                                   //                                 pcie_ip_pcie_core_clk.clk
		input  wire        pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset, // pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset.reset
		input  wire        sgdma_reset_reset_bridge_in_reset_reset,                     //                     sgdma_reset_reset_bridge_in_reset.reset
		input  wire [31:0] pcie_ip_bar1_0_address,                                      //                                        pcie_ip_bar1_0.address
		output wire        pcie_ip_bar1_0_waitrequest,                                  //                                                      .waitrequest
		input  wire [6:0]  pcie_ip_bar1_0_burstcount,                                   //                                                      .burstcount
		input  wire [7:0]  pcie_ip_bar1_0_byteenable,                                   //                                                      .byteenable
		input  wire        pcie_ip_bar1_0_read,                                         //                                                      .read
		output wire [63:0] pcie_ip_bar1_0_readdata,                                     //                                                      .readdata
		output wire        pcie_ip_bar1_0_readdatavalid,                                //                                                      .readdatavalid
		input  wire        pcie_ip_bar1_0_write,                                        //                                                      .write
		input  wire [63:0] pcie_ip_bar1_0_writedata,                                    //                                                      .writedata
		input  wire [31:0] sgdma_descriptor_read_address,                               //                                 sgdma_descriptor_read.address
		output wire        sgdma_descriptor_read_waitrequest,                           //                                                      .waitrequest
		input  wire        sgdma_descriptor_read_read,                                  //                                                      .read
		output wire [31:0] sgdma_descriptor_read_readdata,                              //                                                      .readdata
		output wire        sgdma_descriptor_read_readdatavalid,                         //                                                      .readdatavalid
		input  wire [31:0] sgdma_descriptor_write_address,                              //                                sgdma_descriptor_write.address
		output wire        sgdma_descriptor_write_waitrequest,                          //                                                      .waitrequest
		input  wire        sgdma_descriptor_write_write,                                //                                                      .write
		input  wire [31:0] sgdma_descriptor_write_writedata,                            //                                                      .writedata
		input  wire [31:0] sgdma_m_read_address,                                        //                                          sgdma_m_read.address
		output wire        sgdma_m_read_waitrequest,                                    //                                                      .waitrequest
		input  wire        sgdma_m_read_read,                                           //                                                      .read
		output wire [63:0] sgdma_m_read_readdata,                                       //                                                      .readdata
		output wire        sgdma_m_read_readdatavalid,                                  //                                                      .readdatavalid
		input  wire [31:0] sgdma_m_write_address,                                       //                                         sgdma_m_write.address
		output wire        sgdma_m_write_waitrequest,                                   //                                                      .waitrequest
		input  wire [7:0]  sgdma_m_write_byteenable,                                    //                                                      .byteenable
		input  wire        sgdma_m_write_write,                                         //                                                      .write
		input  wire [63:0] sgdma_m_write_writedata,                                     //                                                      .writedata
		output wire [8:0]  Adapt_FIR_mem_s1_address,                                    //                                      Adapt_FIR_mem_s1.address
		output wire        Adapt_FIR_mem_s1_write,                                      //                                                      .write
		input  wire [31:0] Adapt_FIR_mem_s1_readdata,                                   //                                                      .readdata
		output wire [31:0] Adapt_FIR_mem_s1_writedata,                                  //                                                      .writedata
		output wire [3:0]  Adapt_FIR_mem_s1_byteenable,                                 //                                                      .byteenable
		output wire        Adapt_FIR_mem_s1_chipselect,                                 //                                                      .chipselect
		output wire        Adapt_FIR_mem_s1_clken,                                      //                                                      .clken
		output wire [1:0]  button_s1_address,                                           //                                             button_s1.address
		output wire        button_s1_write,                                             //                                                      .write
		input  wire [31:0] button_s1_readdata,                                          //                                                      .readdata
		output wire [31:0] button_s1_writedata,                                         //                                                      .writedata
		output wire        button_s1_chipselect,                                        //                                                      .chipselect
		output wire        fifo_memory_in_write,                                        //                                        fifo_memory_in.write
		output wire [63:0] fifo_memory_in_writedata,                                    //                                                      .writedata
		input  wire        fifo_memory_in_waitrequest,                                  //                                                      .waitrequest
		output wire [2:0]  fifo_memory_in_csr_address,                                  //                                    fifo_memory_in_csr.address
		output wire        fifo_memory_in_csr_write,                                    //                                                      .write
		output wire        fifo_memory_in_csr_read,                                     //                                                      .read
		input  wire [31:0] fifo_memory_in_csr_readdata,                                 //                                                      .readdata
		output wire [31:0] fifo_memory_in_csr_writedata,                                //                                                      .writedata
		output wire        fifo_memory_out_read,                                        //                                       fifo_memory_out.read
		input  wire [63:0] fifo_memory_out_readdata,                                    //                                                      .readdata
		input  wire        fifo_memory_out_waitrequest,                                 //                                                      .waitrequest
		output wire [9:0]  fir_memory_s1_address,                                       //                                         fir_memory_s1.address
		output wire        fir_memory_s1_write,                                         //                                                      .write
		input  wire [31:0] fir_memory_s1_readdata,                                      //                                                      .readdata
		output wire [31:0] fir_memory_s1_writedata,                                     //                                                      .writedata
		output wire [3:0]  fir_memory_s1_byteenable,                                    //                                                      .byteenable
		output wire        fir_memory_s1_chipselect,                                    //                                                      .chipselect
		output wire        fir_memory_s1_clken,                                         //                                                      .clken
		output wire [4:0]  Interpo_4_0_s1_address,                                      //                                        Interpo_4_0_s1.address
		output wire        Interpo_4_0_s1_write,                                        //                                                      .write
		input  wire [31:0] Interpo_4_0_s1_readdata,                                     //                                                      .readdata
		output wire [31:0] Interpo_4_0_s1_writedata,                                    //                                                      .writedata
		output wire [3:0]  Interpo_4_0_s1_byteenable,                                   //                                                      .byteenable
		output wire        Interpo_4_0_s1_chipselect,                                   //                                                      .chipselect
		output wire        Interpo_4_0_s1_clken,                                        //                                                      .clken
		output wire [5:0]  Interpo_5_0_s1_address,                                      //                                        Interpo_5_0_s1.address
		output wire        Interpo_5_0_s1_write,                                        //                                                      .write
		input  wire [31:0] Interpo_5_0_s1_readdata,                                     //                                                      .readdata
		output wire [31:0] Interpo_5_0_s1_writedata,                                    //                                                      .writedata
		output wire [3:0]  Interpo_5_0_s1_byteenable,                                   //                                                      .byteenable
		output wire        Interpo_5_0_s1_chipselect,                                   //                                                      .chipselect
		output wire        Interpo_5_0_s1_clken,                                        //                                                      .clken
		output wire [5:0]  Interpo_5_1_s1_address,                                      //                                        Interpo_5_1_s1.address
		output wire        Interpo_5_1_s1_write,                                        //                                                      .write
		input  wire [31:0] Interpo_5_1_s1_readdata,                                     //                                                      .readdata
		output wire [31:0] Interpo_5_1_s1_writedata,                                    //                                                      .writedata
		output wire [3:0]  Interpo_5_1_s1_byteenable,                                   //                                                      .byteenable
		output wire        Interpo_5_1_s1_chipselect,                                   //                                                      .chipselect
		output wire        Interpo_5_1_s1_clken,                                        //                                                      .clken
		output wire [5:0]  Interpo_5_2_s1_address,                                      //                                        Interpo_5_2_s1.address
		output wire        Interpo_5_2_s1_write,                                        //                                                      .write
		input  wire [31:0] Interpo_5_2_s1_readdata,                                     //                                                      .readdata
		output wire [31:0] Interpo_5_2_s1_writedata,                                    //                                                      .writedata
		output wire [3:0]  Interpo_5_2_s1_byteenable,                                   //                                                      .byteenable
		output wire        Interpo_5_2_s1_chipselect,                                   //                                                      .chipselect
		output wire        Interpo_5_2_s1_clken,                                        //                                                      .clken
		output wire [5:0]  Interpo_5_3_s1_address,                                      //                                        Interpo_5_3_s1.address
		output wire        Interpo_5_3_s1_write,                                        //                                                      .write
		input  wire [31:0] Interpo_5_3_s1_readdata,                                     //                                                      .readdata
		output wire [31:0] Interpo_5_3_s1_writedata,                                    //                                                      .writedata
		output wire [3:0]  Interpo_5_3_s1_byteenable,                                   //                                                      .byteenable
		output wire        Interpo_5_3_s1_chipselect,                                   //                                                      .chipselect
		output wire        Interpo_5_3_s1_clken,                                        //                                                      .clken
		output wire [1:0]  led_s1_address,                                              //                                                led_s1.address
		output wire        led_s1_write,                                                //                                                      .write
		input  wire [31:0] led_s1_readdata,                                             //                                                      .readdata
		output wire [31:0] led_s1_writedata,                                            //                                                      .writedata
		output wire        led_s1_chipselect,                                           //                                                      .chipselect
		output wire [2:0]  micFilter_cntl_s1_address,                                   //                                     micFilter_cntl_s1.address
		output wire        micFilter_cntl_s1_write,                                     //                                                      .write
		input  wire [31:0] micFilter_cntl_s1_readdata,                                  //                                                      .readdata
		output wire [31:0] micFilter_cntl_s1_writedata,                                 //                                                      .writedata
		output wire        micFilter_cntl_s1_chipselect,                                //                                                      .chipselect
		output wire [1:0]  micFilter_rst_s1_address,                                    //                                      micFilter_rst_s1.address
		output wire        micFilter_rst_s1_write,                                      //                                                      .write
		input  wire [31:0] micFilter_rst_s1_readdata,                                   //                                                      .readdata
		output wire [31:0] micFilter_rst_s1_writedata,                                  //                                                      .writedata
		output wire        micFilter_rst_s1_chipselect,                                 //                                                      .chipselect
		output wire [30:0] pcie_ip_txs_address,                                         //                                           pcie_ip_txs.address
		output wire        pcie_ip_txs_write,                                           //                                                      .write
		output wire        pcie_ip_txs_read,                                            //                                                      .read
		input  wire [63:0] pcie_ip_txs_readdata,                                        //                                                      .readdata
		output wire [63:0] pcie_ip_txs_writedata,                                       //                                                      .writedata
		output wire [6:0]  pcie_ip_txs_burstcount,                                      //                                                      .burstcount
		output wire [7:0]  pcie_ip_txs_byteenable,                                      //                                                      .byteenable
		input  wire        pcie_ip_txs_readdatavalid,                                   //                                                      .readdatavalid
		input  wire        pcie_ip_txs_waitrequest,                                     //                                                      .waitrequest
		output wire        pcie_ip_txs_chipselect                                       //                                                      .chipselect
	);

	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest;           // pcie_ip_bar1_0_agent:av_waitrequest -> pcie_ip_bar1_0_translator:uav_waitrequest
	wire    [9:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount;            // pcie_ip_bar1_0_translator:uav_burstcount -> pcie_ip_bar1_0_agent:av_burstcount
	wire   [63:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata;             // pcie_ip_bar1_0_translator:uav_writedata -> pcie_ip_bar1_0_agent:av_writedata
	wire   [31:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_address;               // pcie_ip_bar1_0_translator:uav_address -> pcie_ip_bar1_0_agent:av_address
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_lock;                  // pcie_ip_bar1_0_translator:uav_lock -> pcie_ip_bar1_0_agent:av_lock
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_write;                 // pcie_ip_bar1_0_translator:uav_write -> pcie_ip_bar1_0_agent:av_write
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_read;                  // pcie_ip_bar1_0_translator:uav_read -> pcie_ip_bar1_0_agent:av_read
	wire   [63:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata;              // pcie_ip_bar1_0_agent:av_readdata -> pcie_ip_bar1_0_translator:uav_readdata
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess;           // pcie_ip_bar1_0_translator:uav_debugaccess -> pcie_ip_bar1_0_agent:av_debugaccess
	wire    [7:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable;            // pcie_ip_bar1_0_translator:uav_byteenable -> pcie_ip_bar1_0_agent:av_byteenable
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid;         // pcie_ip_bar1_0_agent:av_readdatavalid -> pcie_ip_bar1_0_translator:uav_readdatavalid
	wire          sgdma_m_read_translator_avalon_universal_master_0_waitrequest;             // sgdma_m_read_agent:av_waitrequest -> sgdma_m_read_translator:uav_waitrequest
	wire    [3:0] sgdma_m_read_translator_avalon_universal_master_0_burstcount;              // sgdma_m_read_translator:uav_burstcount -> sgdma_m_read_agent:av_burstcount
	wire   [63:0] sgdma_m_read_translator_avalon_universal_master_0_writedata;               // sgdma_m_read_translator:uav_writedata -> sgdma_m_read_agent:av_writedata
	wire   [31:0] sgdma_m_read_translator_avalon_universal_master_0_address;                 // sgdma_m_read_translator:uav_address -> sgdma_m_read_agent:av_address
	wire          sgdma_m_read_translator_avalon_universal_master_0_lock;                    // sgdma_m_read_translator:uav_lock -> sgdma_m_read_agent:av_lock
	wire          sgdma_m_read_translator_avalon_universal_master_0_write;                   // sgdma_m_read_translator:uav_write -> sgdma_m_read_agent:av_write
	wire          sgdma_m_read_translator_avalon_universal_master_0_read;                    // sgdma_m_read_translator:uav_read -> sgdma_m_read_agent:av_read
	wire   [63:0] sgdma_m_read_translator_avalon_universal_master_0_readdata;                // sgdma_m_read_agent:av_readdata -> sgdma_m_read_translator:uav_readdata
	wire          sgdma_m_read_translator_avalon_universal_master_0_debugaccess;             // sgdma_m_read_translator:uav_debugaccess -> sgdma_m_read_agent:av_debugaccess
	wire    [7:0] sgdma_m_read_translator_avalon_universal_master_0_byteenable;              // sgdma_m_read_translator:uav_byteenable -> sgdma_m_read_agent:av_byteenable
	wire          sgdma_m_read_translator_avalon_universal_master_0_readdatavalid;           // sgdma_m_read_agent:av_readdatavalid -> sgdma_m_read_translator:uav_readdatavalid
	wire          sgdma_m_write_translator_avalon_universal_master_0_waitrequest;            // sgdma_m_write_agent:av_waitrequest -> sgdma_m_write_translator:uav_waitrequest
	wire    [3:0] sgdma_m_write_translator_avalon_universal_master_0_burstcount;             // sgdma_m_write_translator:uav_burstcount -> sgdma_m_write_agent:av_burstcount
	wire   [63:0] sgdma_m_write_translator_avalon_universal_master_0_writedata;              // sgdma_m_write_translator:uav_writedata -> sgdma_m_write_agent:av_writedata
	wire   [31:0] sgdma_m_write_translator_avalon_universal_master_0_address;                // sgdma_m_write_translator:uav_address -> sgdma_m_write_agent:av_address
	wire          sgdma_m_write_translator_avalon_universal_master_0_lock;                   // sgdma_m_write_translator:uav_lock -> sgdma_m_write_agent:av_lock
	wire          sgdma_m_write_translator_avalon_universal_master_0_write;                  // sgdma_m_write_translator:uav_write -> sgdma_m_write_agent:av_write
	wire          sgdma_m_write_translator_avalon_universal_master_0_read;                   // sgdma_m_write_translator:uav_read -> sgdma_m_write_agent:av_read
	wire   [63:0] sgdma_m_write_translator_avalon_universal_master_0_readdata;               // sgdma_m_write_agent:av_readdata -> sgdma_m_write_translator:uav_readdata
	wire          sgdma_m_write_translator_avalon_universal_master_0_debugaccess;            // sgdma_m_write_translator:uav_debugaccess -> sgdma_m_write_agent:av_debugaccess
	wire    [7:0] sgdma_m_write_translator_avalon_universal_master_0_byteenable;             // sgdma_m_write_translator:uav_byteenable -> sgdma_m_write_agent:av_byteenable
	wire          sgdma_m_write_translator_avalon_universal_master_0_readdatavalid;          // sgdma_m_write_agent:av_readdatavalid -> sgdma_m_write_translator:uav_readdatavalid
	wire          rsp_mux_002_src_endofpacket;                                               // rsp_mux_002:src_endofpacket -> sgdma_m_write_agent:rp_endofpacket
	wire          rsp_mux_002_src_valid;                                                     // rsp_mux_002:src_valid -> sgdma_m_write_agent:rp_valid
	wire          rsp_mux_002_src_startofpacket;                                             // rsp_mux_002:src_startofpacket -> sgdma_m_write_agent:rp_startofpacket
	wire  [150:0] rsp_mux_002_src_data;                                                      // rsp_mux_002:src_data -> sgdma_m_write_agent:rp_data
	wire   [14:0] rsp_mux_002_src_channel;                                                   // rsp_mux_002:src_channel -> sgdma_m_write_agent:rp_channel
	wire          rsp_mux_002_src_ready;                                                     // sgdma_m_write_agent:rp_ready -> rsp_mux_002:src_ready
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest;    // sgdma_descriptor_read_agent:av_waitrequest -> sgdma_descriptor_read_translator:uav_waitrequest
	wire    [2:0] sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount;     // sgdma_descriptor_read_translator:uav_burstcount -> sgdma_descriptor_read_agent:av_burstcount
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_writedata;      // sgdma_descriptor_read_translator:uav_writedata -> sgdma_descriptor_read_agent:av_writedata
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_address;        // sgdma_descriptor_read_translator:uav_address -> sgdma_descriptor_read_agent:av_address
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_lock;           // sgdma_descriptor_read_translator:uav_lock -> sgdma_descriptor_read_agent:av_lock
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_write;          // sgdma_descriptor_read_translator:uav_write -> sgdma_descriptor_read_agent:av_write
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_read;           // sgdma_descriptor_read_translator:uav_read -> sgdma_descriptor_read_agent:av_read
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_readdata;       // sgdma_descriptor_read_agent:av_readdata -> sgdma_descriptor_read_translator:uav_readdata
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess;    // sgdma_descriptor_read_translator:uav_debugaccess -> sgdma_descriptor_read_agent:av_debugaccess
	wire    [3:0] sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable;     // sgdma_descriptor_read_translator:uav_byteenable -> sgdma_descriptor_read_agent:av_byteenable
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid;  // sgdma_descriptor_read_agent:av_readdatavalid -> sgdma_descriptor_read_translator:uav_readdatavalid
	wire          rsp_mux_003_src_endofpacket;                                               // rsp_mux_003:src_endofpacket -> sgdma_descriptor_read_agent:rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                     // rsp_mux_003:src_valid -> sgdma_descriptor_read_agent:rp_valid
	wire          rsp_mux_003_src_startofpacket;                                             // rsp_mux_003:src_startofpacket -> sgdma_descriptor_read_agent:rp_startofpacket
	wire  [114:0] rsp_mux_003_src_data;                                                      // rsp_mux_003:src_data -> sgdma_descriptor_read_agent:rp_data
	wire   [14:0] rsp_mux_003_src_channel;                                                   // rsp_mux_003:src_channel -> sgdma_descriptor_read_agent:rp_channel
	wire          rsp_mux_003_src_ready;                                                     // sgdma_descriptor_read_agent:rp_ready -> rsp_mux_003:src_ready
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest;   // sgdma_descriptor_write_agent:av_waitrequest -> sgdma_descriptor_write_translator:uav_waitrequest
	wire    [2:0] sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount;    // sgdma_descriptor_write_translator:uav_burstcount -> sgdma_descriptor_write_agent:av_burstcount
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_writedata;     // sgdma_descriptor_write_translator:uav_writedata -> sgdma_descriptor_write_agent:av_writedata
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_address;       // sgdma_descriptor_write_translator:uav_address -> sgdma_descriptor_write_agent:av_address
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_lock;          // sgdma_descriptor_write_translator:uav_lock -> sgdma_descriptor_write_agent:av_lock
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_write;         // sgdma_descriptor_write_translator:uav_write -> sgdma_descriptor_write_agent:av_write
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_read;          // sgdma_descriptor_write_translator:uav_read -> sgdma_descriptor_write_agent:av_read
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_readdata;      // sgdma_descriptor_write_agent:av_readdata -> sgdma_descriptor_write_translator:uav_readdata
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess;   // sgdma_descriptor_write_translator:uav_debugaccess -> sgdma_descriptor_write_agent:av_debugaccess
	wire    [3:0] sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable;    // sgdma_descriptor_write_translator:uav_byteenable -> sgdma_descriptor_write_agent:av_byteenable
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid; // sgdma_descriptor_write_agent:av_readdatavalid -> sgdma_descriptor_write_translator:uav_readdatavalid
	wire          rsp_mux_004_src_endofpacket;                                               // rsp_mux_004:src_endofpacket -> sgdma_descriptor_write_agent:rp_endofpacket
	wire          rsp_mux_004_src_valid;                                                     // rsp_mux_004:src_valid -> sgdma_descriptor_write_agent:rp_valid
	wire          rsp_mux_004_src_startofpacket;                                             // rsp_mux_004:src_startofpacket -> sgdma_descriptor_write_agent:rp_startofpacket
	wire  [114:0] rsp_mux_004_src_data;                                                      // rsp_mux_004:src_data -> sgdma_descriptor_write_agent:rp_data
	wire   [14:0] rsp_mux_004_src_channel;                                                   // rsp_mux_004:src_channel -> sgdma_descriptor_write_agent:rp_channel
	wire          rsp_mux_004_src_ready;                                                     // sgdma_descriptor_write_agent:rp_ready -> rsp_mux_004:src_ready
	wire          fir_memory_s1_agent_m0_waitrequest;                                        // fir_memory_s1_translator:uav_waitrequest -> fir_memory_s1_agent:m0_waitrequest
	wire    [2:0] fir_memory_s1_agent_m0_burstcount;                                         // fir_memory_s1_agent:m0_burstcount -> fir_memory_s1_translator:uav_burstcount
	wire   [31:0] fir_memory_s1_agent_m0_writedata;                                          // fir_memory_s1_agent:m0_writedata -> fir_memory_s1_translator:uav_writedata
	wire   [31:0] fir_memory_s1_agent_m0_address;                                            // fir_memory_s1_agent:m0_address -> fir_memory_s1_translator:uav_address
	wire          fir_memory_s1_agent_m0_write;                                              // fir_memory_s1_agent:m0_write -> fir_memory_s1_translator:uav_write
	wire          fir_memory_s1_agent_m0_lock;                                               // fir_memory_s1_agent:m0_lock -> fir_memory_s1_translator:uav_lock
	wire          fir_memory_s1_agent_m0_read;                                               // fir_memory_s1_agent:m0_read -> fir_memory_s1_translator:uav_read
	wire   [31:0] fir_memory_s1_agent_m0_readdata;                                           // fir_memory_s1_translator:uav_readdata -> fir_memory_s1_agent:m0_readdata
	wire          fir_memory_s1_agent_m0_readdatavalid;                                      // fir_memory_s1_translator:uav_readdatavalid -> fir_memory_s1_agent:m0_readdatavalid
	wire          fir_memory_s1_agent_m0_debugaccess;                                        // fir_memory_s1_agent:m0_debugaccess -> fir_memory_s1_translator:uav_debugaccess
	wire    [3:0] fir_memory_s1_agent_m0_byteenable;                                         // fir_memory_s1_agent:m0_byteenable -> fir_memory_s1_translator:uav_byteenable
	wire          fir_memory_s1_agent_rf_source_endofpacket;                                 // fir_memory_s1_agent:rf_source_endofpacket -> fir_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          fir_memory_s1_agent_rf_source_valid;                                       // fir_memory_s1_agent:rf_source_valid -> fir_memory_s1_agent_rsp_fifo:in_valid
	wire          fir_memory_s1_agent_rf_source_startofpacket;                               // fir_memory_s1_agent:rf_source_startofpacket -> fir_memory_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] fir_memory_s1_agent_rf_source_data;                                        // fir_memory_s1_agent:rf_source_data -> fir_memory_s1_agent_rsp_fifo:in_data
	wire          fir_memory_s1_agent_rf_source_ready;                                       // fir_memory_s1_agent_rsp_fifo:in_ready -> fir_memory_s1_agent:rf_source_ready
	wire          fir_memory_s1_agent_rsp_fifo_out_endofpacket;                              // fir_memory_s1_agent_rsp_fifo:out_endofpacket -> fir_memory_s1_agent:rf_sink_endofpacket
	wire          fir_memory_s1_agent_rsp_fifo_out_valid;                                    // fir_memory_s1_agent_rsp_fifo:out_valid -> fir_memory_s1_agent:rf_sink_valid
	wire          fir_memory_s1_agent_rsp_fifo_out_startofpacket;                            // fir_memory_s1_agent_rsp_fifo:out_startofpacket -> fir_memory_s1_agent:rf_sink_startofpacket
	wire  [115:0] fir_memory_s1_agent_rsp_fifo_out_data;                                     // fir_memory_s1_agent_rsp_fifo:out_data -> fir_memory_s1_agent:rf_sink_data
	wire          fir_memory_s1_agent_rsp_fifo_out_ready;                                    // fir_memory_s1_agent:rf_sink_ready -> fir_memory_s1_agent_rsp_fifo:out_ready
	wire          fir_memory_s1_agent_rdata_fifo_src_valid;                                  // fir_memory_s1_agent:rdata_fifo_src_valid -> fir_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] fir_memory_s1_agent_rdata_fifo_src_data;                                   // fir_memory_s1_agent:rdata_fifo_src_data -> fir_memory_s1_agent:rdata_fifo_sink_data
	wire          fir_memory_s1_agent_rdata_fifo_src_ready;                                  // fir_memory_s1_agent:rdata_fifo_sink_ready -> fir_memory_s1_agent:rdata_fifo_src_ready
	wire          led_s1_agent_m0_waitrequest;                                               // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire    [2:0] led_s1_agent_m0_burstcount;                                                // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire   [31:0] led_s1_agent_m0_writedata;                                                 // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire   [31:0] led_s1_agent_m0_address;                                                   // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire          led_s1_agent_m0_write;                                                     // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire          led_s1_agent_m0_lock;                                                      // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire          led_s1_agent_m0_read;                                                      // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire   [31:0] led_s1_agent_m0_readdata;                                                  // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_readdatavalid;                                             // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_debugaccess;                                               // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire    [3:0] led_s1_agent_m0_byteenable;                                                // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_rf_source_endofpacket;                                        // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rf_source_valid;                                              // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire          led_s1_agent_rf_source_startofpacket;                                      // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] led_s1_agent_rf_source_data;                                               // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                              // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                     // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                           // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                   // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire  [115:0] led_s1_agent_rsp_fifo_out_data;                                            // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                           // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rdata_fifo_src_valid;                                         // led_s1_agent:rdata_fifo_src_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                          // led_s1_agent:rdata_fifo_src_data -> led_s1_agent:rdata_fifo_sink_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                         // led_s1_agent:rdata_fifo_sink_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          button_s1_agent_m0_waitrequest;                                            // button_s1_translator:uav_waitrequest -> button_s1_agent:m0_waitrequest
	wire    [2:0] button_s1_agent_m0_burstcount;                                             // button_s1_agent:m0_burstcount -> button_s1_translator:uav_burstcount
	wire   [31:0] button_s1_agent_m0_writedata;                                              // button_s1_agent:m0_writedata -> button_s1_translator:uav_writedata
	wire   [31:0] button_s1_agent_m0_address;                                                // button_s1_agent:m0_address -> button_s1_translator:uav_address
	wire          button_s1_agent_m0_write;                                                  // button_s1_agent:m0_write -> button_s1_translator:uav_write
	wire          button_s1_agent_m0_lock;                                                   // button_s1_agent:m0_lock -> button_s1_translator:uav_lock
	wire          button_s1_agent_m0_read;                                                   // button_s1_agent:m0_read -> button_s1_translator:uav_read
	wire   [31:0] button_s1_agent_m0_readdata;                                               // button_s1_translator:uav_readdata -> button_s1_agent:m0_readdata
	wire          button_s1_agent_m0_readdatavalid;                                          // button_s1_translator:uav_readdatavalid -> button_s1_agent:m0_readdatavalid
	wire          button_s1_agent_m0_debugaccess;                                            // button_s1_agent:m0_debugaccess -> button_s1_translator:uav_debugaccess
	wire    [3:0] button_s1_agent_m0_byteenable;                                             // button_s1_agent:m0_byteenable -> button_s1_translator:uav_byteenable
	wire          button_s1_agent_rf_source_endofpacket;                                     // button_s1_agent:rf_source_endofpacket -> button_s1_agent_rsp_fifo:in_endofpacket
	wire          button_s1_agent_rf_source_valid;                                           // button_s1_agent:rf_source_valid -> button_s1_agent_rsp_fifo:in_valid
	wire          button_s1_agent_rf_source_startofpacket;                                   // button_s1_agent:rf_source_startofpacket -> button_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] button_s1_agent_rf_source_data;                                            // button_s1_agent:rf_source_data -> button_s1_agent_rsp_fifo:in_data
	wire          button_s1_agent_rf_source_ready;                                           // button_s1_agent_rsp_fifo:in_ready -> button_s1_agent:rf_source_ready
	wire          button_s1_agent_rsp_fifo_out_endofpacket;                                  // button_s1_agent_rsp_fifo:out_endofpacket -> button_s1_agent:rf_sink_endofpacket
	wire          button_s1_agent_rsp_fifo_out_valid;                                        // button_s1_agent_rsp_fifo:out_valid -> button_s1_agent:rf_sink_valid
	wire          button_s1_agent_rsp_fifo_out_startofpacket;                                // button_s1_agent_rsp_fifo:out_startofpacket -> button_s1_agent:rf_sink_startofpacket
	wire  [115:0] button_s1_agent_rsp_fifo_out_data;                                         // button_s1_agent_rsp_fifo:out_data -> button_s1_agent:rf_sink_data
	wire          button_s1_agent_rsp_fifo_out_ready;                                        // button_s1_agent:rf_sink_ready -> button_s1_agent_rsp_fifo:out_ready
	wire          button_s1_agent_rdata_fifo_src_valid;                                      // button_s1_agent:rdata_fifo_src_valid -> button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] button_s1_agent_rdata_fifo_src_data;                                       // button_s1_agent:rdata_fifo_src_data -> button_s1_agent:rdata_fifo_sink_data
	wire          button_s1_agent_rdata_fifo_src_ready;                                      // button_s1_agent:rdata_fifo_sink_ready -> button_s1_agent:rdata_fifo_src_ready
	wire          fifo_memory_in_csr_agent_m0_waitrequest;                                   // fifo_memory_in_csr_translator:uav_waitrequest -> fifo_memory_in_csr_agent:m0_waitrequest
	wire    [2:0] fifo_memory_in_csr_agent_m0_burstcount;                                    // fifo_memory_in_csr_agent:m0_burstcount -> fifo_memory_in_csr_translator:uav_burstcount
	wire   [31:0] fifo_memory_in_csr_agent_m0_writedata;                                     // fifo_memory_in_csr_agent:m0_writedata -> fifo_memory_in_csr_translator:uav_writedata
	wire   [31:0] fifo_memory_in_csr_agent_m0_address;                                       // fifo_memory_in_csr_agent:m0_address -> fifo_memory_in_csr_translator:uav_address
	wire          fifo_memory_in_csr_agent_m0_write;                                         // fifo_memory_in_csr_agent:m0_write -> fifo_memory_in_csr_translator:uav_write
	wire          fifo_memory_in_csr_agent_m0_lock;                                          // fifo_memory_in_csr_agent:m0_lock -> fifo_memory_in_csr_translator:uav_lock
	wire          fifo_memory_in_csr_agent_m0_read;                                          // fifo_memory_in_csr_agent:m0_read -> fifo_memory_in_csr_translator:uav_read
	wire   [31:0] fifo_memory_in_csr_agent_m0_readdata;                                      // fifo_memory_in_csr_translator:uav_readdata -> fifo_memory_in_csr_agent:m0_readdata
	wire          fifo_memory_in_csr_agent_m0_readdatavalid;                                 // fifo_memory_in_csr_translator:uav_readdatavalid -> fifo_memory_in_csr_agent:m0_readdatavalid
	wire          fifo_memory_in_csr_agent_m0_debugaccess;                                   // fifo_memory_in_csr_agent:m0_debugaccess -> fifo_memory_in_csr_translator:uav_debugaccess
	wire    [3:0] fifo_memory_in_csr_agent_m0_byteenable;                                    // fifo_memory_in_csr_agent:m0_byteenable -> fifo_memory_in_csr_translator:uav_byteenable
	wire          fifo_memory_in_csr_agent_rf_source_endofpacket;                            // fifo_memory_in_csr_agent:rf_source_endofpacket -> fifo_memory_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_memory_in_csr_agent_rf_source_valid;                                  // fifo_memory_in_csr_agent:rf_source_valid -> fifo_memory_in_csr_agent_rsp_fifo:in_valid
	wire          fifo_memory_in_csr_agent_rf_source_startofpacket;                          // fifo_memory_in_csr_agent:rf_source_startofpacket -> fifo_memory_in_csr_agent_rsp_fifo:in_startofpacket
	wire  [115:0] fifo_memory_in_csr_agent_rf_source_data;                                   // fifo_memory_in_csr_agent:rf_source_data -> fifo_memory_in_csr_agent_rsp_fifo:in_data
	wire          fifo_memory_in_csr_agent_rf_source_ready;                                  // fifo_memory_in_csr_agent_rsp_fifo:in_ready -> fifo_memory_in_csr_agent:rf_source_ready
	wire          fifo_memory_in_csr_agent_rsp_fifo_out_endofpacket;                         // fifo_memory_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_memory_in_csr_agent:rf_sink_endofpacket
	wire          fifo_memory_in_csr_agent_rsp_fifo_out_valid;                               // fifo_memory_in_csr_agent_rsp_fifo:out_valid -> fifo_memory_in_csr_agent:rf_sink_valid
	wire          fifo_memory_in_csr_agent_rsp_fifo_out_startofpacket;                       // fifo_memory_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_memory_in_csr_agent:rf_sink_startofpacket
	wire  [115:0] fifo_memory_in_csr_agent_rsp_fifo_out_data;                                // fifo_memory_in_csr_agent_rsp_fifo:out_data -> fifo_memory_in_csr_agent:rf_sink_data
	wire          fifo_memory_in_csr_agent_rsp_fifo_out_ready;                               // fifo_memory_in_csr_agent:rf_sink_ready -> fifo_memory_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_memory_in_csr_agent_rdata_fifo_src_valid;                             // fifo_memory_in_csr_agent:rdata_fifo_src_valid -> fifo_memory_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] fifo_memory_in_csr_agent_rdata_fifo_src_data;                              // fifo_memory_in_csr_agent:rdata_fifo_src_data -> fifo_memory_in_csr_agent:rdata_fifo_sink_data
	wire          fifo_memory_in_csr_agent_rdata_fifo_src_ready;                             // fifo_memory_in_csr_agent:rdata_fifo_sink_ready -> fifo_memory_in_csr_agent:rdata_fifo_src_ready
	wire          fifo_memory_in_agent_m0_waitrequest;                                       // fifo_memory_in_translator:uav_waitrequest -> fifo_memory_in_agent:m0_waitrequest
	wire    [3:0] fifo_memory_in_agent_m0_burstcount;                                        // fifo_memory_in_agent:m0_burstcount -> fifo_memory_in_translator:uav_burstcount
	wire   [63:0] fifo_memory_in_agent_m0_writedata;                                         // fifo_memory_in_agent:m0_writedata -> fifo_memory_in_translator:uav_writedata
	wire   [31:0] fifo_memory_in_agent_m0_address;                                           // fifo_memory_in_agent:m0_address -> fifo_memory_in_translator:uav_address
	wire          fifo_memory_in_agent_m0_write;                                             // fifo_memory_in_agent:m0_write -> fifo_memory_in_translator:uav_write
	wire          fifo_memory_in_agent_m0_lock;                                              // fifo_memory_in_agent:m0_lock -> fifo_memory_in_translator:uav_lock
	wire          fifo_memory_in_agent_m0_read;                                              // fifo_memory_in_agent:m0_read -> fifo_memory_in_translator:uav_read
	wire   [63:0] fifo_memory_in_agent_m0_readdata;                                          // fifo_memory_in_translator:uav_readdata -> fifo_memory_in_agent:m0_readdata
	wire          fifo_memory_in_agent_m0_readdatavalid;                                     // fifo_memory_in_translator:uav_readdatavalid -> fifo_memory_in_agent:m0_readdatavalid
	wire          fifo_memory_in_agent_m0_debugaccess;                                       // fifo_memory_in_agent:m0_debugaccess -> fifo_memory_in_translator:uav_debugaccess
	wire    [7:0] fifo_memory_in_agent_m0_byteenable;                                        // fifo_memory_in_agent:m0_byteenable -> fifo_memory_in_translator:uav_byteenable
	wire          fifo_memory_in_agent_rf_source_endofpacket;                                // fifo_memory_in_agent:rf_source_endofpacket -> fifo_memory_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_memory_in_agent_rf_source_valid;                                      // fifo_memory_in_agent:rf_source_valid -> fifo_memory_in_agent_rsp_fifo:in_valid
	wire          fifo_memory_in_agent_rf_source_startofpacket;                              // fifo_memory_in_agent:rf_source_startofpacket -> fifo_memory_in_agent_rsp_fifo:in_startofpacket
	wire  [151:0] fifo_memory_in_agent_rf_source_data;                                       // fifo_memory_in_agent:rf_source_data -> fifo_memory_in_agent_rsp_fifo:in_data
	wire          fifo_memory_in_agent_rf_source_ready;                                      // fifo_memory_in_agent_rsp_fifo:in_ready -> fifo_memory_in_agent:rf_source_ready
	wire          fifo_memory_in_agent_rsp_fifo_out_endofpacket;                             // fifo_memory_in_agent_rsp_fifo:out_endofpacket -> fifo_memory_in_agent:rf_sink_endofpacket
	wire          fifo_memory_in_agent_rsp_fifo_out_valid;                                   // fifo_memory_in_agent_rsp_fifo:out_valid -> fifo_memory_in_agent:rf_sink_valid
	wire          fifo_memory_in_agent_rsp_fifo_out_startofpacket;                           // fifo_memory_in_agent_rsp_fifo:out_startofpacket -> fifo_memory_in_agent:rf_sink_startofpacket
	wire  [151:0] fifo_memory_in_agent_rsp_fifo_out_data;                                    // fifo_memory_in_agent_rsp_fifo:out_data -> fifo_memory_in_agent:rf_sink_data
	wire          fifo_memory_in_agent_rsp_fifo_out_ready;                                   // fifo_memory_in_agent:rf_sink_ready -> fifo_memory_in_agent_rsp_fifo:out_ready
	wire          fifo_memory_in_agent_rdata_fifo_src_valid;                                 // fifo_memory_in_agent:rdata_fifo_src_valid -> fifo_memory_in_agent:rdata_fifo_sink_valid
	wire   [65:0] fifo_memory_in_agent_rdata_fifo_src_data;                                  // fifo_memory_in_agent:rdata_fifo_src_data -> fifo_memory_in_agent:rdata_fifo_sink_data
	wire          fifo_memory_in_agent_rdata_fifo_src_ready;                                 // fifo_memory_in_agent:rdata_fifo_sink_ready -> fifo_memory_in_agent:rdata_fifo_src_ready
	wire          fifo_memory_out_agent_m0_waitrequest;                                      // fifo_memory_out_translator:uav_waitrequest -> fifo_memory_out_agent:m0_waitrequest
	wire    [3:0] fifo_memory_out_agent_m0_burstcount;                                       // fifo_memory_out_agent:m0_burstcount -> fifo_memory_out_translator:uav_burstcount
	wire   [63:0] fifo_memory_out_agent_m0_writedata;                                        // fifo_memory_out_agent:m0_writedata -> fifo_memory_out_translator:uav_writedata
	wire   [31:0] fifo_memory_out_agent_m0_address;                                          // fifo_memory_out_agent:m0_address -> fifo_memory_out_translator:uav_address
	wire          fifo_memory_out_agent_m0_write;                                            // fifo_memory_out_agent:m0_write -> fifo_memory_out_translator:uav_write
	wire          fifo_memory_out_agent_m0_lock;                                             // fifo_memory_out_agent:m0_lock -> fifo_memory_out_translator:uav_lock
	wire          fifo_memory_out_agent_m0_read;                                             // fifo_memory_out_agent:m0_read -> fifo_memory_out_translator:uav_read
	wire   [63:0] fifo_memory_out_agent_m0_readdata;                                         // fifo_memory_out_translator:uav_readdata -> fifo_memory_out_agent:m0_readdata
	wire          fifo_memory_out_agent_m0_readdatavalid;                                    // fifo_memory_out_translator:uav_readdatavalid -> fifo_memory_out_agent:m0_readdatavalid
	wire          fifo_memory_out_agent_m0_debugaccess;                                      // fifo_memory_out_agent:m0_debugaccess -> fifo_memory_out_translator:uav_debugaccess
	wire    [7:0] fifo_memory_out_agent_m0_byteenable;                                       // fifo_memory_out_agent:m0_byteenable -> fifo_memory_out_translator:uav_byteenable
	wire          fifo_memory_out_agent_rf_source_endofpacket;                               // fifo_memory_out_agent:rf_source_endofpacket -> fifo_memory_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_memory_out_agent_rf_source_valid;                                     // fifo_memory_out_agent:rf_source_valid -> fifo_memory_out_agent_rsp_fifo:in_valid
	wire          fifo_memory_out_agent_rf_source_startofpacket;                             // fifo_memory_out_agent:rf_source_startofpacket -> fifo_memory_out_agent_rsp_fifo:in_startofpacket
	wire  [151:0] fifo_memory_out_agent_rf_source_data;                                      // fifo_memory_out_agent:rf_source_data -> fifo_memory_out_agent_rsp_fifo:in_data
	wire          fifo_memory_out_agent_rf_source_ready;                                     // fifo_memory_out_agent_rsp_fifo:in_ready -> fifo_memory_out_agent:rf_source_ready
	wire          fifo_memory_out_agent_rsp_fifo_out_endofpacket;                            // fifo_memory_out_agent_rsp_fifo:out_endofpacket -> fifo_memory_out_agent:rf_sink_endofpacket
	wire          fifo_memory_out_agent_rsp_fifo_out_valid;                                  // fifo_memory_out_agent_rsp_fifo:out_valid -> fifo_memory_out_agent:rf_sink_valid
	wire          fifo_memory_out_agent_rsp_fifo_out_startofpacket;                          // fifo_memory_out_agent_rsp_fifo:out_startofpacket -> fifo_memory_out_agent:rf_sink_startofpacket
	wire  [151:0] fifo_memory_out_agent_rsp_fifo_out_data;                                   // fifo_memory_out_agent_rsp_fifo:out_data -> fifo_memory_out_agent:rf_sink_data
	wire          fifo_memory_out_agent_rsp_fifo_out_ready;                                  // fifo_memory_out_agent:rf_sink_ready -> fifo_memory_out_agent_rsp_fifo:out_ready
	wire          fifo_memory_out_agent_rdata_fifo_src_valid;                                // fifo_memory_out_agent:rdata_fifo_src_valid -> fifo_memory_out_agent:rdata_fifo_sink_valid
	wire   [65:0] fifo_memory_out_agent_rdata_fifo_src_data;                                 // fifo_memory_out_agent:rdata_fifo_src_data -> fifo_memory_out_agent:rdata_fifo_sink_data
	wire          fifo_memory_out_agent_rdata_fifo_src_ready;                                // fifo_memory_out_agent:rdata_fifo_sink_ready -> fifo_memory_out_agent:rdata_fifo_src_ready
	wire          interpo_4_0_s1_agent_m0_waitrequest;                                       // Interpo_4_0_s1_translator:uav_waitrequest -> Interpo_4_0_s1_agent:m0_waitrequest
	wire    [2:0] interpo_4_0_s1_agent_m0_burstcount;                                        // Interpo_4_0_s1_agent:m0_burstcount -> Interpo_4_0_s1_translator:uav_burstcount
	wire   [31:0] interpo_4_0_s1_agent_m0_writedata;                                         // Interpo_4_0_s1_agent:m0_writedata -> Interpo_4_0_s1_translator:uav_writedata
	wire   [31:0] interpo_4_0_s1_agent_m0_address;                                           // Interpo_4_0_s1_agent:m0_address -> Interpo_4_0_s1_translator:uav_address
	wire          interpo_4_0_s1_agent_m0_write;                                             // Interpo_4_0_s1_agent:m0_write -> Interpo_4_0_s1_translator:uav_write
	wire          interpo_4_0_s1_agent_m0_lock;                                              // Interpo_4_0_s1_agent:m0_lock -> Interpo_4_0_s1_translator:uav_lock
	wire          interpo_4_0_s1_agent_m0_read;                                              // Interpo_4_0_s1_agent:m0_read -> Interpo_4_0_s1_translator:uav_read
	wire   [31:0] interpo_4_0_s1_agent_m0_readdata;                                          // Interpo_4_0_s1_translator:uav_readdata -> Interpo_4_0_s1_agent:m0_readdata
	wire          interpo_4_0_s1_agent_m0_readdatavalid;                                     // Interpo_4_0_s1_translator:uav_readdatavalid -> Interpo_4_0_s1_agent:m0_readdatavalid
	wire          interpo_4_0_s1_agent_m0_debugaccess;                                       // Interpo_4_0_s1_agent:m0_debugaccess -> Interpo_4_0_s1_translator:uav_debugaccess
	wire    [3:0] interpo_4_0_s1_agent_m0_byteenable;                                        // Interpo_4_0_s1_agent:m0_byteenable -> Interpo_4_0_s1_translator:uav_byteenable
	wire          interpo_4_0_s1_agent_rf_source_endofpacket;                                // Interpo_4_0_s1_agent:rf_source_endofpacket -> Interpo_4_0_s1_agent_rsp_fifo:in_endofpacket
	wire          interpo_4_0_s1_agent_rf_source_valid;                                      // Interpo_4_0_s1_agent:rf_source_valid -> Interpo_4_0_s1_agent_rsp_fifo:in_valid
	wire          interpo_4_0_s1_agent_rf_source_startofpacket;                              // Interpo_4_0_s1_agent:rf_source_startofpacket -> Interpo_4_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] interpo_4_0_s1_agent_rf_source_data;                                       // Interpo_4_0_s1_agent:rf_source_data -> Interpo_4_0_s1_agent_rsp_fifo:in_data
	wire          interpo_4_0_s1_agent_rf_source_ready;                                      // Interpo_4_0_s1_agent_rsp_fifo:in_ready -> Interpo_4_0_s1_agent:rf_source_ready
	wire          interpo_4_0_s1_agent_rsp_fifo_out_endofpacket;                             // Interpo_4_0_s1_agent_rsp_fifo:out_endofpacket -> Interpo_4_0_s1_agent:rf_sink_endofpacket
	wire          interpo_4_0_s1_agent_rsp_fifo_out_valid;                                   // Interpo_4_0_s1_agent_rsp_fifo:out_valid -> Interpo_4_0_s1_agent:rf_sink_valid
	wire          interpo_4_0_s1_agent_rsp_fifo_out_startofpacket;                           // Interpo_4_0_s1_agent_rsp_fifo:out_startofpacket -> Interpo_4_0_s1_agent:rf_sink_startofpacket
	wire  [115:0] interpo_4_0_s1_agent_rsp_fifo_out_data;                                    // Interpo_4_0_s1_agent_rsp_fifo:out_data -> Interpo_4_0_s1_agent:rf_sink_data
	wire          interpo_4_0_s1_agent_rsp_fifo_out_ready;                                   // Interpo_4_0_s1_agent:rf_sink_ready -> Interpo_4_0_s1_agent_rsp_fifo:out_ready
	wire          interpo_4_0_s1_agent_rdata_fifo_src_valid;                                 // Interpo_4_0_s1_agent:rdata_fifo_src_valid -> Interpo_4_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] interpo_4_0_s1_agent_rdata_fifo_src_data;                                  // Interpo_4_0_s1_agent:rdata_fifo_src_data -> Interpo_4_0_s1_agent:rdata_fifo_sink_data
	wire          interpo_4_0_s1_agent_rdata_fifo_src_ready;                                 // Interpo_4_0_s1_agent:rdata_fifo_sink_ready -> Interpo_4_0_s1_agent:rdata_fifo_src_ready
	wire          interpo_5_0_s1_agent_m0_waitrequest;                                       // Interpo_5_0_s1_translator:uav_waitrequest -> Interpo_5_0_s1_agent:m0_waitrequest
	wire    [2:0] interpo_5_0_s1_agent_m0_burstcount;                                        // Interpo_5_0_s1_agent:m0_burstcount -> Interpo_5_0_s1_translator:uav_burstcount
	wire   [31:0] interpo_5_0_s1_agent_m0_writedata;                                         // Interpo_5_0_s1_agent:m0_writedata -> Interpo_5_0_s1_translator:uav_writedata
	wire   [31:0] interpo_5_0_s1_agent_m0_address;                                           // Interpo_5_0_s1_agent:m0_address -> Interpo_5_0_s1_translator:uav_address
	wire          interpo_5_0_s1_agent_m0_write;                                             // Interpo_5_0_s1_agent:m0_write -> Interpo_5_0_s1_translator:uav_write
	wire          interpo_5_0_s1_agent_m0_lock;                                              // Interpo_5_0_s1_agent:m0_lock -> Interpo_5_0_s1_translator:uav_lock
	wire          interpo_5_0_s1_agent_m0_read;                                              // Interpo_5_0_s1_agent:m0_read -> Interpo_5_0_s1_translator:uav_read
	wire   [31:0] interpo_5_0_s1_agent_m0_readdata;                                          // Interpo_5_0_s1_translator:uav_readdata -> Interpo_5_0_s1_agent:m0_readdata
	wire          interpo_5_0_s1_agent_m0_readdatavalid;                                     // Interpo_5_0_s1_translator:uav_readdatavalid -> Interpo_5_0_s1_agent:m0_readdatavalid
	wire          interpo_5_0_s1_agent_m0_debugaccess;                                       // Interpo_5_0_s1_agent:m0_debugaccess -> Interpo_5_0_s1_translator:uav_debugaccess
	wire    [3:0] interpo_5_0_s1_agent_m0_byteenable;                                        // Interpo_5_0_s1_agent:m0_byteenable -> Interpo_5_0_s1_translator:uav_byteenable
	wire          interpo_5_0_s1_agent_rf_source_endofpacket;                                // Interpo_5_0_s1_agent:rf_source_endofpacket -> Interpo_5_0_s1_agent_rsp_fifo:in_endofpacket
	wire          interpo_5_0_s1_agent_rf_source_valid;                                      // Interpo_5_0_s1_agent:rf_source_valid -> Interpo_5_0_s1_agent_rsp_fifo:in_valid
	wire          interpo_5_0_s1_agent_rf_source_startofpacket;                              // Interpo_5_0_s1_agent:rf_source_startofpacket -> Interpo_5_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] interpo_5_0_s1_agent_rf_source_data;                                       // Interpo_5_0_s1_agent:rf_source_data -> Interpo_5_0_s1_agent_rsp_fifo:in_data
	wire          interpo_5_0_s1_agent_rf_source_ready;                                      // Interpo_5_0_s1_agent_rsp_fifo:in_ready -> Interpo_5_0_s1_agent:rf_source_ready
	wire          interpo_5_0_s1_agent_rsp_fifo_out_endofpacket;                             // Interpo_5_0_s1_agent_rsp_fifo:out_endofpacket -> Interpo_5_0_s1_agent:rf_sink_endofpacket
	wire          interpo_5_0_s1_agent_rsp_fifo_out_valid;                                   // Interpo_5_0_s1_agent_rsp_fifo:out_valid -> Interpo_5_0_s1_agent:rf_sink_valid
	wire          interpo_5_0_s1_agent_rsp_fifo_out_startofpacket;                           // Interpo_5_0_s1_agent_rsp_fifo:out_startofpacket -> Interpo_5_0_s1_agent:rf_sink_startofpacket
	wire  [115:0] interpo_5_0_s1_agent_rsp_fifo_out_data;                                    // Interpo_5_0_s1_agent_rsp_fifo:out_data -> Interpo_5_0_s1_agent:rf_sink_data
	wire          interpo_5_0_s1_agent_rsp_fifo_out_ready;                                   // Interpo_5_0_s1_agent:rf_sink_ready -> Interpo_5_0_s1_agent_rsp_fifo:out_ready
	wire          interpo_5_0_s1_agent_rdata_fifo_src_valid;                                 // Interpo_5_0_s1_agent:rdata_fifo_src_valid -> Interpo_5_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] interpo_5_0_s1_agent_rdata_fifo_src_data;                                  // Interpo_5_0_s1_agent:rdata_fifo_src_data -> Interpo_5_0_s1_agent:rdata_fifo_sink_data
	wire          interpo_5_0_s1_agent_rdata_fifo_src_ready;                                 // Interpo_5_0_s1_agent:rdata_fifo_sink_ready -> Interpo_5_0_s1_agent:rdata_fifo_src_ready
	wire          interpo_5_1_s1_agent_m0_waitrequest;                                       // Interpo_5_1_s1_translator:uav_waitrequest -> Interpo_5_1_s1_agent:m0_waitrequest
	wire    [2:0] interpo_5_1_s1_agent_m0_burstcount;                                        // Interpo_5_1_s1_agent:m0_burstcount -> Interpo_5_1_s1_translator:uav_burstcount
	wire   [31:0] interpo_5_1_s1_agent_m0_writedata;                                         // Interpo_5_1_s1_agent:m0_writedata -> Interpo_5_1_s1_translator:uav_writedata
	wire   [31:0] interpo_5_1_s1_agent_m0_address;                                           // Interpo_5_1_s1_agent:m0_address -> Interpo_5_1_s1_translator:uav_address
	wire          interpo_5_1_s1_agent_m0_write;                                             // Interpo_5_1_s1_agent:m0_write -> Interpo_5_1_s1_translator:uav_write
	wire          interpo_5_1_s1_agent_m0_lock;                                              // Interpo_5_1_s1_agent:m0_lock -> Interpo_5_1_s1_translator:uav_lock
	wire          interpo_5_1_s1_agent_m0_read;                                              // Interpo_5_1_s1_agent:m0_read -> Interpo_5_1_s1_translator:uav_read
	wire   [31:0] interpo_5_1_s1_agent_m0_readdata;                                          // Interpo_5_1_s1_translator:uav_readdata -> Interpo_5_1_s1_agent:m0_readdata
	wire          interpo_5_1_s1_agent_m0_readdatavalid;                                     // Interpo_5_1_s1_translator:uav_readdatavalid -> Interpo_5_1_s1_agent:m0_readdatavalid
	wire          interpo_5_1_s1_agent_m0_debugaccess;                                       // Interpo_5_1_s1_agent:m0_debugaccess -> Interpo_5_1_s1_translator:uav_debugaccess
	wire    [3:0] interpo_5_1_s1_agent_m0_byteenable;                                        // Interpo_5_1_s1_agent:m0_byteenable -> Interpo_5_1_s1_translator:uav_byteenable
	wire          interpo_5_1_s1_agent_rf_source_endofpacket;                                // Interpo_5_1_s1_agent:rf_source_endofpacket -> Interpo_5_1_s1_agent_rsp_fifo:in_endofpacket
	wire          interpo_5_1_s1_agent_rf_source_valid;                                      // Interpo_5_1_s1_agent:rf_source_valid -> Interpo_5_1_s1_agent_rsp_fifo:in_valid
	wire          interpo_5_1_s1_agent_rf_source_startofpacket;                              // Interpo_5_1_s1_agent:rf_source_startofpacket -> Interpo_5_1_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] interpo_5_1_s1_agent_rf_source_data;                                       // Interpo_5_1_s1_agent:rf_source_data -> Interpo_5_1_s1_agent_rsp_fifo:in_data
	wire          interpo_5_1_s1_agent_rf_source_ready;                                      // Interpo_5_1_s1_agent_rsp_fifo:in_ready -> Interpo_5_1_s1_agent:rf_source_ready
	wire          interpo_5_1_s1_agent_rsp_fifo_out_endofpacket;                             // Interpo_5_1_s1_agent_rsp_fifo:out_endofpacket -> Interpo_5_1_s1_agent:rf_sink_endofpacket
	wire          interpo_5_1_s1_agent_rsp_fifo_out_valid;                                   // Interpo_5_1_s1_agent_rsp_fifo:out_valid -> Interpo_5_1_s1_agent:rf_sink_valid
	wire          interpo_5_1_s1_agent_rsp_fifo_out_startofpacket;                           // Interpo_5_1_s1_agent_rsp_fifo:out_startofpacket -> Interpo_5_1_s1_agent:rf_sink_startofpacket
	wire  [115:0] interpo_5_1_s1_agent_rsp_fifo_out_data;                                    // Interpo_5_1_s1_agent_rsp_fifo:out_data -> Interpo_5_1_s1_agent:rf_sink_data
	wire          interpo_5_1_s1_agent_rsp_fifo_out_ready;                                   // Interpo_5_1_s1_agent:rf_sink_ready -> Interpo_5_1_s1_agent_rsp_fifo:out_ready
	wire          interpo_5_1_s1_agent_rdata_fifo_src_valid;                                 // Interpo_5_1_s1_agent:rdata_fifo_src_valid -> Interpo_5_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] interpo_5_1_s1_agent_rdata_fifo_src_data;                                  // Interpo_5_1_s1_agent:rdata_fifo_src_data -> Interpo_5_1_s1_agent:rdata_fifo_sink_data
	wire          interpo_5_1_s1_agent_rdata_fifo_src_ready;                                 // Interpo_5_1_s1_agent:rdata_fifo_sink_ready -> Interpo_5_1_s1_agent:rdata_fifo_src_ready
	wire          interpo_5_2_s1_agent_m0_waitrequest;                                       // Interpo_5_2_s1_translator:uav_waitrequest -> Interpo_5_2_s1_agent:m0_waitrequest
	wire    [2:0] interpo_5_2_s1_agent_m0_burstcount;                                        // Interpo_5_2_s1_agent:m0_burstcount -> Interpo_5_2_s1_translator:uav_burstcount
	wire   [31:0] interpo_5_2_s1_agent_m0_writedata;                                         // Interpo_5_2_s1_agent:m0_writedata -> Interpo_5_2_s1_translator:uav_writedata
	wire   [31:0] interpo_5_2_s1_agent_m0_address;                                           // Interpo_5_2_s1_agent:m0_address -> Interpo_5_2_s1_translator:uav_address
	wire          interpo_5_2_s1_agent_m0_write;                                             // Interpo_5_2_s1_agent:m0_write -> Interpo_5_2_s1_translator:uav_write
	wire          interpo_5_2_s1_agent_m0_lock;                                              // Interpo_5_2_s1_agent:m0_lock -> Interpo_5_2_s1_translator:uav_lock
	wire          interpo_5_2_s1_agent_m0_read;                                              // Interpo_5_2_s1_agent:m0_read -> Interpo_5_2_s1_translator:uav_read
	wire   [31:0] interpo_5_2_s1_agent_m0_readdata;                                          // Interpo_5_2_s1_translator:uav_readdata -> Interpo_5_2_s1_agent:m0_readdata
	wire          interpo_5_2_s1_agent_m0_readdatavalid;                                     // Interpo_5_2_s1_translator:uav_readdatavalid -> Interpo_5_2_s1_agent:m0_readdatavalid
	wire          interpo_5_2_s1_agent_m0_debugaccess;                                       // Interpo_5_2_s1_agent:m0_debugaccess -> Interpo_5_2_s1_translator:uav_debugaccess
	wire    [3:0] interpo_5_2_s1_agent_m0_byteenable;                                        // Interpo_5_2_s1_agent:m0_byteenable -> Interpo_5_2_s1_translator:uav_byteenable
	wire          interpo_5_2_s1_agent_rf_source_endofpacket;                                // Interpo_5_2_s1_agent:rf_source_endofpacket -> Interpo_5_2_s1_agent_rsp_fifo:in_endofpacket
	wire          interpo_5_2_s1_agent_rf_source_valid;                                      // Interpo_5_2_s1_agent:rf_source_valid -> Interpo_5_2_s1_agent_rsp_fifo:in_valid
	wire          interpo_5_2_s1_agent_rf_source_startofpacket;                              // Interpo_5_2_s1_agent:rf_source_startofpacket -> Interpo_5_2_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] interpo_5_2_s1_agent_rf_source_data;                                       // Interpo_5_2_s1_agent:rf_source_data -> Interpo_5_2_s1_agent_rsp_fifo:in_data
	wire          interpo_5_2_s1_agent_rf_source_ready;                                      // Interpo_5_2_s1_agent_rsp_fifo:in_ready -> Interpo_5_2_s1_agent:rf_source_ready
	wire          interpo_5_2_s1_agent_rsp_fifo_out_endofpacket;                             // Interpo_5_2_s1_agent_rsp_fifo:out_endofpacket -> Interpo_5_2_s1_agent:rf_sink_endofpacket
	wire          interpo_5_2_s1_agent_rsp_fifo_out_valid;                                   // Interpo_5_2_s1_agent_rsp_fifo:out_valid -> Interpo_5_2_s1_agent:rf_sink_valid
	wire          interpo_5_2_s1_agent_rsp_fifo_out_startofpacket;                           // Interpo_5_2_s1_agent_rsp_fifo:out_startofpacket -> Interpo_5_2_s1_agent:rf_sink_startofpacket
	wire  [115:0] interpo_5_2_s1_agent_rsp_fifo_out_data;                                    // Interpo_5_2_s1_agent_rsp_fifo:out_data -> Interpo_5_2_s1_agent:rf_sink_data
	wire          interpo_5_2_s1_agent_rsp_fifo_out_ready;                                   // Interpo_5_2_s1_agent:rf_sink_ready -> Interpo_5_2_s1_agent_rsp_fifo:out_ready
	wire          interpo_5_2_s1_agent_rdata_fifo_src_valid;                                 // Interpo_5_2_s1_agent:rdata_fifo_src_valid -> Interpo_5_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] interpo_5_2_s1_agent_rdata_fifo_src_data;                                  // Interpo_5_2_s1_agent:rdata_fifo_src_data -> Interpo_5_2_s1_agent:rdata_fifo_sink_data
	wire          interpo_5_2_s1_agent_rdata_fifo_src_ready;                                 // Interpo_5_2_s1_agent:rdata_fifo_sink_ready -> Interpo_5_2_s1_agent:rdata_fifo_src_ready
	wire          interpo_5_3_s1_agent_m0_waitrequest;                                       // Interpo_5_3_s1_translator:uav_waitrequest -> Interpo_5_3_s1_agent:m0_waitrequest
	wire    [2:0] interpo_5_3_s1_agent_m0_burstcount;                                        // Interpo_5_3_s1_agent:m0_burstcount -> Interpo_5_3_s1_translator:uav_burstcount
	wire   [31:0] interpo_5_3_s1_agent_m0_writedata;                                         // Interpo_5_3_s1_agent:m0_writedata -> Interpo_5_3_s1_translator:uav_writedata
	wire   [31:0] interpo_5_3_s1_agent_m0_address;                                           // Interpo_5_3_s1_agent:m0_address -> Interpo_5_3_s1_translator:uav_address
	wire          interpo_5_3_s1_agent_m0_write;                                             // Interpo_5_3_s1_agent:m0_write -> Interpo_5_3_s1_translator:uav_write
	wire          interpo_5_3_s1_agent_m0_lock;                                              // Interpo_5_3_s1_agent:m0_lock -> Interpo_5_3_s1_translator:uav_lock
	wire          interpo_5_3_s1_agent_m0_read;                                              // Interpo_5_3_s1_agent:m0_read -> Interpo_5_3_s1_translator:uav_read
	wire   [31:0] interpo_5_3_s1_agent_m0_readdata;                                          // Interpo_5_3_s1_translator:uav_readdata -> Interpo_5_3_s1_agent:m0_readdata
	wire          interpo_5_3_s1_agent_m0_readdatavalid;                                     // Interpo_5_3_s1_translator:uav_readdatavalid -> Interpo_5_3_s1_agent:m0_readdatavalid
	wire          interpo_5_3_s1_agent_m0_debugaccess;                                       // Interpo_5_3_s1_agent:m0_debugaccess -> Interpo_5_3_s1_translator:uav_debugaccess
	wire    [3:0] interpo_5_3_s1_agent_m0_byteenable;                                        // Interpo_5_3_s1_agent:m0_byteenable -> Interpo_5_3_s1_translator:uav_byteenable
	wire          interpo_5_3_s1_agent_rf_source_endofpacket;                                // Interpo_5_3_s1_agent:rf_source_endofpacket -> Interpo_5_3_s1_agent_rsp_fifo:in_endofpacket
	wire          interpo_5_3_s1_agent_rf_source_valid;                                      // Interpo_5_3_s1_agent:rf_source_valid -> Interpo_5_3_s1_agent_rsp_fifo:in_valid
	wire          interpo_5_3_s1_agent_rf_source_startofpacket;                              // Interpo_5_3_s1_agent:rf_source_startofpacket -> Interpo_5_3_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] interpo_5_3_s1_agent_rf_source_data;                                       // Interpo_5_3_s1_agent:rf_source_data -> Interpo_5_3_s1_agent_rsp_fifo:in_data
	wire          interpo_5_3_s1_agent_rf_source_ready;                                      // Interpo_5_3_s1_agent_rsp_fifo:in_ready -> Interpo_5_3_s1_agent:rf_source_ready
	wire          interpo_5_3_s1_agent_rsp_fifo_out_endofpacket;                             // Interpo_5_3_s1_agent_rsp_fifo:out_endofpacket -> Interpo_5_3_s1_agent:rf_sink_endofpacket
	wire          interpo_5_3_s1_agent_rsp_fifo_out_valid;                                   // Interpo_5_3_s1_agent_rsp_fifo:out_valid -> Interpo_5_3_s1_agent:rf_sink_valid
	wire          interpo_5_3_s1_agent_rsp_fifo_out_startofpacket;                           // Interpo_5_3_s1_agent_rsp_fifo:out_startofpacket -> Interpo_5_3_s1_agent:rf_sink_startofpacket
	wire  [115:0] interpo_5_3_s1_agent_rsp_fifo_out_data;                                    // Interpo_5_3_s1_agent_rsp_fifo:out_data -> Interpo_5_3_s1_agent:rf_sink_data
	wire          interpo_5_3_s1_agent_rsp_fifo_out_ready;                                   // Interpo_5_3_s1_agent:rf_sink_ready -> Interpo_5_3_s1_agent_rsp_fifo:out_ready
	wire          interpo_5_3_s1_agent_rdata_fifo_src_valid;                                 // Interpo_5_3_s1_agent:rdata_fifo_src_valid -> Interpo_5_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] interpo_5_3_s1_agent_rdata_fifo_src_data;                                  // Interpo_5_3_s1_agent:rdata_fifo_src_data -> Interpo_5_3_s1_agent:rdata_fifo_sink_data
	wire          interpo_5_3_s1_agent_rdata_fifo_src_ready;                                 // Interpo_5_3_s1_agent:rdata_fifo_sink_ready -> Interpo_5_3_s1_agent:rdata_fifo_src_ready
	wire          adapt_fir_mem_s1_agent_m0_waitrequest;                                     // Adapt_FIR_mem_s1_translator:uav_waitrequest -> Adapt_FIR_mem_s1_agent:m0_waitrequest
	wire    [2:0] adapt_fir_mem_s1_agent_m0_burstcount;                                      // Adapt_FIR_mem_s1_agent:m0_burstcount -> Adapt_FIR_mem_s1_translator:uav_burstcount
	wire   [31:0] adapt_fir_mem_s1_agent_m0_writedata;                                       // Adapt_FIR_mem_s1_agent:m0_writedata -> Adapt_FIR_mem_s1_translator:uav_writedata
	wire   [31:0] adapt_fir_mem_s1_agent_m0_address;                                         // Adapt_FIR_mem_s1_agent:m0_address -> Adapt_FIR_mem_s1_translator:uav_address
	wire          adapt_fir_mem_s1_agent_m0_write;                                           // Adapt_FIR_mem_s1_agent:m0_write -> Adapt_FIR_mem_s1_translator:uav_write
	wire          adapt_fir_mem_s1_agent_m0_lock;                                            // Adapt_FIR_mem_s1_agent:m0_lock -> Adapt_FIR_mem_s1_translator:uav_lock
	wire          adapt_fir_mem_s1_agent_m0_read;                                            // Adapt_FIR_mem_s1_agent:m0_read -> Adapt_FIR_mem_s1_translator:uav_read
	wire   [31:0] adapt_fir_mem_s1_agent_m0_readdata;                                        // Adapt_FIR_mem_s1_translator:uav_readdata -> Adapt_FIR_mem_s1_agent:m0_readdata
	wire          adapt_fir_mem_s1_agent_m0_readdatavalid;                                   // Adapt_FIR_mem_s1_translator:uav_readdatavalid -> Adapt_FIR_mem_s1_agent:m0_readdatavalid
	wire          adapt_fir_mem_s1_agent_m0_debugaccess;                                     // Adapt_FIR_mem_s1_agent:m0_debugaccess -> Adapt_FIR_mem_s1_translator:uav_debugaccess
	wire    [3:0] adapt_fir_mem_s1_agent_m0_byteenable;                                      // Adapt_FIR_mem_s1_agent:m0_byteenable -> Adapt_FIR_mem_s1_translator:uav_byteenable
	wire          adapt_fir_mem_s1_agent_rf_source_endofpacket;                              // Adapt_FIR_mem_s1_agent:rf_source_endofpacket -> Adapt_FIR_mem_s1_agent_rsp_fifo:in_endofpacket
	wire          adapt_fir_mem_s1_agent_rf_source_valid;                                    // Adapt_FIR_mem_s1_agent:rf_source_valid -> Adapt_FIR_mem_s1_agent_rsp_fifo:in_valid
	wire          adapt_fir_mem_s1_agent_rf_source_startofpacket;                            // Adapt_FIR_mem_s1_agent:rf_source_startofpacket -> Adapt_FIR_mem_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] adapt_fir_mem_s1_agent_rf_source_data;                                     // Adapt_FIR_mem_s1_agent:rf_source_data -> Adapt_FIR_mem_s1_agent_rsp_fifo:in_data
	wire          adapt_fir_mem_s1_agent_rf_source_ready;                                    // Adapt_FIR_mem_s1_agent_rsp_fifo:in_ready -> Adapt_FIR_mem_s1_agent:rf_source_ready
	wire          adapt_fir_mem_s1_agent_rsp_fifo_out_endofpacket;                           // Adapt_FIR_mem_s1_agent_rsp_fifo:out_endofpacket -> Adapt_FIR_mem_s1_agent:rf_sink_endofpacket
	wire          adapt_fir_mem_s1_agent_rsp_fifo_out_valid;                                 // Adapt_FIR_mem_s1_agent_rsp_fifo:out_valid -> Adapt_FIR_mem_s1_agent:rf_sink_valid
	wire          adapt_fir_mem_s1_agent_rsp_fifo_out_startofpacket;                         // Adapt_FIR_mem_s1_agent_rsp_fifo:out_startofpacket -> Adapt_FIR_mem_s1_agent:rf_sink_startofpacket
	wire  [115:0] adapt_fir_mem_s1_agent_rsp_fifo_out_data;                                  // Adapt_FIR_mem_s1_agent_rsp_fifo:out_data -> Adapt_FIR_mem_s1_agent:rf_sink_data
	wire          adapt_fir_mem_s1_agent_rsp_fifo_out_ready;                                 // Adapt_FIR_mem_s1_agent:rf_sink_ready -> Adapt_FIR_mem_s1_agent_rsp_fifo:out_ready
	wire          adapt_fir_mem_s1_agent_rdata_fifo_src_valid;                               // Adapt_FIR_mem_s1_agent:rdata_fifo_src_valid -> Adapt_FIR_mem_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] adapt_fir_mem_s1_agent_rdata_fifo_src_data;                                // Adapt_FIR_mem_s1_agent:rdata_fifo_src_data -> Adapt_FIR_mem_s1_agent:rdata_fifo_sink_data
	wire          adapt_fir_mem_s1_agent_rdata_fifo_src_ready;                               // Adapt_FIR_mem_s1_agent:rdata_fifo_sink_ready -> Adapt_FIR_mem_s1_agent:rdata_fifo_src_ready
	wire          micfilter_cntl_s1_agent_m0_waitrequest;                                    // micFilter_cntl_s1_translator:uav_waitrequest -> micFilter_cntl_s1_agent:m0_waitrequest
	wire    [2:0] micfilter_cntl_s1_agent_m0_burstcount;                                     // micFilter_cntl_s1_agent:m0_burstcount -> micFilter_cntl_s1_translator:uav_burstcount
	wire   [31:0] micfilter_cntl_s1_agent_m0_writedata;                                      // micFilter_cntl_s1_agent:m0_writedata -> micFilter_cntl_s1_translator:uav_writedata
	wire   [31:0] micfilter_cntl_s1_agent_m0_address;                                        // micFilter_cntl_s1_agent:m0_address -> micFilter_cntl_s1_translator:uav_address
	wire          micfilter_cntl_s1_agent_m0_write;                                          // micFilter_cntl_s1_agent:m0_write -> micFilter_cntl_s1_translator:uav_write
	wire          micfilter_cntl_s1_agent_m0_lock;                                           // micFilter_cntl_s1_agent:m0_lock -> micFilter_cntl_s1_translator:uav_lock
	wire          micfilter_cntl_s1_agent_m0_read;                                           // micFilter_cntl_s1_agent:m0_read -> micFilter_cntl_s1_translator:uav_read
	wire   [31:0] micfilter_cntl_s1_agent_m0_readdata;                                       // micFilter_cntl_s1_translator:uav_readdata -> micFilter_cntl_s1_agent:m0_readdata
	wire          micfilter_cntl_s1_agent_m0_readdatavalid;                                  // micFilter_cntl_s1_translator:uav_readdatavalid -> micFilter_cntl_s1_agent:m0_readdatavalid
	wire          micfilter_cntl_s1_agent_m0_debugaccess;                                    // micFilter_cntl_s1_agent:m0_debugaccess -> micFilter_cntl_s1_translator:uav_debugaccess
	wire    [3:0] micfilter_cntl_s1_agent_m0_byteenable;                                     // micFilter_cntl_s1_agent:m0_byteenable -> micFilter_cntl_s1_translator:uav_byteenable
	wire          micfilter_cntl_s1_agent_rf_source_endofpacket;                             // micFilter_cntl_s1_agent:rf_source_endofpacket -> micFilter_cntl_s1_agent_rsp_fifo:in_endofpacket
	wire          micfilter_cntl_s1_agent_rf_source_valid;                                   // micFilter_cntl_s1_agent:rf_source_valid -> micFilter_cntl_s1_agent_rsp_fifo:in_valid
	wire          micfilter_cntl_s1_agent_rf_source_startofpacket;                           // micFilter_cntl_s1_agent:rf_source_startofpacket -> micFilter_cntl_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] micfilter_cntl_s1_agent_rf_source_data;                                    // micFilter_cntl_s1_agent:rf_source_data -> micFilter_cntl_s1_agent_rsp_fifo:in_data
	wire          micfilter_cntl_s1_agent_rf_source_ready;                                   // micFilter_cntl_s1_agent_rsp_fifo:in_ready -> micFilter_cntl_s1_agent:rf_source_ready
	wire          micfilter_cntl_s1_agent_rsp_fifo_out_endofpacket;                          // micFilter_cntl_s1_agent_rsp_fifo:out_endofpacket -> micFilter_cntl_s1_agent:rf_sink_endofpacket
	wire          micfilter_cntl_s1_agent_rsp_fifo_out_valid;                                // micFilter_cntl_s1_agent_rsp_fifo:out_valid -> micFilter_cntl_s1_agent:rf_sink_valid
	wire          micfilter_cntl_s1_agent_rsp_fifo_out_startofpacket;                        // micFilter_cntl_s1_agent_rsp_fifo:out_startofpacket -> micFilter_cntl_s1_agent:rf_sink_startofpacket
	wire  [115:0] micfilter_cntl_s1_agent_rsp_fifo_out_data;                                 // micFilter_cntl_s1_agent_rsp_fifo:out_data -> micFilter_cntl_s1_agent:rf_sink_data
	wire          micfilter_cntl_s1_agent_rsp_fifo_out_ready;                                // micFilter_cntl_s1_agent:rf_sink_ready -> micFilter_cntl_s1_agent_rsp_fifo:out_ready
	wire          micfilter_cntl_s1_agent_rdata_fifo_src_valid;                              // micFilter_cntl_s1_agent:rdata_fifo_src_valid -> micFilter_cntl_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] micfilter_cntl_s1_agent_rdata_fifo_src_data;                               // micFilter_cntl_s1_agent:rdata_fifo_src_data -> micFilter_cntl_s1_agent:rdata_fifo_sink_data
	wire          micfilter_cntl_s1_agent_rdata_fifo_src_ready;                              // micFilter_cntl_s1_agent:rdata_fifo_sink_ready -> micFilter_cntl_s1_agent:rdata_fifo_src_ready
	wire          micfilter_rst_s1_agent_m0_waitrequest;                                     // micFilter_rst_s1_translator:uav_waitrequest -> micFilter_rst_s1_agent:m0_waitrequest
	wire    [2:0] micfilter_rst_s1_agent_m0_burstcount;                                      // micFilter_rst_s1_agent:m0_burstcount -> micFilter_rst_s1_translator:uav_burstcount
	wire   [31:0] micfilter_rst_s1_agent_m0_writedata;                                       // micFilter_rst_s1_agent:m0_writedata -> micFilter_rst_s1_translator:uav_writedata
	wire   [31:0] micfilter_rst_s1_agent_m0_address;                                         // micFilter_rst_s1_agent:m0_address -> micFilter_rst_s1_translator:uav_address
	wire          micfilter_rst_s1_agent_m0_write;                                           // micFilter_rst_s1_agent:m0_write -> micFilter_rst_s1_translator:uav_write
	wire          micfilter_rst_s1_agent_m0_lock;                                            // micFilter_rst_s1_agent:m0_lock -> micFilter_rst_s1_translator:uav_lock
	wire          micfilter_rst_s1_agent_m0_read;                                            // micFilter_rst_s1_agent:m0_read -> micFilter_rst_s1_translator:uav_read
	wire   [31:0] micfilter_rst_s1_agent_m0_readdata;                                        // micFilter_rst_s1_translator:uav_readdata -> micFilter_rst_s1_agent:m0_readdata
	wire          micfilter_rst_s1_agent_m0_readdatavalid;                                   // micFilter_rst_s1_translator:uav_readdatavalid -> micFilter_rst_s1_agent:m0_readdatavalid
	wire          micfilter_rst_s1_agent_m0_debugaccess;                                     // micFilter_rst_s1_agent:m0_debugaccess -> micFilter_rst_s1_translator:uav_debugaccess
	wire    [3:0] micfilter_rst_s1_agent_m0_byteenable;                                      // micFilter_rst_s1_agent:m0_byteenable -> micFilter_rst_s1_translator:uav_byteenable
	wire          micfilter_rst_s1_agent_rf_source_endofpacket;                              // micFilter_rst_s1_agent:rf_source_endofpacket -> micFilter_rst_s1_agent_rsp_fifo:in_endofpacket
	wire          micfilter_rst_s1_agent_rf_source_valid;                                    // micFilter_rst_s1_agent:rf_source_valid -> micFilter_rst_s1_agent_rsp_fifo:in_valid
	wire          micfilter_rst_s1_agent_rf_source_startofpacket;                            // micFilter_rst_s1_agent:rf_source_startofpacket -> micFilter_rst_s1_agent_rsp_fifo:in_startofpacket
	wire  [115:0] micfilter_rst_s1_agent_rf_source_data;                                     // micFilter_rst_s1_agent:rf_source_data -> micFilter_rst_s1_agent_rsp_fifo:in_data
	wire          micfilter_rst_s1_agent_rf_source_ready;                                    // micFilter_rst_s1_agent_rsp_fifo:in_ready -> micFilter_rst_s1_agent:rf_source_ready
	wire          micfilter_rst_s1_agent_rsp_fifo_out_endofpacket;                           // micFilter_rst_s1_agent_rsp_fifo:out_endofpacket -> micFilter_rst_s1_agent:rf_sink_endofpacket
	wire          micfilter_rst_s1_agent_rsp_fifo_out_valid;                                 // micFilter_rst_s1_agent_rsp_fifo:out_valid -> micFilter_rst_s1_agent:rf_sink_valid
	wire          micfilter_rst_s1_agent_rsp_fifo_out_startofpacket;                         // micFilter_rst_s1_agent_rsp_fifo:out_startofpacket -> micFilter_rst_s1_agent:rf_sink_startofpacket
	wire  [115:0] micfilter_rst_s1_agent_rsp_fifo_out_data;                                  // micFilter_rst_s1_agent_rsp_fifo:out_data -> micFilter_rst_s1_agent:rf_sink_data
	wire          micfilter_rst_s1_agent_rsp_fifo_out_ready;                                 // micFilter_rst_s1_agent:rf_sink_ready -> micFilter_rst_s1_agent_rsp_fifo:out_ready
	wire          micfilter_rst_s1_agent_rdata_fifo_src_valid;                               // micFilter_rst_s1_agent:rdata_fifo_src_valid -> micFilter_rst_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] micfilter_rst_s1_agent_rdata_fifo_src_data;                                // micFilter_rst_s1_agent:rdata_fifo_src_data -> micFilter_rst_s1_agent:rdata_fifo_sink_data
	wire          micfilter_rst_s1_agent_rdata_fifo_src_ready;                               // micFilter_rst_s1_agent:rdata_fifo_sink_ready -> micFilter_rst_s1_agent:rdata_fifo_src_ready
	wire          pcie_ip_txs_agent_m0_waitrequest;                                          // pcie_ip_txs_translator:uav_waitrequest -> pcie_ip_txs_agent:m0_waitrequest
	wire    [9:0] pcie_ip_txs_agent_m0_burstcount;                                           // pcie_ip_txs_agent:m0_burstcount -> pcie_ip_txs_translator:uav_burstcount
	wire   [63:0] pcie_ip_txs_agent_m0_writedata;                                            // pcie_ip_txs_agent:m0_writedata -> pcie_ip_txs_translator:uav_writedata
	wire   [31:0] pcie_ip_txs_agent_m0_address;                                              // pcie_ip_txs_agent:m0_address -> pcie_ip_txs_translator:uav_address
	wire          pcie_ip_txs_agent_m0_write;                                                // pcie_ip_txs_agent:m0_write -> pcie_ip_txs_translator:uav_write
	wire          pcie_ip_txs_agent_m0_lock;                                                 // pcie_ip_txs_agent:m0_lock -> pcie_ip_txs_translator:uav_lock
	wire          pcie_ip_txs_agent_m0_read;                                                 // pcie_ip_txs_agent:m0_read -> pcie_ip_txs_translator:uav_read
	wire   [63:0] pcie_ip_txs_agent_m0_readdata;                                             // pcie_ip_txs_translator:uav_readdata -> pcie_ip_txs_agent:m0_readdata
	wire          pcie_ip_txs_agent_m0_readdatavalid;                                        // pcie_ip_txs_translator:uav_readdatavalid -> pcie_ip_txs_agent:m0_readdatavalid
	wire          pcie_ip_txs_agent_m0_debugaccess;                                          // pcie_ip_txs_agent:m0_debugaccess -> pcie_ip_txs_translator:uav_debugaccess
	wire    [7:0] pcie_ip_txs_agent_m0_byteenable;                                           // pcie_ip_txs_agent:m0_byteenable -> pcie_ip_txs_translator:uav_byteenable
	wire          pcie_ip_txs_agent_rf_source_endofpacket;                                   // pcie_ip_txs_agent:rf_source_endofpacket -> pcie_ip_txs_agent_rsp_fifo:in_endofpacket
	wire          pcie_ip_txs_agent_rf_source_valid;                                         // pcie_ip_txs_agent:rf_source_valid -> pcie_ip_txs_agent_rsp_fifo:in_valid
	wire          pcie_ip_txs_agent_rf_source_startofpacket;                                 // pcie_ip_txs_agent:rf_source_startofpacket -> pcie_ip_txs_agent_rsp_fifo:in_startofpacket
	wire  [151:0] pcie_ip_txs_agent_rf_source_data;                                          // pcie_ip_txs_agent:rf_source_data -> pcie_ip_txs_agent_rsp_fifo:in_data
	wire          pcie_ip_txs_agent_rf_source_ready;                                         // pcie_ip_txs_agent_rsp_fifo:in_ready -> pcie_ip_txs_agent:rf_source_ready
	wire          pcie_ip_txs_agent_rsp_fifo_out_endofpacket;                                // pcie_ip_txs_agent_rsp_fifo:out_endofpacket -> pcie_ip_txs_agent:rf_sink_endofpacket
	wire          pcie_ip_txs_agent_rsp_fifo_out_valid;                                      // pcie_ip_txs_agent_rsp_fifo:out_valid -> pcie_ip_txs_agent:rf_sink_valid
	wire          pcie_ip_txs_agent_rsp_fifo_out_startofpacket;                              // pcie_ip_txs_agent_rsp_fifo:out_startofpacket -> pcie_ip_txs_agent:rf_sink_startofpacket
	wire  [151:0] pcie_ip_txs_agent_rsp_fifo_out_data;                                       // pcie_ip_txs_agent_rsp_fifo:out_data -> pcie_ip_txs_agent:rf_sink_data
	wire          pcie_ip_txs_agent_rsp_fifo_out_ready;                                      // pcie_ip_txs_agent:rf_sink_ready -> pcie_ip_txs_agent_rsp_fifo:out_ready
	wire          pcie_ip_txs_agent_rdata_fifo_src_valid;                                    // pcie_ip_txs_agent:rdata_fifo_src_valid -> pcie_ip_txs_agent:rdata_fifo_sink_valid
	wire   [65:0] pcie_ip_txs_agent_rdata_fifo_src_data;                                     // pcie_ip_txs_agent:rdata_fifo_src_data -> pcie_ip_txs_agent:rdata_fifo_sink_data
	wire          pcie_ip_txs_agent_rdata_fifo_src_ready;                                    // pcie_ip_txs_agent:rdata_fifo_sink_ready -> pcie_ip_txs_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_endofpacket;                                               // cmd_mux_014:src_endofpacket -> pcie_ip_txs_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                     // cmd_mux_014:src_valid -> pcie_ip_txs_agent:cp_valid
	wire          cmd_mux_014_src_startofpacket;                                             // cmd_mux_014:src_startofpacket -> pcie_ip_txs_agent:cp_startofpacket
	wire  [150:0] cmd_mux_014_src_data;                                                      // cmd_mux_014:src_data -> pcie_ip_txs_agent:cp_data
	wire   [14:0] cmd_mux_014_src_channel;                                                   // cmd_mux_014:src_channel -> pcie_ip_txs_agent:cp_channel
	wire          cmd_mux_014_src_ready;                                                     // pcie_ip_txs_agent:cp_ready -> cmd_mux_014:src_ready
	wire          pcie_ip_bar1_0_agent_cp_endofpacket;                                       // pcie_ip_bar1_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          pcie_ip_bar1_0_agent_cp_valid;                                             // pcie_ip_bar1_0_agent:cp_valid -> router:sink_valid
	wire          pcie_ip_bar1_0_agent_cp_startofpacket;                                     // pcie_ip_bar1_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [150:0] pcie_ip_bar1_0_agent_cp_data;                                              // pcie_ip_bar1_0_agent:cp_data -> router:sink_data
	wire          pcie_ip_bar1_0_agent_cp_ready;                                             // router:sink_ready -> pcie_ip_bar1_0_agent:cp_ready
	wire          sgdma_m_read_agent_cp_endofpacket;                                         // sgdma_m_read_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sgdma_m_read_agent_cp_valid;                                               // sgdma_m_read_agent:cp_valid -> router_001:sink_valid
	wire          sgdma_m_read_agent_cp_startofpacket;                                       // sgdma_m_read_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [150:0] sgdma_m_read_agent_cp_data;                                                // sgdma_m_read_agent:cp_data -> router_001:sink_data
	wire          sgdma_m_read_agent_cp_ready;                                               // router_001:sink_ready -> sgdma_m_read_agent:cp_ready
	wire          sgdma_m_write_agent_cp_endofpacket;                                        // sgdma_m_write_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          sgdma_m_write_agent_cp_valid;                                              // sgdma_m_write_agent:cp_valid -> router_002:sink_valid
	wire          sgdma_m_write_agent_cp_startofpacket;                                      // sgdma_m_write_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire  [150:0] sgdma_m_write_agent_cp_data;                                               // sgdma_m_write_agent:cp_data -> router_002:sink_data
	wire          sgdma_m_write_agent_cp_ready;                                              // router_002:sink_ready -> sgdma_m_write_agent:cp_ready
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> cmd_demux_002:sink_valid
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire  [150:0] router_002_src_data;                                                       // router_002:src_data -> cmd_demux_002:sink_data
	wire   [14:0] router_002_src_channel;                                                    // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_ready;                                                      // cmd_demux_002:sink_ready -> router_002:src_ready
	wire          sgdma_descriptor_read_agent_cp_endofpacket;                                // sgdma_descriptor_read_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          sgdma_descriptor_read_agent_cp_valid;                                      // sgdma_descriptor_read_agent:cp_valid -> router_003:sink_valid
	wire          sgdma_descriptor_read_agent_cp_startofpacket;                              // sgdma_descriptor_read_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire  [114:0] sgdma_descriptor_read_agent_cp_data;                                       // sgdma_descriptor_read_agent:cp_data -> router_003:sink_data
	wire          sgdma_descriptor_read_agent_cp_ready;                                      // router_003:sink_ready -> sgdma_descriptor_read_agent:cp_ready
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> cmd_demux_003:sink_valid
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire  [114:0] router_003_src_data;                                                       // router_003:src_data -> cmd_demux_003:sink_data
	wire   [14:0] router_003_src_channel;                                                    // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_ready;                                                      // cmd_demux_003:sink_ready -> router_003:src_ready
	wire          sgdma_descriptor_write_agent_cp_endofpacket;                               // sgdma_descriptor_write_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          sgdma_descriptor_write_agent_cp_valid;                                     // sgdma_descriptor_write_agent:cp_valid -> router_004:sink_valid
	wire          sgdma_descriptor_write_agent_cp_startofpacket;                             // sgdma_descriptor_write_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire  [114:0] sgdma_descriptor_write_agent_cp_data;                                      // sgdma_descriptor_write_agent:cp_data -> router_004:sink_data
	wire          sgdma_descriptor_write_agent_cp_ready;                                     // router_004:sink_ready -> sgdma_descriptor_write_agent:cp_ready
	wire          router_004_src_endofpacket;                                                // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          router_004_src_valid;                                                      // router_004:src_valid -> cmd_demux_004:sink_valid
	wire          router_004_src_startofpacket;                                              // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire  [114:0] router_004_src_data;                                                       // router_004:src_data -> cmd_demux_004:sink_data
	wire   [14:0] router_004_src_channel;                                                    // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_ready;                                                      // cmd_demux_004:sink_ready -> router_004:src_ready
	wire          fir_memory_s1_agent_rp_endofpacket;                                        // fir_memory_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          fir_memory_s1_agent_rp_valid;                                              // fir_memory_s1_agent:rp_valid -> router_005:sink_valid
	wire          fir_memory_s1_agent_rp_startofpacket;                                      // fir_memory_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [114:0] fir_memory_s1_agent_rp_data;                                               // fir_memory_s1_agent:rp_data -> router_005:sink_data
	wire          fir_memory_s1_agent_rp_ready;                                              // router_005:sink_ready -> fir_memory_s1_agent:rp_ready
	wire          router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux:sink_valid
	wire          router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [114:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux:sink_data
	wire   [14:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_ready;                                                      // rsp_demux:sink_ready -> router_005:src_ready
	wire          led_s1_agent_rp_endofpacket;                                               // led_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                     // led_s1_agent:rp_valid -> router_006:sink_valid
	wire          led_s1_agent_rp_startofpacket;                                             // led_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [114:0] led_s1_agent_rp_data;                                                      // led_s1_agent:rp_data -> router_006:sink_data
	wire          led_s1_agent_rp_ready;                                                     // router_006:sink_ready -> led_s1_agent:rp_ready
	wire          router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_001:sink_valid
	wire          router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [114:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_001:sink_data
	wire   [14:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_ready;                                                      // rsp_demux_001:sink_ready -> router_006:src_ready
	wire          button_s1_agent_rp_endofpacket;                                            // button_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          button_s1_agent_rp_valid;                                                  // button_s1_agent:rp_valid -> router_007:sink_valid
	wire          button_s1_agent_rp_startofpacket;                                          // button_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [114:0] button_s1_agent_rp_data;                                                   // button_s1_agent:rp_data -> router_007:sink_data
	wire          button_s1_agent_rp_ready;                                                  // router_007:sink_ready -> button_s1_agent:rp_ready
	wire          router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_002:sink_valid
	wire          router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [114:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_002:sink_data
	wire   [14:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_ready;                                                      // rsp_demux_002:sink_ready -> router_007:src_ready
	wire          fifo_memory_in_csr_agent_rp_endofpacket;                                   // fifo_memory_in_csr_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          fifo_memory_in_csr_agent_rp_valid;                                         // fifo_memory_in_csr_agent:rp_valid -> router_008:sink_valid
	wire          fifo_memory_in_csr_agent_rp_startofpacket;                                 // fifo_memory_in_csr_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [114:0] fifo_memory_in_csr_agent_rp_data;                                          // fifo_memory_in_csr_agent:rp_data -> router_008:sink_data
	wire          fifo_memory_in_csr_agent_rp_ready;                                         // router_008:sink_ready -> fifo_memory_in_csr_agent:rp_ready
	wire          router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_003:sink_valid
	wire          router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [114:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_003:sink_data
	wire   [14:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_ready;                                                      // rsp_demux_003:sink_ready -> router_008:src_ready
	wire          fifo_memory_in_agent_rp_endofpacket;                                       // fifo_memory_in_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          fifo_memory_in_agent_rp_valid;                                             // fifo_memory_in_agent:rp_valid -> router_009:sink_valid
	wire          fifo_memory_in_agent_rp_startofpacket;                                     // fifo_memory_in_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [150:0] fifo_memory_in_agent_rp_data;                                              // fifo_memory_in_agent:rp_data -> router_009:sink_data
	wire          fifo_memory_in_agent_rp_ready;                                             // router_009:sink_ready -> fifo_memory_in_agent:rp_ready
	wire          router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_004:sink_valid
	wire          router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [150:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_004:sink_data
	wire   [14:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_ready;                                                      // rsp_demux_004:sink_ready -> router_009:src_ready
	wire          fifo_memory_out_agent_rp_endofpacket;                                      // fifo_memory_out_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          fifo_memory_out_agent_rp_valid;                                            // fifo_memory_out_agent:rp_valid -> router_010:sink_valid
	wire          fifo_memory_out_agent_rp_startofpacket;                                    // fifo_memory_out_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [150:0] fifo_memory_out_agent_rp_data;                                             // fifo_memory_out_agent:rp_data -> router_010:sink_data
	wire          fifo_memory_out_agent_rp_ready;                                            // router_010:sink_ready -> fifo_memory_out_agent:rp_ready
	wire          router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_005:sink_valid
	wire          router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [150:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_005:sink_data
	wire   [14:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_ready;                                                      // rsp_demux_005:sink_ready -> router_010:src_ready
	wire          interpo_4_0_s1_agent_rp_endofpacket;                                       // Interpo_4_0_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          interpo_4_0_s1_agent_rp_valid;                                             // Interpo_4_0_s1_agent:rp_valid -> router_011:sink_valid
	wire          interpo_4_0_s1_agent_rp_startofpacket;                                     // Interpo_4_0_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [114:0] interpo_4_0_s1_agent_rp_data;                                              // Interpo_4_0_s1_agent:rp_data -> router_011:sink_data
	wire          interpo_4_0_s1_agent_rp_ready;                                             // router_011:sink_ready -> Interpo_4_0_s1_agent:rp_ready
	wire          router_011_src_endofpacket;                                                // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_011_src_valid;                                                      // router_011:src_valid -> rsp_demux_006:sink_valid
	wire          router_011_src_startofpacket;                                              // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [114:0] router_011_src_data;                                                       // router_011:src_data -> rsp_demux_006:sink_data
	wire   [14:0] router_011_src_channel;                                                    // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_ready;                                                      // rsp_demux_006:sink_ready -> router_011:src_ready
	wire          interpo_5_0_s1_agent_rp_endofpacket;                                       // Interpo_5_0_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          interpo_5_0_s1_agent_rp_valid;                                             // Interpo_5_0_s1_agent:rp_valid -> router_012:sink_valid
	wire          interpo_5_0_s1_agent_rp_startofpacket;                                     // Interpo_5_0_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire  [114:0] interpo_5_0_s1_agent_rp_data;                                              // Interpo_5_0_s1_agent:rp_data -> router_012:sink_data
	wire          interpo_5_0_s1_agent_rp_ready;                                             // router_012:sink_ready -> Interpo_5_0_s1_agent:rp_ready
	wire          router_012_src_endofpacket;                                                // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_012_src_valid;                                                      // router_012:src_valid -> rsp_demux_007:sink_valid
	wire          router_012_src_startofpacket;                                              // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [114:0] router_012_src_data;                                                       // router_012:src_data -> rsp_demux_007:sink_data
	wire   [14:0] router_012_src_channel;                                                    // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_ready;                                                      // rsp_demux_007:sink_ready -> router_012:src_ready
	wire          interpo_5_1_s1_agent_rp_endofpacket;                                       // Interpo_5_1_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          interpo_5_1_s1_agent_rp_valid;                                             // Interpo_5_1_s1_agent:rp_valid -> router_013:sink_valid
	wire          interpo_5_1_s1_agent_rp_startofpacket;                                     // Interpo_5_1_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire  [114:0] interpo_5_1_s1_agent_rp_data;                                              // Interpo_5_1_s1_agent:rp_data -> router_013:sink_data
	wire          interpo_5_1_s1_agent_rp_ready;                                             // router_013:sink_ready -> Interpo_5_1_s1_agent:rp_ready
	wire          router_013_src_endofpacket;                                                // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_013_src_valid;                                                      // router_013:src_valid -> rsp_demux_008:sink_valid
	wire          router_013_src_startofpacket;                                              // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [114:0] router_013_src_data;                                                       // router_013:src_data -> rsp_demux_008:sink_data
	wire   [14:0] router_013_src_channel;                                                    // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_ready;                                                      // rsp_demux_008:sink_ready -> router_013:src_ready
	wire          interpo_5_2_s1_agent_rp_endofpacket;                                       // Interpo_5_2_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          interpo_5_2_s1_agent_rp_valid;                                             // Interpo_5_2_s1_agent:rp_valid -> router_014:sink_valid
	wire          interpo_5_2_s1_agent_rp_startofpacket;                                     // Interpo_5_2_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire  [114:0] interpo_5_2_s1_agent_rp_data;                                              // Interpo_5_2_s1_agent:rp_data -> router_014:sink_data
	wire          interpo_5_2_s1_agent_rp_ready;                                             // router_014:sink_ready -> Interpo_5_2_s1_agent:rp_ready
	wire          router_014_src_endofpacket;                                                // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_014_src_valid;                                                      // router_014:src_valid -> rsp_demux_009:sink_valid
	wire          router_014_src_startofpacket;                                              // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [114:0] router_014_src_data;                                                       // router_014:src_data -> rsp_demux_009:sink_data
	wire   [14:0] router_014_src_channel;                                                    // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_ready;                                                      // rsp_demux_009:sink_ready -> router_014:src_ready
	wire          interpo_5_3_s1_agent_rp_endofpacket;                                       // Interpo_5_3_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          interpo_5_3_s1_agent_rp_valid;                                             // Interpo_5_3_s1_agent:rp_valid -> router_015:sink_valid
	wire          interpo_5_3_s1_agent_rp_startofpacket;                                     // Interpo_5_3_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire  [114:0] interpo_5_3_s1_agent_rp_data;                                              // Interpo_5_3_s1_agent:rp_data -> router_015:sink_data
	wire          interpo_5_3_s1_agent_rp_ready;                                             // router_015:sink_ready -> Interpo_5_3_s1_agent:rp_ready
	wire          router_015_src_endofpacket;                                                // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_015_src_valid;                                                      // router_015:src_valid -> rsp_demux_010:sink_valid
	wire          router_015_src_startofpacket;                                              // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire  [114:0] router_015_src_data;                                                       // router_015:src_data -> rsp_demux_010:sink_data
	wire   [14:0] router_015_src_channel;                                                    // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_ready;                                                      // rsp_demux_010:sink_ready -> router_015:src_ready
	wire          adapt_fir_mem_s1_agent_rp_endofpacket;                                     // Adapt_FIR_mem_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          adapt_fir_mem_s1_agent_rp_valid;                                           // Adapt_FIR_mem_s1_agent:rp_valid -> router_016:sink_valid
	wire          adapt_fir_mem_s1_agent_rp_startofpacket;                                   // Adapt_FIR_mem_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire  [114:0] adapt_fir_mem_s1_agent_rp_data;                                            // Adapt_FIR_mem_s1_agent:rp_data -> router_016:sink_data
	wire          adapt_fir_mem_s1_agent_rp_ready;                                           // router_016:sink_ready -> Adapt_FIR_mem_s1_agent:rp_ready
	wire          router_016_src_endofpacket;                                                // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_016_src_valid;                                                      // router_016:src_valid -> rsp_demux_011:sink_valid
	wire          router_016_src_startofpacket;                                              // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire  [114:0] router_016_src_data;                                                       // router_016:src_data -> rsp_demux_011:sink_data
	wire   [14:0] router_016_src_channel;                                                    // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_ready;                                                      // rsp_demux_011:sink_ready -> router_016:src_ready
	wire          micfilter_cntl_s1_agent_rp_endofpacket;                                    // micFilter_cntl_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          micfilter_cntl_s1_agent_rp_valid;                                          // micFilter_cntl_s1_agent:rp_valid -> router_017:sink_valid
	wire          micfilter_cntl_s1_agent_rp_startofpacket;                                  // micFilter_cntl_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire  [114:0] micfilter_cntl_s1_agent_rp_data;                                           // micFilter_cntl_s1_agent:rp_data -> router_017:sink_data
	wire          micfilter_cntl_s1_agent_rp_ready;                                          // router_017:sink_ready -> micFilter_cntl_s1_agent:rp_ready
	wire          router_017_src_endofpacket;                                                // router_017:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_017_src_valid;                                                      // router_017:src_valid -> rsp_demux_012:sink_valid
	wire          router_017_src_startofpacket;                                              // router_017:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire  [114:0] router_017_src_data;                                                       // router_017:src_data -> rsp_demux_012:sink_data
	wire   [14:0] router_017_src_channel;                                                    // router_017:src_channel -> rsp_demux_012:sink_channel
	wire          router_017_src_ready;                                                      // rsp_demux_012:sink_ready -> router_017:src_ready
	wire          micfilter_rst_s1_agent_rp_endofpacket;                                     // micFilter_rst_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          micfilter_rst_s1_agent_rp_valid;                                           // micFilter_rst_s1_agent:rp_valid -> router_018:sink_valid
	wire          micfilter_rst_s1_agent_rp_startofpacket;                                   // micFilter_rst_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire  [114:0] micfilter_rst_s1_agent_rp_data;                                            // micFilter_rst_s1_agent:rp_data -> router_018:sink_data
	wire          micfilter_rst_s1_agent_rp_ready;                                           // router_018:sink_ready -> micFilter_rst_s1_agent:rp_ready
	wire          router_018_src_endofpacket;                                                // router_018:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_018_src_valid;                                                      // router_018:src_valid -> rsp_demux_013:sink_valid
	wire          router_018_src_startofpacket;                                              // router_018:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire  [114:0] router_018_src_data;                                                       // router_018:src_data -> rsp_demux_013:sink_data
	wire   [14:0] router_018_src_channel;                                                    // router_018:src_channel -> rsp_demux_013:sink_channel
	wire          router_018_src_ready;                                                      // rsp_demux_013:sink_ready -> router_018:src_ready
	wire          pcie_ip_txs_agent_rp_endofpacket;                                          // pcie_ip_txs_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          pcie_ip_txs_agent_rp_valid;                                                // pcie_ip_txs_agent:rp_valid -> router_019:sink_valid
	wire          pcie_ip_txs_agent_rp_startofpacket;                                        // pcie_ip_txs_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire  [150:0] pcie_ip_txs_agent_rp_data;                                                 // pcie_ip_txs_agent:rp_data -> router_019:sink_data
	wire          pcie_ip_txs_agent_rp_ready;                                                // router_019:sink_ready -> pcie_ip_txs_agent:rp_ready
	wire          router_019_src_endofpacket;                                                // router_019:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_019_src_valid;                                                      // router_019:src_valid -> rsp_demux_014:sink_valid
	wire          router_019_src_startofpacket;                                              // router_019:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire  [150:0] router_019_src_data;                                                       // router_019:src_data -> rsp_demux_014:sink_data
	wire   [14:0] router_019_src_channel;                                                    // router_019:src_channel -> rsp_demux_014:sink_channel
	wire          router_019_src_ready;                                                      // rsp_demux_014:sink_ready -> router_019:src_ready
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> pcie_ip_bar1_0_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> pcie_ip_bar1_0_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> pcie_ip_bar1_0_limiter:cmd_sink_startofpacket
	wire  [150:0] router_src_data;                                                           // router:src_data -> pcie_ip_bar1_0_limiter:cmd_sink_data
	wire   [14:0] router_src_channel;                                                        // router:src_channel -> pcie_ip_bar1_0_limiter:cmd_sink_channel
	wire          router_src_ready;                                                          // pcie_ip_bar1_0_limiter:cmd_sink_ready -> router:src_ready
	wire          pcie_ip_bar1_0_limiter_cmd_src_endofpacket;                                // pcie_ip_bar1_0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          pcie_ip_bar1_0_limiter_cmd_src_startofpacket;                              // pcie_ip_bar1_0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [150:0] pcie_ip_bar1_0_limiter_cmd_src_data;                                       // pcie_ip_bar1_0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire   [14:0] pcie_ip_bar1_0_limiter_cmd_src_channel;                                    // pcie_ip_bar1_0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          pcie_ip_bar1_0_limiter_cmd_src_ready;                                      // cmd_demux:sink_ready -> pcie_ip_bar1_0_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> pcie_ip_bar1_0_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> pcie_ip_bar1_0_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> pcie_ip_bar1_0_limiter:rsp_sink_startofpacket
	wire  [150:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> pcie_ip_bar1_0_limiter:rsp_sink_data
	wire   [14:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> pcie_ip_bar1_0_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                         // pcie_ip_bar1_0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          pcie_ip_bar1_0_limiter_rsp_src_endofpacket;                                // pcie_ip_bar1_0_limiter:rsp_src_endofpacket -> pcie_ip_bar1_0_agent:rp_endofpacket
	wire          pcie_ip_bar1_0_limiter_rsp_src_valid;                                      // pcie_ip_bar1_0_limiter:rsp_src_valid -> pcie_ip_bar1_0_agent:rp_valid
	wire          pcie_ip_bar1_0_limiter_rsp_src_startofpacket;                              // pcie_ip_bar1_0_limiter:rsp_src_startofpacket -> pcie_ip_bar1_0_agent:rp_startofpacket
	wire  [150:0] pcie_ip_bar1_0_limiter_rsp_src_data;                                       // pcie_ip_bar1_0_limiter:rsp_src_data -> pcie_ip_bar1_0_agent:rp_data
	wire   [14:0] pcie_ip_bar1_0_limiter_rsp_src_channel;                                    // pcie_ip_bar1_0_limiter:rsp_src_channel -> pcie_ip_bar1_0_agent:rp_channel
	wire          pcie_ip_bar1_0_limiter_rsp_src_ready;                                      // pcie_ip_bar1_0_agent:rp_ready -> pcie_ip_bar1_0_limiter:rsp_src_ready
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> sgdma_m_read_limiter:cmd_sink_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> sgdma_m_read_limiter:cmd_sink_valid
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> sgdma_m_read_limiter:cmd_sink_startofpacket
	wire  [150:0] router_001_src_data;                                                       // router_001:src_data -> sgdma_m_read_limiter:cmd_sink_data
	wire   [14:0] router_001_src_channel;                                                    // router_001:src_channel -> sgdma_m_read_limiter:cmd_sink_channel
	wire          router_001_src_ready;                                                      // sgdma_m_read_limiter:cmd_sink_ready -> router_001:src_ready
	wire          sgdma_m_read_limiter_cmd_src_endofpacket;                                  // sgdma_m_read_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          sgdma_m_read_limiter_cmd_src_startofpacket;                                // sgdma_m_read_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [150:0] sgdma_m_read_limiter_cmd_src_data;                                         // sgdma_m_read_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire   [14:0] sgdma_m_read_limiter_cmd_src_channel;                                      // sgdma_m_read_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          sgdma_m_read_limiter_cmd_src_ready;                                        // cmd_demux_001:sink_ready -> sgdma_m_read_limiter:cmd_src_ready
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> sgdma_m_read_limiter:rsp_sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> sgdma_m_read_limiter:rsp_sink_valid
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> sgdma_m_read_limiter:rsp_sink_startofpacket
	wire  [150:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> sgdma_m_read_limiter:rsp_sink_data
	wire   [14:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> sgdma_m_read_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_ready;                                                     // sgdma_m_read_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire          sgdma_m_read_limiter_rsp_src_endofpacket;                                  // sgdma_m_read_limiter:rsp_src_endofpacket -> sgdma_m_read_agent:rp_endofpacket
	wire          sgdma_m_read_limiter_rsp_src_valid;                                        // sgdma_m_read_limiter:rsp_src_valid -> sgdma_m_read_agent:rp_valid
	wire          sgdma_m_read_limiter_rsp_src_startofpacket;                                // sgdma_m_read_limiter:rsp_src_startofpacket -> sgdma_m_read_agent:rp_startofpacket
	wire  [150:0] sgdma_m_read_limiter_rsp_src_data;                                         // sgdma_m_read_limiter:rsp_src_data -> sgdma_m_read_agent:rp_data
	wire   [14:0] sgdma_m_read_limiter_rsp_src_channel;                                      // sgdma_m_read_limiter:rsp_src_channel -> sgdma_m_read_agent:rp_channel
	wire          sgdma_m_read_limiter_rsp_src_ready;                                        // sgdma_m_read_agent:rp_ready -> sgdma_m_read_limiter:rsp_src_ready
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> fir_memory_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> fir_memory_s1_burst_adapter:sink0_valid
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> fir_memory_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> fir_memory_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> fir_memory_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_ready;                                                         // fir_memory_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire          fir_memory_s1_burst_adapter_source0_endofpacket;                           // fir_memory_s1_burst_adapter:source0_endofpacket -> fir_memory_s1_agent:cp_endofpacket
	wire          fir_memory_s1_burst_adapter_source0_valid;                                 // fir_memory_s1_burst_adapter:source0_valid -> fir_memory_s1_agent:cp_valid
	wire          fir_memory_s1_burst_adapter_source0_startofpacket;                         // fir_memory_s1_burst_adapter:source0_startofpacket -> fir_memory_s1_agent:cp_startofpacket
	wire  [114:0] fir_memory_s1_burst_adapter_source0_data;                                  // fir_memory_s1_burst_adapter:source0_data -> fir_memory_s1_agent:cp_data
	wire          fir_memory_s1_burst_adapter_source0_ready;                                 // fir_memory_s1_agent:cp_ready -> fir_memory_s1_burst_adapter:source0_ready
	wire   [14:0] fir_memory_s1_burst_adapter_source0_channel;                               // fir_memory_s1_burst_adapter:source0_channel -> fir_memory_s1_agent:cp_channel
	wire          cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> led_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> led_s1_burst_adapter:sink0_valid
	wire          cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> led_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> led_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> led_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_ready;                                                     // led_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire          led_s1_burst_adapter_source0_endofpacket;                                  // led_s1_burst_adapter:source0_endofpacket -> led_s1_agent:cp_endofpacket
	wire          led_s1_burst_adapter_source0_valid;                                        // led_s1_burst_adapter:source0_valid -> led_s1_agent:cp_valid
	wire          led_s1_burst_adapter_source0_startofpacket;                                // led_s1_burst_adapter:source0_startofpacket -> led_s1_agent:cp_startofpacket
	wire  [114:0] led_s1_burst_adapter_source0_data;                                         // led_s1_burst_adapter:source0_data -> led_s1_agent:cp_data
	wire          led_s1_burst_adapter_source0_ready;                                        // led_s1_agent:cp_ready -> led_s1_burst_adapter:source0_ready
	wire   [14:0] led_s1_burst_adapter_source0_channel;                                      // led_s1_burst_adapter:source0_channel -> led_s1_agent:cp_channel
	wire          cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> button_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> button_s1_burst_adapter:sink0_valid
	wire          cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> button_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> button_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> button_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_ready;                                                     // button_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire          button_s1_burst_adapter_source0_endofpacket;                               // button_s1_burst_adapter:source0_endofpacket -> button_s1_agent:cp_endofpacket
	wire          button_s1_burst_adapter_source0_valid;                                     // button_s1_burst_adapter:source0_valid -> button_s1_agent:cp_valid
	wire          button_s1_burst_adapter_source0_startofpacket;                             // button_s1_burst_adapter:source0_startofpacket -> button_s1_agent:cp_startofpacket
	wire  [114:0] button_s1_burst_adapter_source0_data;                                      // button_s1_burst_adapter:source0_data -> button_s1_agent:cp_data
	wire          button_s1_burst_adapter_source0_ready;                                     // button_s1_agent:cp_ready -> button_s1_burst_adapter:source0_ready
	wire   [14:0] button_s1_burst_adapter_source0_channel;                                   // button_s1_burst_adapter:source0_channel -> button_s1_agent:cp_channel
	wire          cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> fifo_memory_in_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> fifo_memory_in_csr_burst_adapter:sink0_valid
	wire          cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> fifo_memory_in_csr_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> fifo_memory_in_csr_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> fifo_memory_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_ready;                                                     // fifo_memory_in_csr_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire          fifo_memory_in_csr_burst_adapter_source0_endofpacket;                      // fifo_memory_in_csr_burst_adapter:source0_endofpacket -> fifo_memory_in_csr_agent:cp_endofpacket
	wire          fifo_memory_in_csr_burst_adapter_source0_valid;                            // fifo_memory_in_csr_burst_adapter:source0_valid -> fifo_memory_in_csr_agent:cp_valid
	wire          fifo_memory_in_csr_burst_adapter_source0_startofpacket;                    // fifo_memory_in_csr_burst_adapter:source0_startofpacket -> fifo_memory_in_csr_agent:cp_startofpacket
	wire  [114:0] fifo_memory_in_csr_burst_adapter_source0_data;                             // fifo_memory_in_csr_burst_adapter:source0_data -> fifo_memory_in_csr_agent:cp_data
	wire          fifo_memory_in_csr_burst_adapter_source0_ready;                            // fifo_memory_in_csr_agent:cp_ready -> fifo_memory_in_csr_burst_adapter:source0_ready
	wire   [14:0] fifo_memory_in_csr_burst_adapter_source0_channel;                          // fifo_memory_in_csr_burst_adapter:source0_channel -> fifo_memory_in_csr_agent:cp_channel
	wire          cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> fifo_memory_in_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> fifo_memory_in_burst_adapter:sink0_valid
	wire          cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> fifo_memory_in_burst_adapter:sink0_startofpacket
	wire  [150:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> fifo_memory_in_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> fifo_memory_in_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_ready;                                                     // fifo_memory_in_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire          fifo_memory_in_burst_adapter_source0_endofpacket;                          // fifo_memory_in_burst_adapter:source0_endofpacket -> fifo_memory_in_agent:cp_endofpacket
	wire          fifo_memory_in_burst_adapter_source0_valid;                                // fifo_memory_in_burst_adapter:source0_valid -> fifo_memory_in_agent:cp_valid
	wire          fifo_memory_in_burst_adapter_source0_startofpacket;                        // fifo_memory_in_burst_adapter:source0_startofpacket -> fifo_memory_in_agent:cp_startofpacket
	wire  [150:0] fifo_memory_in_burst_adapter_source0_data;                                 // fifo_memory_in_burst_adapter:source0_data -> fifo_memory_in_agent:cp_data
	wire          fifo_memory_in_burst_adapter_source0_ready;                                // fifo_memory_in_agent:cp_ready -> fifo_memory_in_burst_adapter:source0_ready
	wire   [14:0] fifo_memory_in_burst_adapter_source0_channel;                              // fifo_memory_in_burst_adapter:source0_channel -> fifo_memory_in_agent:cp_channel
	wire          cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> fifo_memory_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> fifo_memory_out_burst_adapter:sink0_valid
	wire          cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> fifo_memory_out_burst_adapter:sink0_startofpacket
	wire  [150:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> fifo_memory_out_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> fifo_memory_out_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_ready;                                                     // fifo_memory_out_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire          fifo_memory_out_burst_adapter_source0_endofpacket;                         // fifo_memory_out_burst_adapter:source0_endofpacket -> fifo_memory_out_agent:cp_endofpacket
	wire          fifo_memory_out_burst_adapter_source0_valid;                               // fifo_memory_out_burst_adapter:source0_valid -> fifo_memory_out_agent:cp_valid
	wire          fifo_memory_out_burst_adapter_source0_startofpacket;                       // fifo_memory_out_burst_adapter:source0_startofpacket -> fifo_memory_out_agent:cp_startofpacket
	wire  [150:0] fifo_memory_out_burst_adapter_source0_data;                                // fifo_memory_out_burst_adapter:source0_data -> fifo_memory_out_agent:cp_data
	wire          fifo_memory_out_burst_adapter_source0_ready;                               // fifo_memory_out_agent:cp_ready -> fifo_memory_out_burst_adapter:source0_ready
	wire   [14:0] fifo_memory_out_burst_adapter_source0_channel;                             // fifo_memory_out_burst_adapter:source0_channel -> fifo_memory_out_agent:cp_channel
	wire          cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> Interpo_4_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> Interpo_4_0_s1_burst_adapter:sink0_valid
	wire          cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> Interpo_4_0_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> Interpo_4_0_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> Interpo_4_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_ready;                                                     // Interpo_4_0_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire          interpo_4_0_s1_burst_adapter_source0_endofpacket;                          // Interpo_4_0_s1_burst_adapter:source0_endofpacket -> Interpo_4_0_s1_agent:cp_endofpacket
	wire          interpo_4_0_s1_burst_adapter_source0_valid;                                // Interpo_4_0_s1_burst_adapter:source0_valid -> Interpo_4_0_s1_agent:cp_valid
	wire          interpo_4_0_s1_burst_adapter_source0_startofpacket;                        // Interpo_4_0_s1_burst_adapter:source0_startofpacket -> Interpo_4_0_s1_agent:cp_startofpacket
	wire  [114:0] interpo_4_0_s1_burst_adapter_source0_data;                                 // Interpo_4_0_s1_burst_adapter:source0_data -> Interpo_4_0_s1_agent:cp_data
	wire          interpo_4_0_s1_burst_adapter_source0_ready;                                // Interpo_4_0_s1_agent:cp_ready -> Interpo_4_0_s1_burst_adapter:source0_ready
	wire   [14:0] interpo_4_0_s1_burst_adapter_source0_channel;                              // Interpo_4_0_s1_burst_adapter:source0_channel -> Interpo_4_0_s1_agent:cp_channel
	wire          cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> Interpo_5_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> Interpo_5_0_s1_burst_adapter:sink0_valid
	wire          cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> Interpo_5_0_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> Interpo_5_0_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> Interpo_5_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_ready;                                                     // Interpo_5_0_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire          interpo_5_0_s1_burst_adapter_source0_endofpacket;                          // Interpo_5_0_s1_burst_adapter:source0_endofpacket -> Interpo_5_0_s1_agent:cp_endofpacket
	wire          interpo_5_0_s1_burst_adapter_source0_valid;                                // Interpo_5_0_s1_burst_adapter:source0_valid -> Interpo_5_0_s1_agent:cp_valid
	wire          interpo_5_0_s1_burst_adapter_source0_startofpacket;                        // Interpo_5_0_s1_burst_adapter:source0_startofpacket -> Interpo_5_0_s1_agent:cp_startofpacket
	wire  [114:0] interpo_5_0_s1_burst_adapter_source0_data;                                 // Interpo_5_0_s1_burst_adapter:source0_data -> Interpo_5_0_s1_agent:cp_data
	wire          interpo_5_0_s1_burst_adapter_source0_ready;                                // Interpo_5_0_s1_agent:cp_ready -> Interpo_5_0_s1_burst_adapter:source0_ready
	wire   [14:0] interpo_5_0_s1_burst_adapter_source0_channel;                              // Interpo_5_0_s1_burst_adapter:source0_channel -> Interpo_5_0_s1_agent:cp_channel
	wire          cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> Interpo_5_1_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> Interpo_5_1_s1_burst_adapter:sink0_valid
	wire          cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> Interpo_5_1_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> Interpo_5_1_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> Interpo_5_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_ready;                                                     // Interpo_5_1_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire          interpo_5_1_s1_burst_adapter_source0_endofpacket;                          // Interpo_5_1_s1_burst_adapter:source0_endofpacket -> Interpo_5_1_s1_agent:cp_endofpacket
	wire          interpo_5_1_s1_burst_adapter_source0_valid;                                // Interpo_5_1_s1_burst_adapter:source0_valid -> Interpo_5_1_s1_agent:cp_valid
	wire          interpo_5_1_s1_burst_adapter_source0_startofpacket;                        // Interpo_5_1_s1_burst_adapter:source0_startofpacket -> Interpo_5_1_s1_agent:cp_startofpacket
	wire  [114:0] interpo_5_1_s1_burst_adapter_source0_data;                                 // Interpo_5_1_s1_burst_adapter:source0_data -> Interpo_5_1_s1_agent:cp_data
	wire          interpo_5_1_s1_burst_adapter_source0_ready;                                // Interpo_5_1_s1_agent:cp_ready -> Interpo_5_1_s1_burst_adapter:source0_ready
	wire   [14:0] interpo_5_1_s1_burst_adapter_source0_channel;                              // Interpo_5_1_s1_burst_adapter:source0_channel -> Interpo_5_1_s1_agent:cp_channel
	wire          cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> Interpo_5_2_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> Interpo_5_2_s1_burst_adapter:sink0_valid
	wire          cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> Interpo_5_2_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> Interpo_5_2_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> Interpo_5_2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_ready;                                                     // Interpo_5_2_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire          interpo_5_2_s1_burst_adapter_source0_endofpacket;                          // Interpo_5_2_s1_burst_adapter:source0_endofpacket -> Interpo_5_2_s1_agent:cp_endofpacket
	wire          interpo_5_2_s1_burst_adapter_source0_valid;                                // Interpo_5_2_s1_burst_adapter:source0_valid -> Interpo_5_2_s1_agent:cp_valid
	wire          interpo_5_2_s1_burst_adapter_source0_startofpacket;                        // Interpo_5_2_s1_burst_adapter:source0_startofpacket -> Interpo_5_2_s1_agent:cp_startofpacket
	wire  [114:0] interpo_5_2_s1_burst_adapter_source0_data;                                 // Interpo_5_2_s1_burst_adapter:source0_data -> Interpo_5_2_s1_agent:cp_data
	wire          interpo_5_2_s1_burst_adapter_source0_ready;                                // Interpo_5_2_s1_agent:cp_ready -> Interpo_5_2_s1_burst_adapter:source0_ready
	wire   [14:0] interpo_5_2_s1_burst_adapter_source0_channel;                              // Interpo_5_2_s1_burst_adapter:source0_channel -> Interpo_5_2_s1_agent:cp_channel
	wire          cmd_mux_010_src_endofpacket;                                               // cmd_mux_010:src_endofpacket -> Interpo_5_3_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                                     // cmd_mux_010:src_valid -> Interpo_5_3_s1_burst_adapter:sink0_valid
	wire          cmd_mux_010_src_startofpacket;                                             // cmd_mux_010:src_startofpacket -> Interpo_5_3_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_010_src_data;                                                      // cmd_mux_010:src_data -> Interpo_5_3_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_010_src_channel;                                                   // cmd_mux_010:src_channel -> Interpo_5_3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_ready;                                                     // Interpo_5_3_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire          interpo_5_3_s1_burst_adapter_source0_endofpacket;                          // Interpo_5_3_s1_burst_adapter:source0_endofpacket -> Interpo_5_3_s1_agent:cp_endofpacket
	wire          interpo_5_3_s1_burst_adapter_source0_valid;                                // Interpo_5_3_s1_burst_adapter:source0_valid -> Interpo_5_3_s1_agent:cp_valid
	wire          interpo_5_3_s1_burst_adapter_source0_startofpacket;                        // Interpo_5_3_s1_burst_adapter:source0_startofpacket -> Interpo_5_3_s1_agent:cp_startofpacket
	wire  [114:0] interpo_5_3_s1_burst_adapter_source0_data;                                 // Interpo_5_3_s1_burst_adapter:source0_data -> Interpo_5_3_s1_agent:cp_data
	wire          interpo_5_3_s1_burst_adapter_source0_ready;                                // Interpo_5_3_s1_agent:cp_ready -> Interpo_5_3_s1_burst_adapter:source0_ready
	wire   [14:0] interpo_5_3_s1_burst_adapter_source0_channel;                              // Interpo_5_3_s1_burst_adapter:source0_channel -> Interpo_5_3_s1_agent:cp_channel
	wire          cmd_mux_011_src_endofpacket;                                               // cmd_mux_011:src_endofpacket -> Adapt_FIR_mem_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                                     // cmd_mux_011:src_valid -> Adapt_FIR_mem_s1_burst_adapter:sink0_valid
	wire          cmd_mux_011_src_startofpacket;                                             // cmd_mux_011:src_startofpacket -> Adapt_FIR_mem_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_011_src_data;                                                      // cmd_mux_011:src_data -> Adapt_FIR_mem_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_011_src_channel;                                                   // cmd_mux_011:src_channel -> Adapt_FIR_mem_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_ready;                                                     // Adapt_FIR_mem_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire          adapt_fir_mem_s1_burst_adapter_source0_endofpacket;                        // Adapt_FIR_mem_s1_burst_adapter:source0_endofpacket -> Adapt_FIR_mem_s1_agent:cp_endofpacket
	wire          adapt_fir_mem_s1_burst_adapter_source0_valid;                              // Adapt_FIR_mem_s1_burst_adapter:source0_valid -> Adapt_FIR_mem_s1_agent:cp_valid
	wire          adapt_fir_mem_s1_burst_adapter_source0_startofpacket;                      // Adapt_FIR_mem_s1_burst_adapter:source0_startofpacket -> Adapt_FIR_mem_s1_agent:cp_startofpacket
	wire  [114:0] adapt_fir_mem_s1_burst_adapter_source0_data;                               // Adapt_FIR_mem_s1_burst_adapter:source0_data -> Adapt_FIR_mem_s1_agent:cp_data
	wire          adapt_fir_mem_s1_burst_adapter_source0_ready;                              // Adapt_FIR_mem_s1_agent:cp_ready -> Adapt_FIR_mem_s1_burst_adapter:source0_ready
	wire   [14:0] adapt_fir_mem_s1_burst_adapter_source0_channel;                            // Adapt_FIR_mem_s1_burst_adapter:source0_channel -> Adapt_FIR_mem_s1_agent:cp_channel
	wire          cmd_mux_012_src_endofpacket;                                               // cmd_mux_012:src_endofpacket -> micFilter_cntl_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                                     // cmd_mux_012:src_valid -> micFilter_cntl_s1_burst_adapter:sink0_valid
	wire          cmd_mux_012_src_startofpacket;                                             // cmd_mux_012:src_startofpacket -> micFilter_cntl_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_012_src_data;                                                      // cmd_mux_012:src_data -> micFilter_cntl_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_012_src_channel;                                                   // cmd_mux_012:src_channel -> micFilter_cntl_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_ready;                                                     // micFilter_cntl_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire          micfilter_cntl_s1_burst_adapter_source0_endofpacket;                       // micFilter_cntl_s1_burst_adapter:source0_endofpacket -> micFilter_cntl_s1_agent:cp_endofpacket
	wire          micfilter_cntl_s1_burst_adapter_source0_valid;                             // micFilter_cntl_s1_burst_adapter:source0_valid -> micFilter_cntl_s1_agent:cp_valid
	wire          micfilter_cntl_s1_burst_adapter_source0_startofpacket;                     // micFilter_cntl_s1_burst_adapter:source0_startofpacket -> micFilter_cntl_s1_agent:cp_startofpacket
	wire  [114:0] micfilter_cntl_s1_burst_adapter_source0_data;                              // micFilter_cntl_s1_burst_adapter:source0_data -> micFilter_cntl_s1_agent:cp_data
	wire          micfilter_cntl_s1_burst_adapter_source0_ready;                             // micFilter_cntl_s1_agent:cp_ready -> micFilter_cntl_s1_burst_adapter:source0_ready
	wire   [14:0] micfilter_cntl_s1_burst_adapter_source0_channel;                           // micFilter_cntl_s1_burst_adapter:source0_channel -> micFilter_cntl_s1_agent:cp_channel
	wire          cmd_mux_013_src_endofpacket;                                               // cmd_mux_013:src_endofpacket -> micFilter_rst_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                                     // cmd_mux_013:src_valid -> micFilter_rst_s1_burst_adapter:sink0_valid
	wire          cmd_mux_013_src_startofpacket;                                             // cmd_mux_013:src_startofpacket -> micFilter_rst_s1_burst_adapter:sink0_startofpacket
	wire  [114:0] cmd_mux_013_src_data;                                                      // cmd_mux_013:src_data -> micFilter_rst_s1_burst_adapter:sink0_data
	wire   [14:0] cmd_mux_013_src_channel;                                                   // cmd_mux_013:src_channel -> micFilter_rst_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_ready;                                                     // micFilter_rst_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire          micfilter_rst_s1_burst_adapter_source0_endofpacket;                        // micFilter_rst_s1_burst_adapter:source0_endofpacket -> micFilter_rst_s1_agent:cp_endofpacket
	wire          micfilter_rst_s1_burst_adapter_source0_valid;                              // micFilter_rst_s1_burst_adapter:source0_valid -> micFilter_rst_s1_agent:cp_valid
	wire          micfilter_rst_s1_burst_adapter_source0_startofpacket;                      // micFilter_rst_s1_burst_adapter:source0_startofpacket -> micFilter_rst_s1_agent:cp_startofpacket
	wire  [114:0] micfilter_rst_s1_burst_adapter_source0_data;                               // micFilter_rst_s1_burst_adapter:source0_data -> micFilter_rst_s1_agent:cp_data
	wire          micfilter_rst_s1_burst_adapter_source0_ready;                              // micFilter_rst_s1_agent:cp_ready -> micFilter_rst_s1_burst_adapter:source0_ready
	wire   [14:0] micfilter_rst_s1_burst_adapter_source0_channel;                            // micFilter_rst_s1_burst_adapter:source0_channel -> micFilter_rst_s1_agent:cp_channel
	wire          cmd_demux_src4_endofpacket;                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_src4_startofpacket;                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [150:0] cmd_demux_src4_data;                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire   [14:0] cmd_demux_src4_channel;                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_ready;                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire          cmd_demux_src5_endofpacket;                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire          cmd_demux_src5_startofpacket;                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [150:0] cmd_demux_src5_data;                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire   [14:0] cmd_demux_src5_channel;                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_ready;                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire          cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> cmd_mux_005:sink1_valid
	wire          cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire  [150:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> cmd_mux_005:sink1_data
	wire   [14:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src1_ready;                                                  // cmd_mux_005:sink1_ready -> cmd_demux_001:src1_ready
	wire          cmd_demux_001_src8_endofpacket;                                            // cmd_demux_001:src8_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                  // cmd_demux_001:src8_valid -> cmd_mux_014:sink0_valid
	wire          cmd_demux_001_src8_startofpacket;                                          // cmd_demux_001:src8_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire  [150:0] cmd_demux_001_src8_data;                                                   // cmd_demux_001:src8_data -> cmd_mux_014:sink0_data
	wire   [14:0] cmd_demux_001_src8_channel;                                                // cmd_demux_001:src8_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_001_src8_ready;                                                  // cmd_mux_014:sink0_ready -> cmd_demux_001:src8_ready
	wire          cmd_demux_002_src1_endofpacket;                                            // cmd_demux_002:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                  // cmd_demux_002:src1_valid -> cmd_mux_004:sink1_valid
	wire          cmd_demux_002_src1_startofpacket;                                          // cmd_demux_002:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire  [150:0] cmd_demux_002_src1_data;                                                   // cmd_demux_002:src1_data -> cmd_mux_004:sink1_data
	wire   [14:0] cmd_demux_002_src1_channel;                                                // cmd_demux_002:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_002_src1_ready;                                                  // cmd_mux_004:sink1_ready -> cmd_demux_002:src1_ready
	wire          cmd_demux_002_src8_endofpacket;                                            // cmd_demux_002:src8_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_002_src8_valid;                                                  // cmd_demux_002:src8_valid -> cmd_mux_014:sink1_valid
	wire          cmd_demux_002_src8_startofpacket;                                          // cmd_demux_002:src8_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire  [150:0] cmd_demux_002_src8_data;                                                   // cmd_demux_002:src8_data -> cmd_mux_014:sink1_data
	wire   [14:0] cmd_demux_002_src8_channel;                                                // cmd_demux_002:src8_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_002_src8_ready;                                                  // cmd_mux_014:sink1_ready -> cmd_demux_002:src8_ready
	wire          rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [150:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire   [14:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_ready;                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_004_src1_endofpacket;                                            // rsp_demux_004:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_004_src1_valid;                                                  // rsp_demux_004:src1_valid -> rsp_mux_002:sink1_valid
	wire          rsp_demux_004_src1_startofpacket;                                          // rsp_demux_004:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire  [150:0] rsp_demux_004_src1_data;                                                   // rsp_demux_004:src1_data -> rsp_mux_002:sink1_data
	wire   [14:0] rsp_demux_004_src1_channel;                                                // rsp_demux_004:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_004_src1_ready;                                                  // rsp_mux_002:sink1_ready -> rsp_demux_004:src1_ready
	wire          rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire          rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire  [150:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire   [14:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_ready;                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire          rsp_demux_005_src1_endofpacket;                                            // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src1_valid;                                                  // rsp_demux_005:src1_valid -> rsp_mux_001:sink1_valid
	wire          rsp_demux_005_src1_startofpacket;                                          // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [150:0] rsp_demux_005_src1_data;                                                   // rsp_demux_005:src1_data -> rsp_mux_001:sink1_data
	wire   [14:0] rsp_demux_005_src1_channel;                                                // rsp_demux_005:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_005_src1_ready;                                                  // rsp_mux_001:sink1_ready -> rsp_demux_005:src1_ready
	wire          rsp_demux_014_src0_endofpacket;                                            // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_014_src0_valid;                                                  // rsp_demux_014:src0_valid -> rsp_mux_001:sink8_valid
	wire          rsp_demux_014_src0_startofpacket;                                          // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire  [150:0] rsp_demux_014_src0_data;                                                   // rsp_demux_014:src0_data -> rsp_mux_001:sink8_data
	wire   [14:0] rsp_demux_014_src0_channel;                                                // rsp_demux_014:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_014_src0_ready;                                                  // rsp_mux_001:sink8_ready -> rsp_demux_014:src0_ready
	wire          rsp_demux_014_src1_endofpacket;                                            // rsp_demux_014:src1_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_014_src1_valid;                                                  // rsp_demux_014:src1_valid -> rsp_mux_002:sink8_valid
	wire          rsp_demux_014_src1_startofpacket;                                          // rsp_demux_014:src1_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire  [150:0] rsp_demux_014_src1_data;                                                   // rsp_demux_014:src1_data -> rsp_mux_002:sink8_data
	wire   [14:0] rsp_demux_014_src1_channel;                                                // rsp_demux_014:src1_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_014_src1_ready;                                                  // rsp_mux_002:sink8_ready -> rsp_demux_014:src1_ready
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_ready;                                                      // pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire          pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_endofpacket;         // pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_valid;               // pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire          pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_startofpacket;       // pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_data;                // pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_ready;               // cmd_mux:sink0_ready -> pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_channel;             // pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_ready;                                                      // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_endofpacket;                // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_valid;                      // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_startofpacket;              // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_data;                       // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_ready;                      // cmd_mux_001:sink0_ready -> pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_channel;                    // pcie_ip_bar1_0_to_led_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src2_endofpacket;                                                // cmd_demux:src2_endofpacket -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src2_valid;                                                      // cmd_demux:src2_valid -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src2_startofpacket;                                              // cmd_demux:src2_startofpacket -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src2_data;                                                       // cmd_demux:src2_data -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src2_channel;                                                    // cmd_demux:src2_channel -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_ready;                                                      // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_endofpacket;             // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_valid;                   // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_valid -> cmd_mux_002:sink0_valid
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_startofpacket;           // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_data;                    // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_data -> cmd_mux_002:sink0_data
	wire          pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_ready;                   // cmd_mux_002:sink0_ready -> pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_channel;                 // pcie_ip_bar1_0_to_button_s1_cmd_width_adapter:out_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src3_endofpacket;                                                // cmd_demux:src3_endofpacket -> pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src3_valid;                                                      // cmd_demux:src3_valid -> pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:in_valid
	wire          cmd_demux_src3_startofpacket;                                              // cmd_demux:src3_startofpacket -> pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src3_data;                                                       // cmd_demux:src3_data -> pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src3_channel;                                                    // cmd_demux:src3_channel -> pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_ready;                                                      // pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire          pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_endofpacket;    // pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_valid;          // pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire          pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_startofpacket;  // pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_data;           // pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_ready;          // cmd_mux_003:sink0_ready -> pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_channel;        // pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src6_endofpacket;                                                // cmd_demux:src6_endofpacket -> pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src6_valid;                                                      // cmd_demux:src6_valid -> pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src6_startofpacket;                                              // cmd_demux:src6_startofpacket -> pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src6_data;                                                       // cmd_demux:src6_data -> pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src6_channel;                                                    // cmd_demux:src6_channel -> pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src6_ready;                                                      // pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:in_ready -> cmd_demux:src6_ready
	wire          pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket;        // pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_valid;              // pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:out_valid -> cmd_mux_006:sink0_valid
	wire          pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket;      // pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_data;               // pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:out_data -> cmd_mux_006:sink0_data
	wire          pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_ready;              // cmd_mux_006:sink0_ready -> pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_channel;            // pcie_ip_bar1_0_to_Interpo_4_0_s1_cmd_width_adapter:out_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src7_endofpacket;                                                // cmd_demux:src7_endofpacket -> pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src7_valid;                                                      // cmd_demux:src7_valid -> pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src7_startofpacket;                                              // cmd_demux:src7_startofpacket -> pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src7_data;                                                       // cmd_demux:src7_data -> pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src7_channel;                                                    // cmd_demux:src7_channel -> pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src7_ready;                                                      // pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:in_ready -> cmd_demux:src7_ready
	wire          pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket;        // pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_valid;              // pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink0_valid
	wire          pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket;      // pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_data;               // pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink0_data
	wire          pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_ready;              // cmd_mux_007:sink0_ready -> pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_channel;            // pcie_ip_bar1_0_to_Interpo_5_0_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src8_endofpacket;                                                // cmd_demux:src8_endofpacket -> pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src8_valid;                                                      // cmd_demux:src8_valid -> pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src8_startofpacket;                                              // cmd_demux:src8_startofpacket -> pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src8_data;                                                       // cmd_demux:src8_data -> pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src8_channel;                                                    // cmd_demux:src8_channel -> pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src8_ready;                                                      // pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:in_ready -> cmd_demux:src8_ready
	wire          pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket;        // pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_valid;              // pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink0_valid
	wire          pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket;      // pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_data;               // pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink0_data
	wire          pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_ready;              // cmd_mux_008:sink0_ready -> pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_channel;            // pcie_ip_bar1_0_to_Interpo_5_1_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src9_endofpacket;                                                // cmd_demux:src9_endofpacket -> pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src9_valid;                                                      // cmd_demux:src9_valid -> pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src9_startofpacket;                                              // cmd_demux:src9_startofpacket -> pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src9_data;                                                       // cmd_demux:src9_data -> pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src9_channel;                                                    // cmd_demux:src9_channel -> pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src9_ready;                                                      // pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:in_ready -> cmd_demux:src9_ready
	wire          pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket;        // pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_valid;              // pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:out_valid -> cmd_mux_009:sink0_valid
	wire          pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket;      // pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_data;               // pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:out_data -> cmd_mux_009:sink0_data
	wire          pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_ready;              // cmd_mux_009:sink0_ready -> pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_channel;            // pcie_ip_bar1_0_to_Interpo_5_2_s1_cmd_width_adapter:out_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src10_endofpacket;                                               // cmd_demux:src10_endofpacket -> pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src10_valid;                                                     // cmd_demux:src10_valid -> pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src10_startofpacket;                                             // cmd_demux:src10_startofpacket -> pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src10_data;                                                      // cmd_demux:src10_data -> pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src10_channel;                                                   // cmd_demux:src10_channel -> pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src10_ready;                                                     // pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:in_ready -> cmd_demux:src10_ready
	wire          pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket;        // pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_valid;              // pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:out_valid -> cmd_mux_010:sink0_valid
	wire          pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket;      // pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_data;               // pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:out_data -> cmd_mux_010:sink0_data
	wire          pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_ready;              // cmd_mux_010:sink0_ready -> pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_channel;            // pcie_ip_bar1_0_to_Interpo_5_3_s1_cmd_width_adapter:out_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src11_endofpacket;                                               // cmd_demux:src11_endofpacket -> pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src11_valid;                                                     // cmd_demux:src11_valid -> pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src11_startofpacket;                                             // cmd_demux:src11_startofpacket -> pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src11_data;                                                      // cmd_demux:src11_data -> pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src11_channel;                                                   // cmd_demux:src11_channel -> pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src11_ready;                                                     // pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_ready -> cmd_demux:src11_ready
	wire          pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket;      // pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid;            // pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_valid -> cmd_mux_011:sink0_valid
	wire          pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket;    // pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_data;             // pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_data -> cmd_mux_011:sink0_data
	wire          pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready;            // cmd_mux_011:sink0_ready -> pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel;          // pcie_ip_bar1_0_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src12_endofpacket;                                               // cmd_demux:src12_endofpacket -> pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src12_valid;                                                     // cmd_demux:src12_valid -> pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src12_startofpacket;                                             // cmd_demux:src12_startofpacket -> pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src12_data;                                                      // cmd_demux:src12_data -> pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src12_channel;                                                   // cmd_demux:src12_channel -> pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src12_ready;                                                     // pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:in_ready -> cmd_demux:src12_ready
	wire          pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_endofpacket;     // pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_valid;           // pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:out_valid -> cmd_mux_012:sink0_valid
	wire          pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_startofpacket;   // pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_data;            // pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:out_data -> cmd_mux_012:sink0_data
	wire          pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_ready;           // cmd_mux_012:sink0_ready -> pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_channel;         // pcie_ip_bar1_0_to_micFilter_cntl_s1_cmd_width_adapter:out_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src13_endofpacket;                                               // cmd_demux:src13_endofpacket -> pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src13_valid;                                                     // cmd_demux:src13_valid -> pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_src13_startofpacket;                                             // cmd_demux:src13_startofpacket -> pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_src13_data;                                                      // cmd_demux:src13_data -> pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_src13_channel;                                                   // cmd_demux:src13_channel -> pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src13_ready;                                                     // pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:in_ready -> cmd_demux:src13_ready
	wire          pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_endofpacket;      // pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_valid;            // pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:out_valid -> cmd_mux_013:sink0_valid
	wire          pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_startofpacket;    // pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire  [114:0] pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_data;             // pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:out_data -> cmd_mux_013:sink0_data
	wire          pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_ready;            // cmd_mux_013:sink0_ready -> pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:out_ready
	wire   [14:0] pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_channel;          // pcie_ip_bar1_0_to_micFilter_rst_s1_cmd_width_adapter:out_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_ready;                                                  // sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire          sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_endofpacket;           // sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_valid;                 // sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire          sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_startofpacket;         // sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [114:0] sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_data;                  // sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_ready;                 // cmd_mux:sink1_ready -> sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_channel;               // sgdma_m_read_to_fir_memory_s1_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src2_endofpacket;                                            // cmd_demux_001:src2_endofpacket -> sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src2_valid;                                                  // cmd_demux_001:src2_valid -> sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src2_startofpacket;                                          // cmd_demux_001:src2_startofpacket -> sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_001_src2_data;                                                   // cmd_demux_001:src2_data -> sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_001_src2_channel;                                                // cmd_demux_001:src2_channel -> sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src2_ready;                                                  // sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src2_ready
	wire          sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket;          // sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_valid;                // sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:out_valid -> cmd_mux_006:sink1_valid
	wire          sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket;        // sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire  [114:0] sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_data;                 // sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:out_data -> cmd_mux_006:sink1_data
	wire          sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_ready;                // cmd_mux_006:sink1_ready -> sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_channel;              // sgdma_m_read_to_Interpo_4_0_s1_cmd_width_adapter:out_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src3_endofpacket;                                            // cmd_demux_001:src3_endofpacket -> sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src3_valid;                                                  // cmd_demux_001:src3_valid -> sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src3_startofpacket;                                          // cmd_demux_001:src3_startofpacket -> sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_001_src3_data;                                                   // cmd_demux_001:src3_data -> sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_001_src3_channel;                                                // cmd_demux_001:src3_channel -> sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src3_ready;                                                  // sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src3_ready
	wire          sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket;          // sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_valid;                // sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink1_valid
	wire          sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket;        // sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire  [114:0] sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_data;                 // sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink1_data
	wire          sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_ready;                // cmd_mux_007:sink1_ready -> sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_channel;              // sgdma_m_read_to_Interpo_5_0_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src4_endofpacket;                                            // cmd_demux_001:src4_endofpacket -> sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src4_valid;                                                  // cmd_demux_001:src4_valid -> sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src4_startofpacket;                                          // cmd_demux_001:src4_startofpacket -> sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_001_src4_data;                                                   // cmd_demux_001:src4_data -> sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_001_src4_channel;                                                // cmd_demux_001:src4_channel -> sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src4_ready;                                                  // sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src4_ready
	wire          sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket;          // sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_valid;                // sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink1_valid
	wire          sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket;        // sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire  [114:0] sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_data;                 // sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink1_data
	wire          sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_ready;                // cmd_mux_008:sink1_ready -> sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_channel;              // sgdma_m_read_to_Interpo_5_1_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src5_endofpacket;                                            // cmd_demux_001:src5_endofpacket -> sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src5_valid;                                                  // cmd_demux_001:src5_valid -> sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src5_startofpacket;                                          // cmd_demux_001:src5_startofpacket -> sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_001_src5_data;                                                   // cmd_demux_001:src5_data -> sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_001_src5_channel;                                                // cmd_demux_001:src5_channel -> sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src5_ready;                                                  // sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src5_ready
	wire          sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket;          // sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_valid;                // sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:out_valid -> cmd_mux_009:sink1_valid
	wire          sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket;        // sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire  [114:0] sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_data;                 // sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:out_data -> cmd_mux_009:sink1_data
	wire          sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_ready;                // cmd_mux_009:sink1_ready -> sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_channel;              // sgdma_m_read_to_Interpo_5_2_s1_cmd_width_adapter:out_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src6_endofpacket;                                            // cmd_demux_001:src6_endofpacket -> sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src6_valid;                                                  // cmd_demux_001:src6_valid -> sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src6_startofpacket;                                          // cmd_demux_001:src6_startofpacket -> sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_001_src6_data;                                                   // cmd_demux_001:src6_data -> sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_001_src6_channel;                                                // cmd_demux_001:src6_channel -> sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src6_ready;                                                  // sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src6_ready
	wire          sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket;          // sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_valid;                // sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:out_valid -> cmd_mux_010:sink1_valid
	wire          sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket;        // sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire  [114:0] sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_data;                 // sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:out_data -> cmd_mux_010:sink1_data
	wire          sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_ready;                // cmd_mux_010:sink1_ready -> sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_channel;              // sgdma_m_read_to_Interpo_5_3_s1_cmd_width_adapter:out_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src7_endofpacket;                                            // cmd_demux_001:src7_endofpacket -> sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src7_valid;                                                  // cmd_demux_001:src7_valid -> sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src7_startofpacket;                                          // cmd_demux_001:src7_startofpacket -> sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_001_src7_data;                                                   // cmd_demux_001:src7_data -> sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_001_src7_channel;                                                // cmd_demux_001:src7_channel -> sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src7_ready;                                                  // sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src7_ready
	wire          sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket;        // sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid;              // sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_valid -> cmd_mux_011:sink1_valid
	wire          sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket;      // sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire  [114:0] sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_data;               // sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_data -> cmd_mux_011:sink1_data
	wire          sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready;              // cmd_mux_011:sink1_ready -> sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel;            // sgdma_m_read_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_002_src0_endofpacket;                                            // cmd_demux_002:src0_endofpacket -> sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                  // cmd_demux_002:src0_valid -> sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src0_startofpacket;                                          // cmd_demux_002:src0_startofpacket -> sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_002_src0_data;                                                   // cmd_demux_002:src0_data -> sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_002_src0_channel;                                                // cmd_demux_002:src0_channel -> sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_ready;                                                  // sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire          sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_endofpacket;          // sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_valid;                // sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire          sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_startofpacket;        // sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire  [114:0] sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_data;                 // sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_ready;                // cmd_mux:sink2_ready -> sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_channel;              // sgdma_m_write_to_fir_memory_s1_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src2_endofpacket;                                            // cmd_demux_002:src2_endofpacket -> sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src2_valid;                                                  // cmd_demux_002:src2_valid -> sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src2_startofpacket;                                          // cmd_demux_002:src2_startofpacket -> sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_002_src2_data;                                                   // cmd_demux_002:src2_data -> sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_002_src2_channel;                                                // cmd_demux_002:src2_channel -> sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src2_ready;                                                  // sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src2_ready
	wire          sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket;         // sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_valid;               // sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:out_valid -> cmd_mux_006:sink2_valid
	wire          sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket;       // sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire  [114:0] sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_data;                // sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:out_data -> cmd_mux_006:sink2_data
	wire          sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_ready;               // cmd_mux_006:sink2_ready -> sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_channel;             // sgdma_m_write_to_Interpo_4_0_s1_cmd_width_adapter:out_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_002_src3_endofpacket;                                            // cmd_demux_002:src3_endofpacket -> sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src3_valid;                                                  // cmd_demux_002:src3_valid -> sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src3_startofpacket;                                          // cmd_demux_002:src3_startofpacket -> sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_002_src3_data;                                                   // cmd_demux_002:src3_data -> sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_002_src3_channel;                                                // cmd_demux_002:src3_channel -> sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src3_ready;                                                  // sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src3_ready
	wire          sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket;         // sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_valid;               // sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink2_valid
	wire          sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket;       // sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire  [114:0] sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_data;                // sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink2_data
	wire          sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_ready;               // cmd_mux_007:sink2_ready -> sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_channel;             // sgdma_m_write_to_Interpo_5_0_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src4_endofpacket;                                            // cmd_demux_002:src4_endofpacket -> sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src4_valid;                                                  // cmd_demux_002:src4_valid -> sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src4_startofpacket;                                          // cmd_demux_002:src4_startofpacket -> sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_002_src4_data;                                                   // cmd_demux_002:src4_data -> sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_002_src4_channel;                                                // cmd_demux_002:src4_channel -> sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src4_ready;                                                  // sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src4_ready
	wire          sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket;         // sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_valid;               // sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink2_valid
	wire          sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket;       // sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire  [114:0] sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_data;                // sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink2_data
	wire          sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_ready;               // cmd_mux_008:sink2_ready -> sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_channel;             // sgdma_m_write_to_Interpo_5_1_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_002_src5_endofpacket;                                            // cmd_demux_002:src5_endofpacket -> sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src5_valid;                                                  // cmd_demux_002:src5_valid -> sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src5_startofpacket;                                          // cmd_demux_002:src5_startofpacket -> sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_002_src5_data;                                                   // cmd_demux_002:src5_data -> sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_002_src5_channel;                                                // cmd_demux_002:src5_channel -> sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src5_ready;                                                  // sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src5_ready
	wire          sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket;         // sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_valid;               // sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:out_valid -> cmd_mux_009:sink2_valid
	wire          sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket;       // sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire  [114:0] sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_data;                // sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:out_data -> cmd_mux_009:sink2_data
	wire          sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_ready;               // cmd_mux_009:sink2_ready -> sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_channel;             // sgdma_m_write_to_Interpo_5_2_s1_cmd_width_adapter:out_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_002_src6_endofpacket;                                            // cmd_demux_002:src6_endofpacket -> sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src6_valid;                                                  // cmd_demux_002:src6_valid -> sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src6_startofpacket;                                          // cmd_demux_002:src6_startofpacket -> sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_002_src6_data;                                                   // cmd_demux_002:src6_data -> sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_002_src6_channel;                                                // cmd_demux_002:src6_channel -> sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src6_ready;                                                  // sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src6_ready
	wire          sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket;         // sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_valid;               // sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:out_valid -> cmd_mux_010:sink2_valid
	wire          sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket;       // sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire  [114:0] sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_data;                // sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:out_data -> cmd_mux_010:sink2_data
	wire          sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_ready;               // cmd_mux_010:sink2_ready -> sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_channel;             // sgdma_m_write_to_Interpo_5_3_s1_cmd_width_adapter:out_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src7_endofpacket;                                            // cmd_demux_002:src7_endofpacket -> sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src7_valid;                                                  // cmd_demux_002:src7_valid -> sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src7_startofpacket;                                          // cmd_demux_002:src7_startofpacket -> sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_startofpacket
	wire  [150:0] cmd_demux_002_src7_data;                                                   // cmd_demux_002:src7_data -> sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_002_src7_channel;                                                // cmd_demux_002:src7_channel -> sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src7_ready;                                                  // sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src7_ready
	wire          sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket;       // sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid;             // sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_valid -> cmd_mux_011:sink2_valid
	wire          sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket;     // sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire  [114:0] sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_data;              // sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_data -> cmd_mux_011:sink2_data
	wire          sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready;             // cmd_mux_011:sink2_ready -> sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel;           // sgdma_m_write_to_Adapt_FIR_mem_s1_cmd_width_adapter:out_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_003_src0_endofpacket;                                            // cmd_demux_003:src0_endofpacket -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_003_src0_valid;                                                  // cmd_demux_003:src0_valid -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_valid
	wire          cmd_demux_003_src0_startofpacket;                                          // cmd_demux_003:src0_startofpacket -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_startofpacket
	wire  [114:0] cmd_demux_003_src0_data;                                                   // cmd_demux_003:src0_data -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_003_src0_channel;                                                // cmd_demux_003:src0_channel -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src0_ready;                                                  // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_ready -> cmd_demux_003:src0_ready
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket;    // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid;          // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_valid -> cmd_mux_014:sink2_valid
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket;  // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire  [150:0] sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data;           // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_data -> cmd_mux_014:sink2_data
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready;          // cmd_mux_014:sink2_ready -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel;        // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_004_src0_endofpacket;                                            // cmd_demux_004:src0_endofpacket -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_004_src0_valid;                                                  // cmd_demux_004:src0_valid -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_valid
	wire          cmd_demux_004_src0_startofpacket;                                          // cmd_demux_004:src0_startofpacket -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_startofpacket
	wire  [114:0] cmd_demux_004_src0_data;                                                   // cmd_demux_004:src0_data -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_data
	wire   [14:0] cmd_demux_004_src0_channel;                                                // cmd_demux_004:src0_channel -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_ready;                                                  // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket;   // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_endofpacket -> cmd_mux_014:sink3_endofpacket
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid;         // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_valid -> cmd_mux_014:sink3_valid
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket; // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_startofpacket -> cmd_mux_014:sink3_startofpacket
	wire  [150:0] sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data;          // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_data -> cmd_mux_014:sink3_data
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready;         // cmd_mux_014:sink3_ready -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_ready
	wire   [14:0] sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel;       // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_channel -> cmd_mux_014:sink3_channel
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_ready;                                                      // fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire          fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;         // fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;               // fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire          fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;       // fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [150:0] fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;                // fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;               // rsp_mux:sink0_ready -> fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;             // fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_ready;                                                      // fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire          fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;           // fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;                 // fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire          fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;         // fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [150:0] fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_data;                  // fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;                 // rsp_mux_001:sink0_ready -> fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire   [14:0] fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;               // fir_memory_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src2_endofpacket;                                                // rsp_demux:src2_endofpacket -> fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src2_valid;                                                      // rsp_demux:src2_valid -> fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_src2_startofpacket;                                              // rsp_demux:src2_startofpacket -> fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_src2_data;                                                       // rsp_demux:src2_data -> fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_src2_channel;                                                    // rsp_demux:src2_channel -> fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_ready;                                                      // fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire          fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;          // fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;                // fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire          fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;        // fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire  [150:0] fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_data;                 // fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;                // rsp_mux_002:sink0_ready -> fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire   [14:0] fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;              // fir_memory_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_ready;                                                  // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;                // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;                      // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;              // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [150:0] led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;                       // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;                      // rsp_mux:sink1_ready -> led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;                    // led_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_ready;                                                  // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;             // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;                   // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink2_valid
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;           // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [150:0] button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;                    // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink2_data
	wire          button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;                   // rsp_mux:sink2_ready -> button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;                 // button_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_ready;                                                  // fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire          fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;    // fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;          // fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire          fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;  // fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [150:0] fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;           // fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;          // rsp_mux:sink3_ready -> fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;        // fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src0_ready;                                                  // Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_006:src0_ready
	wire          interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;        // Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;              // Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink6_valid
	wire          interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;      // Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire  [150:0] interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;               // Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink6_data
	wire          interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;              // rsp_mux:sink6_ready -> Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;            // Interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src1_endofpacket;                                            // rsp_demux_006:src1_endofpacket -> Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_006_src1_valid;                                                  // rsp_demux_006:src1_valid -> Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_006_src1_startofpacket;                                          // rsp_demux_006:src1_startofpacket -> Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_006_src1_data;                                                   // rsp_demux_006:src1_data -> Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_006_src1_channel;                                                // rsp_demux_006:src1_channel -> Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src1_ready;                                                  // Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_006:src1_ready
	wire          interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;          // Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;                // Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink2_valid
	wire          interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;        // Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [150:0] interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_data;                 // Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink2_data
	wire          interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;                // rsp_mux_001:sink2_ready -> Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire   [14:0] interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;              // Interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_006_src2_endofpacket;                                            // rsp_demux_006:src2_endofpacket -> Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_006_src2_valid;                                                  // rsp_demux_006:src2_valid -> Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_006_src2_startofpacket;                                          // rsp_demux_006:src2_startofpacket -> Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_006_src2_data;                                                   // rsp_demux_006:src2_data -> Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_006_src2_channel;                                                // rsp_demux_006:src2_channel -> Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src2_ready;                                                  // Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_006:src2_ready
	wire          interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;         // Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;               // Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink2_valid
	wire          interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;       // Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire  [150:0] interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_data;                // Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink2_data
	wire          interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;               // rsp_mux_002:sink2_ready -> Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire   [14:0] interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;             // Interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src0_ready;                                                  // Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_007:src0_ready
	wire          interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;        // Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;              // Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink7_valid
	wire          interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;      // Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire  [150:0] interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;               // Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink7_data
	wire          interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;              // rsp_mux:sink7_ready -> Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;            // Interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src1_endofpacket;                                            // rsp_demux_007:src1_endofpacket -> Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_007_src1_valid;                                                  // rsp_demux_007:src1_valid -> Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_007_src1_startofpacket;                                          // rsp_demux_007:src1_startofpacket -> Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_007_src1_data;                                                   // rsp_demux_007:src1_data -> Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_007_src1_channel;                                                // rsp_demux_007:src1_channel -> Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src1_ready;                                                  // Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_007:src1_ready
	wire          interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;          // Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;                // Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink3_valid
	wire          interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;        // Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [150:0] interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_data;                 // Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink3_data
	wire          interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;                // rsp_mux_001:sink3_ready -> Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;              // Interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_007_src2_endofpacket;                                            // rsp_demux_007:src2_endofpacket -> Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_007_src2_valid;                                                  // rsp_demux_007:src2_valid -> Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_007_src2_startofpacket;                                          // rsp_demux_007:src2_startofpacket -> Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_007_src2_data;                                                   // rsp_demux_007:src2_data -> Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_007_src2_channel;                                                // rsp_demux_007:src2_channel -> Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src2_ready;                                                  // Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_007:src2_ready
	wire          interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;         // Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;               // Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink3_valid
	wire          interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;       // Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire  [150:0] interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_data;                // Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink3_data
	wire          interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;               // rsp_mux_002:sink3_ready -> Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;             // Interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src0_ready;                                                  // Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_008:src0_ready
	wire          interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;        // Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;              // Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink8_valid
	wire          interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;      // Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire  [150:0] interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;               // Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink8_data
	wire          interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;              // rsp_mux:sink8_ready -> Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;            // Interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src1_endofpacket;                                            // rsp_demux_008:src1_endofpacket -> Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_008_src1_valid;                                                  // rsp_demux_008:src1_valid -> Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_008_src1_startofpacket;                                          // rsp_demux_008:src1_startofpacket -> Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_008_src1_data;                                                   // rsp_demux_008:src1_data -> Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_008_src1_channel;                                                // rsp_demux_008:src1_channel -> Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src1_ready;                                                  // Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_008:src1_ready
	wire          interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;          // Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;                // Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink4_valid
	wire          interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;        // Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [150:0] interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_data;                 // Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink4_data
	wire          interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;                // rsp_mux_001:sink4_ready -> Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;              // Interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_008_src2_endofpacket;                                            // rsp_demux_008:src2_endofpacket -> Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_008_src2_valid;                                                  // rsp_demux_008:src2_valid -> Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_008_src2_startofpacket;                                          // rsp_demux_008:src2_startofpacket -> Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_008_src2_data;                                                   // rsp_demux_008:src2_data -> Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_008_src2_channel;                                                // rsp_demux_008:src2_channel -> Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src2_ready;                                                  // Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_008:src2_ready
	wire          interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;         // Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;               // Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink4_valid
	wire          interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;       // Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire  [150:0] interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_data;                // Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink4_data
	wire          interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;               // rsp_mux_002:sink4_ready -> Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;             // Interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_009_src0_ready;                                                  // Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_009:src0_ready
	wire          interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;        // Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;              // Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink9_valid
	wire          interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;      // Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire  [150:0] interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;               // Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink9_data
	wire          interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;              // rsp_mux:sink9_ready -> Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;            // Interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src1_endofpacket;                                            // rsp_demux_009:src1_endofpacket -> Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_009_src1_valid;                                                  // rsp_demux_009:src1_valid -> Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_009_src1_startofpacket;                                          // rsp_demux_009:src1_startofpacket -> Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_009_src1_data;                                                   // rsp_demux_009:src1_data -> Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_009_src1_channel;                                                // rsp_demux_009:src1_channel -> Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_009_src1_ready;                                                  // Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_009:src1_ready
	wire          interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;          // Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;                // Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink5_valid
	wire          interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;        // Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire  [150:0] interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_data;                 // Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink5_data
	wire          interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;                // rsp_mux_001:sink5_ready -> Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;              // Interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_009_src2_endofpacket;                                            // rsp_demux_009:src2_endofpacket -> Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_009_src2_valid;                                                  // rsp_demux_009:src2_valid -> Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_009_src2_startofpacket;                                          // rsp_demux_009:src2_startofpacket -> Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_009_src2_data;                                                   // rsp_demux_009:src2_data -> Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_009_src2_channel;                                                // rsp_demux_009:src2_channel -> Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_009_src2_ready;                                                  // Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_009:src2_ready
	wire          interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;         // Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;               // Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink5_valid
	wire          interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;       // Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire  [150:0] interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_data;                // Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink5_data
	wire          interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;               // rsp_mux_002:sink5_ready -> Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;             // Interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_010_src0_endofpacket;                                            // rsp_demux_010:src0_endofpacket -> Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_010_src0_valid;                                                  // rsp_demux_010:src0_valid -> Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_010_src0_startofpacket;                                          // rsp_demux_010:src0_startofpacket -> Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_010_src0_data;                                                   // rsp_demux_010:src0_data -> Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_010_src0_channel;                                                // rsp_demux_010:src0_channel -> Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_010_src0_ready;                                                  // Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_010:src0_ready
	wire          interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;        // Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;              // Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink10_valid
	wire          interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;      // Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire  [150:0] interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;               // Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink10_data
	wire          interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;              // rsp_mux:sink10_ready -> Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;            // Interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src1_endofpacket;                                            // rsp_demux_010:src1_endofpacket -> Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_010_src1_valid;                                                  // rsp_demux_010:src1_valid -> Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_010_src1_startofpacket;                                          // rsp_demux_010:src1_startofpacket -> Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_010_src1_data;                                                   // rsp_demux_010:src1_data -> Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_010_src1_channel;                                                // rsp_demux_010:src1_channel -> Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_010_src1_ready;                                                  // Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_010:src1_ready
	wire          interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;          // Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;                // Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink6_valid
	wire          interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;        // Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire  [150:0] interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_data;                 // Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink6_data
	wire          interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;                // rsp_mux_001:sink6_ready -> Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;              // Interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_010_src2_endofpacket;                                            // rsp_demux_010:src2_endofpacket -> Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_010_src2_valid;                                                  // rsp_demux_010:src2_valid -> Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_010_src2_startofpacket;                                          // rsp_demux_010:src2_startofpacket -> Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_010_src2_data;                                                   // rsp_demux_010:src2_data -> Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_010_src2_channel;                                                // rsp_demux_010:src2_channel -> Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_010_src2_ready;                                                  // Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_010:src2_ready
	wire          interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;         // Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;               // Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink6_valid
	wire          interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;       // Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire  [150:0] interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_data;                // Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink6_data
	wire          interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;               // rsp_mux_002:sink6_ready -> Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire   [14:0] interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;             // Interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_011_src0_endofpacket;                                            // rsp_demux_011:src0_endofpacket -> Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_011_src0_valid;                                                  // rsp_demux_011:src0_valid -> Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_011_src0_startofpacket;                                          // rsp_demux_011:src0_startofpacket -> Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_011_src0_data;                                                   // rsp_demux_011:src0_data -> Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_011_src0_channel;                                                // rsp_demux_011:src0_channel -> Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src0_ready;                                                  // Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_011:src0_ready
	wire          adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;      // Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;            // Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink11_valid
	wire          adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;    // Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire  [150:0] adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;             // Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink11_data
	wire          adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;            // rsp_mux:sink11_ready -> Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;          // Adapt_FIR_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src1_endofpacket;                                            // rsp_demux_011:src1_endofpacket -> Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_011_src1_valid;                                                  // rsp_demux_011:src1_valid -> Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_011_src1_startofpacket;                                          // rsp_demux_011:src1_startofpacket -> Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_011_src1_data;                                                   // rsp_demux_011:src1_data -> Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_011_src1_channel;                                                // rsp_demux_011:src1_channel -> Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src1_ready;                                                  // Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_011:src1_ready
	wire          adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;        // Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;              // Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink7_valid
	wire          adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;      // Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire  [150:0] adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_data;               // Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> rsp_mux_001:sink7_data
	wire          adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;              // rsp_mux_001:sink7_ready -> Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire   [14:0] adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;            // Adapt_FIR_mem_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_011_src2_endofpacket;                                            // rsp_demux_011:src2_endofpacket -> Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_011_src2_valid;                                                  // rsp_demux_011:src2_valid -> Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_011_src2_startofpacket;                                          // rsp_demux_011:src2_startofpacket -> Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_011_src2_data;                                                   // rsp_demux_011:src2_data -> Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_011_src2_channel;                                                // rsp_demux_011:src2_channel -> Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src2_ready;                                                  // Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_011:src2_ready
	wire          adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;       // Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;             // Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> rsp_mux_002:sink7_valid
	wire          adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;     // Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire  [150:0] adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_data;              // Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> rsp_mux_002:sink7_data
	wire          adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;             // rsp_mux_002:sink7_ready -> Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire   [14:0] adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;           // Adapt_FIR_mem_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_012_src0_endofpacket;                                            // rsp_demux_012:src0_endofpacket -> micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_012_src0_valid;                                                  // rsp_demux_012:src0_valid -> micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_012_src0_startofpacket;                                          // rsp_demux_012:src0_startofpacket -> micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_012_src0_data;                                                   // rsp_demux_012:src0_data -> micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_012_src0_channel;                                                // rsp_demux_012:src0_channel -> micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src0_ready;                                                  // micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_012:src0_ready
	wire          micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;     // micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;           // micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink12_valid
	wire          micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;   // micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire  [150:0] micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;            // micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink12_data
	wire          micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;           // rsp_mux:sink12_ready -> micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;         // micFilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_013_src0_endofpacket;                                            // rsp_demux_013:src0_endofpacket -> micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_013_src0_valid;                                                  // rsp_demux_013:src0_valid -> micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_valid
	wire          rsp_demux_013_src0_startofpacket;                                          // rsp_demux_013:src0_startofpacket -> micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_startofpacket
	wire  [114:0] rsp_demux_013_src0_data;                                                   // rsp_demux_013:src0_data -> micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_013_src0_channel;                                                // rsp_demux_013:src0_channel -> micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_channel
	wire          rsp_demux_013_src0_ready;                                                  // micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:in_ready -> rsp_demux_013:src0_ready
	wire          micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket;      // micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid;            // micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_valid -> rsp_mux:sink13_valid
	wire          micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket;    // micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire  [150:0] micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data;             // micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_data -> rsp_mux:sink13_data
	wire          micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready;            // rsp_mux:sink13_ready -> micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_ready
	wire   [14:0] micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel;          // micFilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter:out_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_014_src2_endofpacket;                                            // rsp_demux_014:src2_endofpacket -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_014_src2_valid;                                                  // rsp_demux_014:src2_valid -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_valid
	wire          rsp_demux_014_src2_startofpacket;                                          // rsp_demux_014:src2_startofpacket -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_startofpacket
	wire  [150:0] rsp_demux_014_src2_data;                                                   // rsp_demux_014:src2_data -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_014_src2_channel;                                                // rsp_demux_014:src2_channel -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_channel
	wire          rsp_demux_014_src2_ready;                                                  // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_ready -> rsp_demux_014:src2_ready
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket;    // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid;          // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_valid -> rsp_mux_003:sink0_valid
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket;  // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire  [114:0] pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data;           // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_data -> rsp_mux_003:sink0_data
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready;          // rsp_mux_003:sink0_ready -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_ready
	wire   [14:0] pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel;        // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_014_src3_endofpacket;                                            // rsp_demux_014:src3_endofpacket -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_014_src3_valid;                                                  // rsp_demux_014:src3_valid -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_valid
	wire          rsp_demux_014_src3_startofpacket;                                          // rsp_demux_014:src3_startofpacket -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_startofpacket
	wire  [150:0] rsp_demux_014_src3_data;                                                   // rsp_demux_014:src3_data -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_data
	wire   [14:0] rsp_demux_014_src3_channel;                                                // rsp_demux_014:src3_channel -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_channel
	wire          rsp_demux_014_src3_ready;                                                  // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_ready -> rsp_demux_014:src3_ready
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket;   // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid;         // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket; // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire  [114:0] pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data;          // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready;         // rsp_mux_004:sink0_ready -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_ready
	wire   [14:0] pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel;       // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire   [14:0] pcie_ip_bar1_0_limiter_cmd_valid_data;                                     // pcie_ip_bar1_0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [14:0] sgdma_m_read_limiter_cmd_valid_data;                                       // sgdma_m_read_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (7),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcie_ip_bar1_0_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                         //                       clk.clk
		.reset                    (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address              (pcie_ip_bar1_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcie_ip_bar1_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcie_ip_bar1_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcie_ip_bar1_0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcie_ip_bar1_0_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcie_ip_bar1_0_byteenable),                                         //                          .byteenable
		.av_read                  (pcie_ip_bar1_0_read),                                               //                          .read
		.av_readdata              (pcie_ip_bar1_0_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcie_ip_bar1_0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcie_ip_bar1_0_write),                                              //                          .write
		.av_writedata             (pcie_ip_bar1_0_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.av_debugaccess           (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_m_read_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                            //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address              (sgdma_m_read_translator_avalon_universal_master_0_address),            // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_m_read_translator_avalon_universal_master_0_burstcount),         //                          .burstcount
		.uav_read                 (sgdma_m_read_translator_avalon_universal_master_0_read),               //                          .read
		.uav_write                (sgdma_m_read_translator_avalon_universal_master_0_write),              //                          .write
		.uav_waitrequest          (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),        //                          .waitrequest
		.uav_readdatavalid        (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid),      //                          .readdatavalid
		.uav_byteenable           (sgdma_m_read_translator_avalon_universal_master_0_byteenable),         //                          .byteenable
		.uav_readdata             (sgdma_m_read_translator_avalon_universal_master_0_readdata),           //                          .readdata
		.uav_writedata            (sgdma_m_read_translator_avalon_universal_master_0_writedata),          //                          .writedata
		.uav_lock                 (sgdma_m_read_translator_avalon_universal_master_0_lock),               //                          .lock
		.uav_debugaccess          (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),        //                          .debugaccess
		.av_address               (sgdma_m_read_address),                                                 //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_m_read_waitrequest),                                             //                          .waitrequest
		.av_read                  (sgdma_m_read_read),                                                    //                          .read
		.av_readdata              (sgdma_m_read_readdata),                                                //                          .readdata
		.av_readdatavalid         (sgdma_m_read_readdatavalid),                                           //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                 //               (terminated)
		.av_byteenable            (8'b11111111),                                                          //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                 //               (terminated)
		.av_write                 (1'b0),                                                                 //               (terminated)
		.av_writedata             (64'b0000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.av_debugaccess           (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_m_write_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                        //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address              (sgdma_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (sgdma_m_write_byteenable),                                         //                          .byteenable
		.av_write                 (sgdma_m_write_write),                                              //                          .write
		.av_writedata             (sgdma_m_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                             //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                             //               (terminated)
		.av_begintransfer         (1'b0),                                                             //               (terminated)
		.av_chipselect            (1'b0),                                                             //               (terminated)
		.av_read                  (1'b0),                                                             //               (terminated)
		.av_readdata              (),                                                                 //               (terminated)
		.av_readdatavalid         (),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                             //               (terminated)
		.av_debugaccess           (1'b0),                                                             //               (terminated)
		.uav_clken                (),                                                                 //               (terminated)
		.av_clken                 (1'b1),                                                             //               (terminated)
		.uav_response             (2'b00),                                                            //               (terminated)
		.av_response              (),                                                                 //               (terminated)
		.uav_writeresponserequest (),                                                                 //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                             //               (terminated)
		.av_writeresponserequest  (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid    ()                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_read_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                                //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address              (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                  (sgdma_descriptor_read_read),                                               //                          .read
		.av_readdata              (sgdma_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid         (sgdma_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                     //               (terminated)
		.av_byteenable            (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                     //               (terminated)
		.av_begintransfer         (1'b0),                                                                     //               (terminated)
		.av_chipselect            (1'b0),                                                                     //               (terminated)
		.av_write                 (1'b0),                                                                     //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                     //               (terminated)
		.av_lock                  (1'b0),                                                                     //               (terminated)
		.av_debugaccess           (1'b0),                                                                     //               (terminated)
		.uav_clken                (),                                                                         //               (terminated)
		.av_clken                 (1'b1),                                                                     //               (terminated)
		.uav_response             (2'b00),                                                                    //               (terminated)
		.av_response              (),                                                                         //               (terminated)
		.uav_writeresponserequest (),                                                                         //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                     //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid    ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_write_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                                 //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write                 (sgdma_descriptor_write_write),                                              //                          .write
		.av_writedata             (sgdma_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                      //               (terminated)
		.av_byteenable            (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                      //               (terminated)
		.av_begintransfer         (1'b0),                                                                      //               (terminated)
		.av_chipselect            (1'b0),                                                                      //               (terminated)
		.av_read                  (1'b0),                                                                      //               (terminated)
		.av_readdata              (),                                                                          //               (terminated)
		.av_readdatavalid         (),                                                                          //               (terminated)
		.av_lock                  (1'b0),                                                                      //               (terminated)
		.av_debugaccess           (1'b0),                                                                      //               (terminated)
		.uav_clken                (),                                                                          //               (terminated)
		.av_clken                 (1'b1),                                                                      //               (terminated)
		.uav_response             (2'b00),                                                                     //               (terminated)
		.av_response              (),                                                                          //               (terminated)
		.uav_writeresponserequest (),                                                                          //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                      //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid    ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fir_memory_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (fir_memory_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (fir_memory_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (fir_memory_s1_agent_m0_read),             //                         .read
		.uav_write                (fir_memory_s1_agent_m0_write),            //                         .write
		.uav_waitrequest          (fir_memory_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (fir_memory_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (fir_memory_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (fir_memory_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (fir_memory_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (fir_memory_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (fir_memory_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (fir_memory_s1_address),                   //      avalon_anti_slave_0.address
		.av_write                 (fir_memory_s1_write),                     //                         .write
		.av_readdata              (fir_memory_s1_readdata),                  //                         .readdata
		.av_writedata             (fir_memory_s1_writedata),                 //                         .writedata
		.av_byteenable            (fir_memory_s1_byteenable),                //                         .byteenable
		.av_chipselect            (fir_memory_s1_chipselect),                //                         .chipselect
		.av_clken                 (fir_memory_s1_clken),                     //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (led_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (led_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (led_s1_agent_m0_read),                    //                         .read
		.uav_write                (led_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (led_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (led_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (led_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (led_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (led_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (led_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (led_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (led_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (led_s1_write),                            //                         .write
		.av_readdata              (led_s1_readdata),                         //                         .readdata
		.av_writedata             (led_s1_writedata),                        //                         .writedata
		.av_chipselect            (led_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (button_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (button_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (button_s1_agent_m0_read),                 //                         .read
		.uav_write                (button_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (button_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (button_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (button_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (button_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (button_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (button_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (button_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (button_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (button_s1_write),                         //                         .write
		.av_readdata              (button_s1_readdata),                      //                         .readdata
		.av_writedata             (button_s1_writedata),                     //                         .writedata
		.av_chipselect            (button_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_memory_in_csr_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                 //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address              (fifo_memory_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (fifo_memory_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (fifo_memory_in_csr_agent_m0_read),          //                         .read
		.uav_write                (fifo_memory_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest          (fifo_memory_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (fifo_memory_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (fifo_memory_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (fifo_memory_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (fifo_memory_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (fifo_memory_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (fifo_memory_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (fifo_memory_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write                 (fifo_memory_in_csr_write),                  //                         .write
		.av_read                  (fifo_memory_in_csr_read),                   //                         .read
		.av_readdata              (fifo_memory_in_csr_readdata),               //                         .readdata
		.av_writedata             (fifo_memory_in_csr_writedata),              //                         .writedata
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_chipselect            (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_memory_in_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                            //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (fifo_memory_in_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount           (fifo_memory_in_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read                 (fifo_memory_in_agent_m0_read),                                         //                         .read
		.uav_write                (fifo_memory_in_agent_m0_write),                                        //                         .write
		.uav_waitrequest          (fifo_memory_in_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid        (fifo_memory_in_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable           (fifo_memory_in_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata             (fifo_memory_in_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata            (fifo_memory_in_agent_m0_writedata),                                    //                         .writedata
		.uav_lock                 (fifo_memory_in_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess          (fifo_memory_in_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_write                 (fifo_memory_in_write),                                                 //      avalon_anti_slave_0.write
		.av_writedata             (fifo_memory_in_writedata),                                             //                         .writedata
		.av_waitrequest           (fifo_memory_in_waitrequest),                                           //                         .waitrequest
		.av_address               (),                                                                     //              (terminated)
		.av_read                  (),                                                                     //              (terminated)
		.av_readdata              (64'b0000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_chipselect            (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_memory_out_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (fifo_memory_out_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount           (fifo_memory_out_agent_m0_burstcount),     //                         .burstcount
		.uav_read                 (fifo_memory_out_agent_m0_read),           //                         .read
		.uav_write                (fifo_memory_out_agent_m0_write),          //                         .write
		.uav_waitrequest          (fifo_memory_out_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid        (fifo_memory_out_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable           (fifo_memory_out_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata             (fifo_memory_out_agent_m0_readdata),       //                         .readdata
		.uav_writedata            (fifo_memory_out_agent_m0_writedata),      //                         .writedata
		.uav_lock                 (fifo_memory_out_agent_m0_lock),           //                         .lock
		.uav_debugaccess          (fifo_memory_out_agent_m0_debugaccess),    //                         .debugaccess
		.av_read                  (fifo_memory_out_read),                    //      avalon_anti_slave_0.read
		.av_readdata              (fifo_memory_out_readdata),                //                         .readdata
		.av_waitrequest           (fifo_memory_out_waitrequest),             //                         .waitrequest
		.av_address               (),                                        //              (terminated)
		.av_write                 (),                                        //              (terminated)
		.av_writedata             (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_chipselect            (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interpo_4_0_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (interpo_4_0_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (interpo_4_0_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (interpo_4_0_s1_agent_m0_read),            //                         .read
		.uav_write                (interpo_4_0_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (interpo_4_0_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (interpo_4_0_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (interpo_4_0_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (interpo_4_0_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (interpo_4_0_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (interpo_4_0_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (interpo_4_0_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (Interpo_4_0_s1_address),                  //      avalon_anti_slave_0.address
		.av_write                 (Interpo_4_0_s1_write),                    //                         .write
		.av_readdata              (Interpo_4_0_s1_readdata),                 //                         .readdata
		.av_writedata             (Interpo_4_0_s1_writedata),                //                         .writedata
		.av_byteenable            (Interpo_4_0_s1_byteenable),               //                         .byteenable
		.av_chipselect            (Interpo_4_0_s1_chipselect),               //                         .chipselect
		.av_clken                 (Interpo_4_0_s1_clken),                    //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interpo_5_0_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (interpo_5_0_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (interpo_5_0_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (interpo_5_0_s1_agent_m0_read),            //                         .read
		.uav_write                (interpo_5_0_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (interpo_5_0_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (interpo_5_0_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (interpo_5_0_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (interpo_5_0_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (interpo_5_0_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (interpo_5_0_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (interpo_5_0_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (Interpo_5_0_s1_address),                  //      avalon_anti_slave_0.address
		.av_write                 (Interpo_5_0_s1_write),                    //                         .write
		.av_readdata              (Interpo_5_0_s1_readdata),                 //                         .readdata
		.av_writedata             (Interpo_5_0_s1_writedata),                //                         .writedata
		.av_byteenable            (Interpo_5_0_s1_byteenable),               //                         .byteenable
		.av_chipselect            (Interpo_5_0_s1_chipselect),               //                         .chipselect
		.av_clken                 (Interpo_5_0_s1_clken),                    //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interpo_5_1_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (interpo_5_1_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (interpo_5_1_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (interpo_5_1_s1_agent_m0_read),            //                         .read
		.uav_write                (interpo_5_1_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (interpo_5_1_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (interpo_5_1_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (interpo_5_1_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (interpo_5_1_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (interpo_5_1_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (interpo_5_1_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (interpo_5_1_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (Interpo_5_1_s1_address),                  //      avalon_anti_slave_0.address
		.av_write                 (Interpo_5_1_s1_write),                    //                         .write
		.av_readdata              (Interpo_5_1_s1_readdata),                 //                         .readdata
		.av_writedata             (Interpo_5_1_s1_writedata),                //                         .writedata
		.av_byteenable            (Interpo_5_1_s1_byteenable),               //                         .byteenable
		.av_chipselect            (Interpo_5_1_s1_chipselect),               //                         .chipselect
		.av_clken                 (Interpo_5_1_s1_clken),                    //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interpo_5_2_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (interpo_5_2_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (interpo_5_2_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (interpo_5_2_s1_agent_m0_read),            //                         .read
		.uav_write                (interpo_5_2_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (interpo_5_2_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (interpo_5_2_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (interpo_5_2_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (interpo_5_2_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (interpo_5_2_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (interpo_5_2_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (interpo_5_2_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (Interpo_5_2_s1_address),                  //      avalon_anti_slave_0.address
		.av_write                 (Interpo_5_2_s1_write),                    //                         .write
		.av_readdata              (Interpo_5_2_s1_readdata),                 //                         .readdata
		.av_writedata             (Interpo_5_2_s1_writedata),                //                         .writedata
		.av_byteenable            (Interpo_5_2_s1_byteenable),               //                         .byteenable
		.av_chipselect            (Interpo_5_2_s1_chipselect),               //                         .chipselect
		.av_clken                 (Interpo_5_2_s1_clken),                    //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interpo_5_3_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (interpo_5_3_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (interpo_5_3_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (interpo_5_3_s1_agent_m0_read),            //                         .read
		.uav_write                (interpo_5_3_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (interpo_5_3_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (interpo_5_3_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (interpo_5_3_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (interpo_5_3_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (interpo_5_3_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (interpo_5_3_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (interpo_5_3_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (Interpo_5_3_s1_address),                  //      avalon_anti_slave_0.address
		.av_write                 (Interpo_5_3_s1_write),                    //                         .write
		.av_readdata              (Interpo_5_3_s1_readdata),                 //                         .readdata
		.av_writedata             (Interpo_5_3_s1_writedata),                //                         .writedata
		.av_byteenable            (Interpo_5_3_s1_byteenable),               //                         .byteenable
		.av_chipselect            (Interpo_5_3_s1_chipselect),               //                         .chipselect
		.av_clken                 (Interpo_5_3_s1_clken),                    //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adapt_fir_mem_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (adapt_fir_mem_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (adapt_fir_mem_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (adapt_fir_mem_s1_agent_m0_read),          //                         .read
		.uav_write                (adapt_fir_mem_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (adapt_fir_mem_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (adapt_fir_mem_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (adapt_fir_mem_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (adapt_fir_mem_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (adapt_fir_mem_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (adapt_fir_mem_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (adapt_fir_mem_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Adapt_FIR_mem_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (Adapt_FIR_mem_s1_write),                  //                         .write
		.av_readdata              (Adapt_FIR_mem_s1_readdata),               //                         .readdata
		.av_writedata             (Adapt_FIR_mem_s1_writedata),              //                         .writedata
		.av_byteenable            (Adapt_FIR_mem_s1_byteenable),             //                         .byteenable
		.av_chipselect            (Adapt_FIR_mem_s1_chipselect),             //                         .chipselect
		.av_clken                 (Adapt_FIR_mem_s1_clken),                  //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) micfilter_cntl_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (micfilter_cntl_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (micfilter_cntl_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (micfilter_cntl_s1_agent_m0_read),          //                         .read
		.uav_write                (micfilter_cntl_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (micfilter_cntl_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (micfilter_cntl_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (micfilter_cntl_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (micfilter_cntl_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (micfilter_cntl_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (micfilter_cntl_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (micfilter_cntl_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (micFilter_cntl_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (micFilter_cntl_s1_write),                  //                         .write
		.av_readdata              (micFilter_cntl_s1_readdata),               //                         .readdata
		.av_writedata             (micFilter_cntl_s1_writedata),              //                         .writedata
		.av_chipselect            (micFilter_cntl_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                         //              (terminated)
		.av_begintransfer         (),                                         //              (terminated)
		.av_beginbursttransfer    (),                                         //              (terminated)
		.av_burstcount            (),                                         //              (terminated)
		.av_byteenable            (),                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                     //              (terminated)
		.av_waitrequest           (1'b0),                                     //              (terminated)
		.av_writebyteenable       (),                                         //              (terminated)
		.av_lock                  (),                                         //              (terminated)
		.av_clken                 (),                                         //              (terminated)
		.uav_clken                (1'b0),                                     //              (terminated)
		.av_debugaccess           (),                                         //              (terminated)
		.av_outputenable          (),                                         //              (terminated)
		.uav_response             (),                                         //              (terminated)
		.av_response              (2'b00),                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                     //              (terminated)
		.uav_writeresponsevalid   (),                                         //              (terminated)
		.av_writeresponserequest  (),                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) micfilter_rst_s1_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (micfilter_rst_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (micfilter_rst_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (micfilter_rst_s1_agent_m0_read),          //                         .read
		.uav_write                (micfilter_rst_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (micfilter_rst_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (micfilter_rst_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (micfilter_rst_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (micfilter_rst_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (micfilter_rst_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (micfilter_rst_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (micfilter_rst_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (micFilter_rst_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (micFilter_rst_s1_write),                  //                         .write
		.av_readdata              (micFilter_rst_s1_readdata),               //                         .readdata
		.av_writedata             (micFilter_rst_s1_writedata),              //                         .writedata
		.av_chipselect            (micFilter_rst_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pcie_ip_txs_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                   //                      clk.clk
		.reset                    (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pcie_ip_txs_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount           (pcie_ip_txs_agent_m0_burstcount),                             //                         .burstcount
		.uav_read                 (pcie_ip_txs_agent_m0_read),                                   //                         .read
		.uav_write                (pcie_ip_txs_agent_m0_write),                                  //                         .write
		.uav_waitrequest          (pcie_ip_txs_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid        (pcie_ip_txs_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable           (pcie_ip_txs_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata             (pcie_ip_txs_agent_m0_readdata),                               //                         .readdata
		.uav_writedata            (pcie_ip_txs_agent_m0_writedata),                              //                         .writedata
		.uav_lock                 (pcie_ip_txs_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess          (pcie_ip_txs_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address               (pcie_ip_txs_address),                                         //      avalon_anti_slave_0.address
		.av_write                 (pcie_ip_txs_write),                                           //                         .write
		.av_read                  (pcie_ip_txs_read),                                            //                         .read
		.av_readdata              (pcie_ip_txs_readdata),                                        //                         .readdata
		.av_writedata             (pcie_ip_txs_writedata),                                       //                         .writedata
		.av_burstcount            (pcie_ip_txs_burstcount),                                      //                         .burstcount
		.av_byteenable            (pcie_ip_txs_byteenable),                                      //                         .byteenable
		.av_readdatavalid         (pcie_ip_txs_readdatavalid),                                   //                         .readdatavalid
		.av_waitrequest           (pcie_ip_txs_waitrequest),                                     //                         .waitrequest
		.av_chipselect            (pcie_ip_txs_chipselect),                                      //                         .chipselect
		.av_begintransfer         (),                                                            //              (terminated)
		.av_beginbursttransfer    (),                                                            //              (terminated)
		.av_writebyteenable       (),                                                            //              (terminated)
		.av_lock                  (),                                                            //              (terminated)
		.av_clken                 (),                                                            //              (terminated)
		.uav_clken                (1'b0),                                                        //              (terminated)
		.av_debugaccess           (),                                                            //              (terminated)
		.av_outputenable          (),                                                            //              (terminated)
		.uav_response             (),                                                            //              (terminated)
		.av_response              (2'b00),                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                        //              (terminated)
		.uav_writeresponsevalid   (),                                                            //              (terminated)
		.av_writeresponserequest  (),                                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (141),
		.PKT_PROTECTION_L          (139),
		.PKT_BEGIN_BURST           (128),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_THREAD_ID_H           (138),
		.PKT_THREAD_ID_L           (138),
		.PKT_CACHE_H               (145),
		.PKT_CACHE_L               (142),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_RESPONSE_STATUS_H     (147),
		.PKT_RESPONSE_STATUS_L     (146),
		.PKT_ORI_BURST_SIZE_L      (148),
		.PKT_ORI_BURST_SIZE_H      (150),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_ip_bar1_0_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                         //       clk.clk
		.reset                   (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.av_address              (pcie_ip_bar1_0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pcie_ip_bar1_0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pcie_ip_bar1_0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pcie_ip_bar1_0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pcie_ip_bar1_0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pcie_ip_bar1_0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pcie_ip_bar1_0_agent_cp_ready),                                     //          .ready
		.rp_valid                (pcie_ip_bar1_0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (pcie_ip_bar1_0_limiter_rsp_src_data),                               //          .data
		.rp_channel              (pcie_ip_bar1_0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (pcie_ip_bar1_0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (pcie_ip_bar1_0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (pcie_ip_bar1_0_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                  // (terminated)
		.av_writeresponserequest (1'b0),                                                              // (terminated)
		.av_writeresponsevalid   ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (141),
		.PKT_PROTECTION_L          (139),
		.PKT_BEGIN_BURST           (128),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_THREAD_ID_H           (138),
		.PKT_THREAD_ID_L           (138),
		.PKT_CACHE_H               (145),
		.PKT_CACHE_L               (142),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_RESPONSE_STATUS_H     (147),
		.PKT_RESPONSE_STATUS_L     (146),
		.PKT_ORI_BURST_SIZE_L      (148),
		.PKT_ORI_BURST_SIZE_H      (150),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_m_read_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address              (sgdma_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid                (sgdma_m_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (sgdma_m_read_limiter_rsp_src_data),                               //          .data
		.rp_channel              (sgdma_m_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (sgdma_m_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (sgdma_m_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (sgdma_m_read_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                // (terminated)
		.av_writeresponserequest (1'b0),                                                            // (terminated)
		.av_writeresponsevalid   ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (141),
		.PKT_PROTECTION_L          (139),
		.PKT_BEGIN_BURST           (128),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_THREAD_ID_H           (138),
		.PKT_THREAD_ID_L           (138),
		.PKT_CACHE_H               (145),
		.PKT_CACHE_L               (142),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_RESPONSE_STATUS_H     (147),
		.PKT_RESPONSE_STATUS_L     (146),
		.PKT_ORI_BURST_SIZE_L      (148),
		.PKT_ORI_BURST_SIZE_H      (150),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_m_write_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address              (sgdma_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_002_src_valid),                                            //        rp.valid
		.rp_data                 (rsp_mux_002_src_data),                                             //          .data
		.rp_channel              (rsp_mux_002_src_channel),                                          //          .channel
		.rp_startofpacket        (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.rp_endofpacket          (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.rp_ready                (rsp_mux_002_src_ready),                                            //          .ready
		.av_response             (),                                                                 // (terminated)
		.av_writeresponserequest (1'b0),                                                             // (terminated)
		.av_writeresponsevalid   ()                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BEGIN_BURST           (92),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_THREAD_ID_H           (102),
		.PKT_THREAD_ID_L           (102),
		.PKT_CACHE_H               (109),
		.PKT_CACHE_L               (106),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_read_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address              (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_003_src_valid),                                                    //        rp.valid
		.rp_data                 (rsp_mux_003_src_data),                                                     //          .data
		.rp_channel              (rsp_mux_003_src_channel),                                                  //          .channel
		.rp_startofpacket        (rsp_mux_003_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket          (rsp_mux_003_src_endofpacket),                                              //          .endofpacket
		.rp_ready                (rsp_mux_003_src_ready),                                                    //          .ready
		.av_response             (),                                                                         // (terminated)
		.av_writeresponserequest (1'b0),                                                                     // (terminated)
		.av_writeresponsevalid   ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BEGIN_BURST           (92),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_THREAD_ID_H           (102),
		.PKT_THREAD_ID_L           (102),
		.PKT_CACHE_H               (109),
		.PKT_CACHE_L               (106),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_write_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_004_src_valid),                                                     //        rp.valid
		.rp_data                 (rsp_mux_004_src_data),                                                      //          .data
		.rp_channel              (rsp_mux_004_src_channel),                                                   //          .channel
		.rp_startofpacket        (rsp_mux_004_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket          (rsp_mux_004_src_endofpacket),                                               //          .endofpacket
		.rp_ready                (rsp_mux_004_src_ready),                                                     //          .ready
		.av_response             (),                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fir_memory_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                         //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fir_memory_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fir_memory_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fir_memory_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fir_memory_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fir_memory_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (fir_memory_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fir_memory_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fir_memory_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (fir_memory_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fir_memory_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (fir_memory_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (fir_memory_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fir_memory_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (fir_memory_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (fir_memory_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (fir_memory_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fir_memory_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fir_memory_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fir_memory_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fir_memory_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fir_memory_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fir_memory_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fir_memory_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fir_memory_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fir_memory_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fir_memory_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fir_memory_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fir_memory_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fir_memory_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fir_memory_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fir_memory_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fir_memory_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (fir_memory_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fir_memory_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (fir_memory_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (fir_memory_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fir_memory_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fir_memory_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fir_memory_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                      //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fir_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (fir_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (fir_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fir_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fir_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fir_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fir_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fir_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fir_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fir_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) led_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                  //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (led_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (led_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (led_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (led_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (led_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (led_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (led_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (led_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (led_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (led_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (led_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) button_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                     //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (button_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (button_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (button_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (button_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (button_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (button_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (button_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (button_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (button_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (button_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (button_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (button_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (button_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (button_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (button_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (button_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (button_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (button_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (button_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (button_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (button_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (button_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (button_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (button_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (button_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (button_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (button_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (button_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (button_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (button_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (button_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (button_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (button_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (button_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (button_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (button_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (button_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                  //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fifo_memory_in_csr_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                              //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (fifo_memory_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_memory_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_memory_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_memory_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_memory_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_memory_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_memory_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_memory_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_memory_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_memory_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_memory_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_memory_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_memory_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_memory_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_memory_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_memory_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_memory_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_memory_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_memory_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_memory_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_memory_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_memory_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_memory_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_memory_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_memory_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_memory_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_memory_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_memory_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_memory_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_memory_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_memory_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_memory_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (fifo_memory_in_csr_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fifo_memory_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (fifo_memory_in_csr_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (fifo_memory_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_memory_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_memory_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponserequest (),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_memory_in_csr_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                           //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (fifo_memory_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_memory_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_memory_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_memory_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_memory_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_memory_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_memory_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_memory_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_memory_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_memory_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (128),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_PROTECTION_H          (141),
		.PKT_PROTECTION_L          (139),
		.PKT_RESPONSE_STATUS_H     (147),
		.PKT_RESPONSE_STATUS_L     (146),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_ORI_BURST_SIZE_L      (148),
		.PKT_ORI_BURST_SIZE_H      (150),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (151),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fifo_memory_in_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                          //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (fifo_memory_in_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_memory_in_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_memory_in_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_memory_in_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_memory_in_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_memory_in_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_memory_in_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_memory_in_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_memory_in_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_memory_in_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_memory_in_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_memory_in_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_memory_in_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_memory_in_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_memory_in_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_memory_in_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_memory_in_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_memory_in_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_memory_in_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_memory_in_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_memory_in_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_memory_in_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_memory_in_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_memory_in_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_memory_in_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_memory_in_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_memory_in_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_memory_in_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_memory_in_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_memory_in_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_memory_in_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_memory_in_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (fifo_memory_in_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fifo_memory_in_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (fifo_memory_in_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (fifo_memory_in_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_memory_in_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_memory_in_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (152),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_memory_in_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                       //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (fifo_memory_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_memory_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_memory_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_memory_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_memory_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_memory_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_memory_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_memory_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_memory_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_memory_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (128),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_PROTECTION_H          (141),
		.PKT_PROTECTION_L          (139),
		.PKT_RESPONSE_STATUS_H     (147),
		.PKT_RESPONSE_STATUS_L     (146),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_ORI_BURST_SIZE_L      (148),
		.PKT_ORI_BURST_SIZE_H      (150),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (151),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fifo_memory_out_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                           //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (fifo_memory_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_memory_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_memory_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_memory_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_memory_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_memory_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_memory_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_memory_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_memory_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_memory_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_memory_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_memory_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_memory_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_memory_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_memory_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_memory_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_memory_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_memory_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_memory_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_memory_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_memory_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_memory_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_memory_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_memory_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_memory_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_memory_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_memory_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_memory_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_memory_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_memory_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_memory_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_memory_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (fifo_memory_out_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fifo_memory_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (fifo_memory_out_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (fifo_memory_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_memory_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_memory_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (152),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_memory_out_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                        //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (fifo_memory_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_memory_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_memory_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_memory_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_memory_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_memory_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_memory_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_memory_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_memory_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_memory_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) interpo_4_0_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                          //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (interpo_4_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interpo_4_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interpo_4_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interpo_4_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interpo_4_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interpo_4_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interpo_4_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interpo_4_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interpo_4_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interpo_4_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interpo_4_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interpo_4_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interpo_4_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interpo_4_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interpo_4_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interpo_4_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interpo_4_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interpo_4_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interpo_4_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interpo_4_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interpo_4_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interpo_4_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interpo_4_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interpo_4_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interpo_4_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interpo_4_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interpo_4_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interpo_4_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interpo_4_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interpo_4_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interpo_4_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interpo_4_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (interpo_4_0_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (interpo_4_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (interpo_4_0_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (interpo_4_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interpo_4_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interpo_4_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interpo_4_0_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                       //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (interpo_4_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interpo_4_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interpo_4_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interpo_4_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interpo_4_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interpo_4_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interpo_4_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interpo_4_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interpo_4_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interpo_4_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) interpo_5_0_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                          //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (interpo_5_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interpo_5_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interpo_5_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interpo_5_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interpo_5_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interpo_5_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interpo_5_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interpo_5_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interpo_5_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interpo_5_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interpo_5_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interpo_5_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interpo_5_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interpo_5_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interpo_5_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interpo_5_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interpo_5_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interpo_5_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interpo_5_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interpo_5_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interpo_5_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interpo_5_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interpo_5_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interpo_5_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interpo_5_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interpo_5_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interpo_5_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interpo_5_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interpo_5_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interpo_5_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interpo_5_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interpo_5_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (interpo_5_0_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (interpo_5_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (interpo_5_0_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (interpo_5_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interpo_5_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interpo_5_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interpo_5_0_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                       //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (interpo_5_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interpo_5_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interpo_5_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interpo_5_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interpo_5_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interpo_5_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interpo_5_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interpo_5_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interpo_5_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interpo_5_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) interpo_5_1_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                          //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (interpo_5_1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interpo_5_1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interpo_5_1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interpo_5_1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interpo_5_1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interpo_5_1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interpo_5_1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interpo_5_1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interpo_5_1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interpo_5_1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interpo_5_1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interpo_5_1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interpo_5_1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interpo_5_1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interpo_5_1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interpo_5_1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interpo_5_1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interpo_5_1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interpo_5_1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interpo_5_1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interpo_5_1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interpo_5_1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interpo_5_1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interpo_5_1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interpo_5_1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interpo_5_1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interpo_5_1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interpo_5_1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interpo_5_1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interpo_5_1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interpo_5_1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interpo_5_1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (interpo_5_1_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (interpo_5_1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (interpo_5_1_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (interpo_5_1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interpo_5_1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interpo_5_1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interpo_5_1_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                       //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (interpo_5_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interpo_5_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interpo_5_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interpo_5_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interpo_5_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interpo_5_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interpo_5_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interpo_5_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interpo_5_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interpo_5_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) interpo_5_2_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                          //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (interpo_5_2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interpo_5_2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interpo_5_2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interpo_5_2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interpo_5_2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interpo_5_2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interpo_5_2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interpo_5_2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interpo_5_2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interpo_5_2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interpo_5_2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interpo_5_2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interpo_5_2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interpo_5_2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interpo_5_2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interpo_5_2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interpo_5_2_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interpo_5_2_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interpo_5_2_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interpo_5_2_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interpo_5_2_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interpo_5_2_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interpo_5_2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interpo_5_2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interpo_5_2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interpo_5_2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interpo_5_2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interpo_5_2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interpo_5_2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interpo_5_2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interpo_5_2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interpo_5_2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (interpo_5_2_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (interpo_5_2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (interpo_5_2_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (interpo_5_2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interpo_5_2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interpo_5_2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interpo_5_2_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                       //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (interpo_5_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interpo_5_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interpo_5_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interpo_5_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interpo_5_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interpo_5_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interpo_5_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interpo_5_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interpo_5_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interpo_5_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) interpo_5_3_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                          //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (interpo_5_3_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interpo_5_3_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interpo_5_3_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interpo_5_3_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interpo_5_3_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interpo_5_3_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interpo_5_3_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interpo_5_3_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interpo_5_3_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interpo_5_3_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interpo_5_3_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interpo_5_3_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interpo_5_3_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interpo_5_3_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interpo_5_3_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interpo_5_3_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interpo_5_3_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interpo_5_3_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interpo_5_3_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interpo_5_3_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interpo_5_3_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interpo_5_3_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interpo_5_3_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interpo_5_3_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interpo_5_3_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interpo_5_3_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interpo_5_3_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interpo_5_3_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interpo_5_3_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interpo_5_3_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interpo_5_3_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interpo_5_3_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (interpo_5_3_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (interpo_5_3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (interpo_5_3_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (interpo_5_3_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interpo_5_3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interpo_5_3_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interpo_5_3_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                       //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (interpo_5_3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interpo_5_3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interpo_5_3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interpo_5_3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interpo_5_3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interpo_5_3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interpo_5_3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interpo_5_3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interpo_5_3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interpo_5_3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) adapt_fir_mem_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                            //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (adapt_fir_mem_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (adapt_fir_mem_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (adapt_fir_mem_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (adapt_fir_mem_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (adapt_fir_mem_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (adapt_fir_mem_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (adapt_fir_mem_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (adapt_fir_mem_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (adapt_fir_mem_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (adapt_fir_mem_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (adapt_fir_mem_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (adapt_fir_mem_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (adapt_fir_mem_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (adapt_fir_mem_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (adapt_fir_mem_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (adapt_fir_mem_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (adapt_fir_mem_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (adapt_fir_mem_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (adapt_fir_mem_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (adapt_fir_mem_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (adapt_fir_mem_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (adapt_fir_mem_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (adapt_fir_mem_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (adapt_fir_mem_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (adapt_fir_mem_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (adapt_fir_mem_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (adapt_fir_mem_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (adapt_fir_mem_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (adapt_fir_mem_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (adapt_fir_mem_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (adapt_fir_mem_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (adapt_fir_mem_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (adapt_fir_mem_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (adapt_fir_mem_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (adapt_fir_mem_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (adapt_fir_mem_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adapt_fir_mem_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (adapt_fir_mem_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adapt_fir_mem_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                         //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (adapt_fir_mem_s1_agent_rf_source_data),             //        in.data
		.in_valid          (adapt_fir_mem_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (adapt_fir_mem_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adapt_fir_mem_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adapt_fir_mem_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adapt_fir_mem_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adapt_fir_mem_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adapt_fir_mem_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adapt_fir_mem_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adapt_fir_mem_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) micfilter_cntl_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                             //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (micfilter_cntl_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (micfilter_cntl_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (micfilter_cntl_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (micfilter_cntl_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (micfilter_cntl_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (micfilter_cntl_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (micfilter_cntl_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (micfilter_cntl_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (micfilter_cntl_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (micfilter_cntl_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (micfilter_cntl_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (micfilter_cntl_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (micfilter_cntl_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (micfilter_cntl_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (micfilter_cntl_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (micfilter_cntl_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (micfilter_cntl_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (micfilter_cntl_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (micfilter_cntl_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (micfilter_cntl_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (micfilter_cntl_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (micfilter_cntl_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (micfilter_cntl_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (micfilter_cntl_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (micfilter_cntl_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (micfilter_cntl_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (micfilter_cntl_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (micfilter_cntl_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (micfilter_cntl_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (micfilter_cntl_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (micfilter_cntl_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (micfilter_cntl_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (micfilter_cntl_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (micfilter_cntl_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (micfilter_cntl_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (micfilter_cntl_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (micfilter_cntl_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (micfilter_cntl_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponserequest (),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) micfilter_cntl_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                          //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (micfilter_cntl_s1_agent_rf_source_data),             //        in.data
		.in_valid          (micfilter_cntl_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (micfilter_cntl_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (micfilter_cntl_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (micfilter_cntl_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (micfilter_cntl_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (micfilter_cntl_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (micfilter_cntl_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (micfilter_cntl_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (micfilter_cntl_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_ORI_BURST_SIZE_H      (114),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (115),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) micfilter_rst_s1_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                            //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (micfilter_rst_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (micfilter_rst_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (micfilter_rst_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (micfilter_rst_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (micfilter_rst_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (micfilter_rst_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (micfilter_rst_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (micfilter_rst_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (micfilter_rst_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (micfilter_rst_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (micfilter_rst_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (micfilter_rst_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (micfilter_rst_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (micfilter_rst_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (micfilter_rst_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (micfilter_rst_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (micfilter_rst_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (micfilter_rst_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (micfilter_rst_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (micfilter_rst_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (micfilter_rst_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (micfilter_rst_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (micfilter_rst_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (micfilter_rst_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (micfilter_rst_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (micfilter_rst_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (micfilter_rst_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (micfilter_rst_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (micfilter_rst_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (micfilter_rst_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (micfilter_rst_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (micfilter_rst_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (micfilter_rst_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (micfilter_rst_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (micfilter_rst_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (micfilter_rst_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (micfilter_rst_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (micfilter_rst_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (116),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) micfilter_rst_s1_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                         //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (micfilter_rst_s1_agent_rf_source_data),             //        in.data
		.in_valid          (micfilter_rst_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (micfilter_rst_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (micfilter_rst_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (micfilter_rst_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (micfilter_rst_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (micfilter_rst_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (micfilter_rst_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (micfilter_rst_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (micfilter_rst_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (128),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_PROTECTION_H          (141),
		.PKT_PROTECTION_L          (139),
		.PKT_RESPONSE_STATUS_H     (147),
		.PKT_RESPONSE_STATUS_L     (146),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_ORI_BURST_SIZE_L      (148),
		.PKT_ORI_BURST_SIZE_H      (150),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (151),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_ip_txs_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                   //             clk.clk
		.reset                   (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pcie_ip_txs_agent_m0_address),                                //              m0.address
		.m0_burstcount           (pcie_ip_txs_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (pcie_ip_txs_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (pcie_ip_txs_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (pcie_ip_txs_agent_m0_lock),                                   //                .lock
		.m0_readdata             (pcie_ip_txs_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (pcie_ip_txs_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (pcie_ip_txs_agent_m0_read),                                   //                .read
		.m0_waitrequest          (pcie_ip_txs_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (pcie_ip_txs_agent_m0_writedata),                              //                .writedata
		.m0_write                (pcie_ip_txs_agent_m0_write),                                  //                .write
		.rp_endofpacket          (pcie_ip_txs_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (pcie_ip_txs_agent_rp_ready),                                  //                .ready
		.rp_valid                (pcie_ip_txs_agent_rp_valid),                                  //                .valid
		.rp_data                 (pcie_ip_txs_agent_rp_data),                                   //                .data
		.rp_startofpacket        (pcie_ip_txs_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                     //                .channel
		.rf_sink_ready           (pcie_ip_txs_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (pcie_ip_txs_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (pcie_ip_txs_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (pcie_ip_txs_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (pcie_ip_txs_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (pcie_ip_txs_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (pcie_ip_txs_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (pcie_ip_txs_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (pcie_ip_txs_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (pcie_ip_txs_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (pcie_ip_txs_agent_rdata_fifo_src_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pcie_ip_txs_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_sink_data    (pcie_ip_txs_agent_rdata_fifo_src_data),                       //                .data
		.rdata_fifo_src_ready    (pcie_ip_txs_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_ip_txs_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (pcie_ip_txs_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponserequest (),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (152),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_ip_txs_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset             (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcie_ip_txs_agent_rf_source_data),                            //        in.data
		.in_valid          (pcie_ip_txs_agent_rf_source_valid),                           //          .valid
		.in_ready          (pcie_ip_txs_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (pcie_ip_txs_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (pcie_ip_txs_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (pcie_ip_txs_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (pcie_ip_txs_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (pcie_ip_txs_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (pcie_ip_txs_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (pcie_ip_txs_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	de2i_150_qsys_mm_interconnect_0_router router (
		.sink_ready         (pcie_ip_bar1_0_agent_cp_ready),                               //      sink.ready
		.sink_valid         (pcie_ip_bar1_0_agent_cp_valid),                               //          .valid
		.sink_data          (pcie_ip_bar1_0_agent_cp_data),                                //          .data
		.sink_startofpacket (pcie_ip_bar1_0_agent_cp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pcie_ip_bar1_0_agent_cp_endofpacket),                         //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                            //       src.ready
		.src_valid          (router_src_valid),                                            //          .valid
		.src_data           (router_src_data),                                             //          .data
		.src_channel        (router_src_channel),                                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                       //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sgdma_m_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (sgdma_m_read_agent_cp_valid),             //          .valid
		.sink_data          (sgdma_m_read_agent_cp_data),              //          .data
		.sink_startofpacket (sgdma_m_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_m_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sgdma_m_write_agent_cp_ready),            //      sink.ready
		.sink_valid         (sgdma_m_write_agent_cp_valid),            //          .valid
		.sink_data          (sgdma_m_write_agent_cp_data),             //          .data
		.sink_startofpacket (sgdma_m_write_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sgdma_m_write_agent_cp_endofpacket),      //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                    //       src.ready
		.src_valid          (router_002_src_valid),                    //          .valid
		.src_data           (router_002_src_data),                     //          .data
		.src_channel        (router_002_src_channel),                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sgdma_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                    //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (sgdma_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                     //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (fir_memory_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (fir_memory_s1_agent_rp_valid),            //          .valid
		.sink_data          (fir_memory_s1_agent_rp_data),             //          .data
		.sink_startofpacket (fir_memory_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fir_memory_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                    //       src.ready
		.src_valid          (router_005_src_valid),                    //          .valid
		.src_data           (router_005_src_data),                     //          .data
		.src_channel        (router_005_src_channel),                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (led_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                   //          .valid
		.sink_data          (led_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                    //       src.ready
		.src_valid          (router_006_src_valid),                    //          .valid
		.src_data           (router_006_src_data),                     //          .data
		.src_channel        (router_006_src_channel),                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (button_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (button_s1_agent_rp_valid),                //          .valid
		.sink_data          (button_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (button_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (button_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                    //       src.ready
		.src_valid          (router_007_src_valid),                    //          .valid
		.src_data           (router_007_src_data),                     //          .data
		.src_channel        (router_007_src_channel),                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (fifo_memory_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_memory_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_memory_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_memory_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_memory_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                 //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_008_src_ready),                      //       src.ready
		.src_valid          (router_008_src_valid),                      //          .valid
		.src_data           (router_008_src_data),                       //          .data
		.src_channel        (router_008_src_channel),                    //          .channel
		.src_startofpacket  (router_008_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                 //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (fifo_memory_in_agent_rp_ready),           //      sink.ready
		.sink_valid         (fifo_memory_in_agent_rp_valid),           //          .valid
		.sink_data          (fifo_memory_in_agent_rp_data),            //          .data
		.sink_startofpacket (fifo_memory_in_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (fifo_memory_in_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                    //       src.ready
		.src_valid          (router_009_src_valid),                    //          .valid
		.src_data           (router_009_src_data),                     //          .data
		.src_channel        (router_009_src_channel),                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (fifo_memory_out_agent_rp_ready),          //      sink.ready
		.sink_valid         (fifo_memory_out_agent_rp_valid),          //          .valid
		.sink_data          (fifo_memory_out_agent_rp_data),           //          .data
		.sink_startofpacket (fifo_memory_out_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (fifo_memory_out_agent_rp_endofpacket),    //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                    //       src.ready
		.src_valid          (router_010_src_valid),                    //          .valid
		.src_data           (router_010_src_data),                     //          .data
		.src_channel        (router_010_src_channel),                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_011 (
		.sink_ready         (interpo_4_0_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (interpo_4_0_s1_agent_rp_valid),           //          .valid
		.sink_data          (interpo_4_0_s1_agent_rp_data),            //          .data
		.sink_startofpacket (interpo_4_0_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (interpo_4_0_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                    //       src.ready
		.src_valid          (router_011_src_valid),                    //          .valid
		.src_data           (router_011_src_data),                     //          .data
		.src_channel        (router_011_src_channel),                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_012 (
		.sink_ready         (interpo_5_0_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (interpo_5_0_s1_agent_rp_valid),           //          .valid
		.sink_data          (interpo_5_0_s1_agent_rp_data),            //          .data
		.sink_startofpacket (interpo_5_0_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (interpo_5_0_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                    //       src.ready
		.src_valid          (router_012_src_valid),                    //          .valid
		.src_data           (router_012_src_data),                     //          .data
		.src_channel        (router_012_src_channel),                  //          .channel
		.src_startofpacket  (router_012_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_013 (
		.sink_ready         (interpo_5_1_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (interpo_5_1_s1_agent_rp_valid),           //          .valid
		.sink_data          (interpo_5_1_s1_agent_rp_data),            //          .data
		.sink_startofpacket (interpo_5_1_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (interpo_5_1_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                    //       src.ready
		.src_valid          (router_013_src_valid),                    //          .valid
		.src_data           (router_013_src_data),                     //          .data
		.src_channel        (router_013_src_channel),                  //          .channel
		.src_startofpacket  (router_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_014 (
		.sink_ready         (interpo_5_2_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (interpo_5_2_s1_agent_rp_valid),           //          .valid
		.sink_data          (interpo_5_2_s1_agent_rp_data),            //          .data
		.sink_startofpacket (interpo_5_2_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (interpo_5_2_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                    //       src.ready
		.src_valid          (router_014_src_valid),                    //          .valid
		.src_data           (router_014_src_data),                     //          .data
		.src_channel        (router_014_src_channel),                  //          .channel
		.src_startofpacket  (router_014_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_015 (
		.sink_ready         (interpo_5_3_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (interpo_5_3_s1_agent_rp_valid),           //          .valid
		.sink_data          (interpo_5_3_s1_agent_rp_data),            //          .data
		.sink_startofpacket (interpo_5_3_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (interpo_5_3_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_005 router_016 (
		.sink_ready         (adapt_fir_mem_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (adapt_fir_mem_s1_agent_rp_valid),         //          .valid
		.sink_data          (adapt_fir_mem_s1_agent_rp_data),          //          .data
		.sink_startofpacket (adapt_fir_mem_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (adapt_fir_mem_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                    //       src.ready
		.src_valid          (router_016_src_valid),                    //          .valid
		.src_data           (router_016_src_data),                     //          .data
		.src_channel        (router_016_src_channel),                  //          .channel
		.src_startofpacket  (router_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_006 router_017 (
		.sink_ready         (micfilter_cntl_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (micfilter_cntl_s1_agent_rp_valid),         //          .valid
		.sink_data          (micfilter_cntl_s1_agent_rp_data),          //          .data
		.sink_startofpacket (micfilter_cntl_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (micfilter_cntl_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_017_src_ready),                     //       src.ready
		.src_valid          (router_017_src_valid),                     //          .valid
		.src_data           (router_017_src_data),                      //          .data
		.src_channel        (router_017_src_channel),                   //          .channel
		.src_startofpacket  (router_017_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_006 router_018 (
		.sink_ready         (micfilter_rst_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (micfilter_rst_s1_agent_rp_valid),         //          .valid
		.sink_data          (micfilter_rst_s1_agent_rp_data),          //          .data
		.sink_startofpacket (micfilter_rst_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (micfilter_rst_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                    //       src.ready
		.src_valid          (router_018_src_valid),                    //          .valid
		.src_data           (router_018_src_data),                     //          .data
		.src_channel        (router_018_src_channel),                  //          .channel
		.src_startofpacket  (router_018_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (pcie_ip_txs_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (pcie_ip_txs_agent_rp_valid),                                  //          .valid
		.sink_data          (pcie_ip_txs_agent_rp_data),                                   //          .data
		.sink_startofpacket (pcie_ip_txs_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (pcie_ip_txs_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                        //       src.ready
		.src_valid          (router_019_src_valid),                                        //          .valid
		.src_data           (router_019_src_data),                                         //          .data
		.src_channel        (router_019_src_channel),                                      //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (15),
		.VALID_WIDTH               (15),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.REORDER                   (0)
	) pcie_ip_bar1_0_limiter (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset                  (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                            //          .valid
		.cmd_sink_data          (router_src_data),                                             //          .data
		.cmd_sink_channel       (router_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (pcie_ip_bar1_0_limiter_cmd_src_ready),                        //   cmd_src.ready
		.cmd_src_data           (pcie_ip_bar1_0_limiter_cmd_src_data),                         //          .data
		.cmd_src_channel        (pcie_ip_bar1_0_limiter_cmd_src_channel),                      //          .channel
		.cmd_src_startofpacket  (pcie_ip_bar1_0_limiter_cmd_src_startofpacket),                //          .startofpacket
		.cmd_src_endofpacket    (pcie_ip_bar1_0_limiter_cmd_src_endofpacket),                  //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                           //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                         //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                            //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                     //          .endofpacket
		.rsp_src_ready          (pcie_ip_bar1_0_limiter_rsp_src_ready),                        //   rsp_src.ready
		.rsp_src_valid          (pcie_ip_bar1_0_limiter_rsp_src_valid),                        //          .valid
		.rsp_src_data           (pcie_ip_bar1_0_limiter_rsp_src_data),                         //          .data
		.rsp_src_channel        (pcie_ip_bar1_0_limiter_rsp_src_channel),                      //          .channel
		.rsp_src_startofpacket  (pcie_ip_bar1_0_limiter_rsp_src_startofpacket),                //          .startofpacket
		.rsp_src_endofpacket    (pcie_ip_bar1_0_limiter_rsp_src_endofpacket),                  //          .endofpacket
		.cmd_src_valid          (pcie_ip_bar1_0_limiter_cmd_valid_data)                        // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (134),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (130),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (15),
		.VALID_WIDTH               (15),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.REORDER                   (0)
	) sgdma_m_read_limiter (
		.clk                    (pcie_ip_pcie_core_clk_clk),                  //       clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                       //          .valid
		.cmd_sink_data          (router_001_src_data),                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                 //          .endofpacket
		.cmd_src_ready          (sgdma_m_read_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sgdma_m_read_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sgdma_m_read_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sgdma_m_read_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sgdma_m_read_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                      //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                    //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                       //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.rsp_src_ready          (sgdma_m_read_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sgdma_m_read_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sgdma_m_read_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sgdma_m_read_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sgdma_m_read_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sgdma_m_read_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sgdma_m_read_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) fir_memory_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                         //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                 //          .ready
		.source0_valid         (fir_memory_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fir_memory_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (fir_memory_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fir_memory_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fir_memory_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fir_memory_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) led_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                  //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                       //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                      //          .ready
		.source0_valid         (led_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (led_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (led_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (led_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (led_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (led_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) button_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                     //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                          //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                         //          .ready
		.source0_valid         (button_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (button_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (button_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (button_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (button_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (button_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) fifo_memory_in_csr_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                              //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                  //          .ready
		.source0_valid         (fifo_memory_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_memory_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_memory_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_memory_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_memory_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_memory_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (128),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (120),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) fifo_memory_in_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                          //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                               //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                              //          .ready
		.source0_valid         (fifo_memory_in_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_memory_in_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_memory_in_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_memory_in_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_memory_in_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_memory_in_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (128),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (120),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) fifo_memory_out_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                           //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                               //          .ready
		.source0_valid         (fifo_memory_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_memory_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_memory_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_memory_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_memory_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_memory_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) interpo_4_0_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                          //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                               //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                              //          .ready
		.source0_valid         (interpo_4_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interpo_4_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interpo_4_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interpo_4_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interpo_4_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interpo_4_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) interpo_5_0_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                          //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                               //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                              //          .ready
		.source0_valid         (interpo_5_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interpo_5_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interpo_5_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interpo_5_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interpo_5_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interpo_5_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) interpo_5_1_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                          //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                               //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                              //          .ready
		.source0_valid         (interpo_5_1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interpo_5_1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interpo_5_1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interpo_5_1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interpo_5_1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interpo_5_1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) interpo_5_2_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                          //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                               //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                              //          .ready
		.source0_valid         (interpo_5_2_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interpo_5_2_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interpo_5_2_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interpo_5_2_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interpo_5_2_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interpo_5_2_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) interpo_5_3_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                          //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                               //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                              //          .ready
		.source0_valid         (interpo_5_3_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interpo_5_3_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interpo_5_3_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interpo_5_3_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interpo_5_3_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interpo_5_3_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) adapt_fir_mem_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                            //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                //          .ready
		.source0_valid         (adapt_fir_mem_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (adapt_fir_mem_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (adapt_fir_mem_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (adapt_fir_mem_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (adapt_fir_mem_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (adapt_fir_mem_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) micfilter_cntl_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                             //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                 //          .ready
		.source0_valid         (micfilter_cntl_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (micfilter_cntl_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (micfilter_cntl_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (micfilter_cntl_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (micfilter_cntl_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (micfilter_cntl_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (115),
		.ST_CHANNEL_W              (15),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) micfilter_rst_s1_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                            //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                //          .ready
		.source0_valid         (micfilter_rst_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (micfilter_rst_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (micfilter_rst_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (micfilter_rst_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (micfilter_rst_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (micfilter_rst_s1_burst_adapter_source0_ready)          //          .ready
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                   //        clk.clk
		.reset               (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (pcie_ip_bar1_0_limiter_cmd_src_ready),                        //       sink.ready
		.sink_channel        (pcie_ip_bar1_0_limiter_cmd_src_channel),                      //           .channel
		.sink_data           (pcie_ip_bar1_0_limiter_cmd_src_data),                         //           .data
		.sink_startofpacket  (pcie_ip_bar1_0_limiter_cmd_src_startofpacket),                //           .startofpacket
		.sink_endofpacket    (pcie_ip_bar1_0_limiter_cmd_src_endofpacket),                  //           .endofpacket
		.sink_valid          (pcie_ip_bar1_0_limiter_cmd_valid_data),                       // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                        //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                        //           .valid
		.src0_data           (cmd_demux_src0_data),                                         //           .data
		.src0_channel        (cmd_demux_src0_channel),                                      //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                  //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                        //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                        //           .valid
		.src1_data           (cmd_demux_src1_data),                                         //           .data
		.src1_channel        (cmd_demux_src1_channel),                                      //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                  //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                        //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                        //           .valid
		.src2_data           (cmd_demux_src2_data),                                         //           .data
		.src2_channel        (cmd_demux_src2_channel),                                      //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                  //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                        //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                        //           .valid
		.src3_data           (cmd_demux_src3_data),                                         //           .data
		.src3_channel        (cmd_demux_src3_channel),                                      //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                  //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                        //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                        //           .valid
		.src4_data           (cmd_demux_src4_data),                                         //           .data
		.src4_channel        (cmd_demux_src4_channel),                                      //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                  //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                        //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                        //           .valid
		.src5_data           (cmd_demux_src5_data),                                         //           .data
		.src5_channel        (cmd_demux_src5_channel),                                      //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                  //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                        //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                        //           .valid
		.src6_data           (cmd_demux_src6_data),                                         //           .data
		.src6_channel        (cmd_demux_src6_channel),                                      //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                  //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                        //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                        //           .valid
		.src7_data           (cmd_demux_src7_data),                                         //           .data
		.src7_channel        (cmd_demux_src7_channel),                                      //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                  //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                        //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                        //           .valid
		.src8_data           (cmd_demux_src8_data),                                         //           .data
		.src8_channel        (cmd_demux_src8_channel),                                      //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                  //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                        //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                        //           .valid
		.src9_data           (cmd_demux_src9_data),                                         //           .data
		.src9_channel        (cmd_demux_src9_channel),                                      //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                  //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                       //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                       //           .valid
		.src10_data          (cmd_demux_src10_data),                                        //           .data
		.src10_channel       (cmd_demux_src10_channel),                                     //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                               //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                 //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                       //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                       //           .valid
		.src11_data          (cmd_demux_src11_data),                                        //           .data
		.src11_channel       (cmd_demux_src11_channel),                                     //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                               //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                 //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                       //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                       //           .valid
		.src12_data          (cmd_demux_src12_data),                                        //           .data
		.src12_channel       (cmd_demux_src12_channel),                                     //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                               //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                 //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                       //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                       //           .valid
		.src13_data          (cmd_demux_src13_data),                                        //           .data
		.src13_channel       (cmd_demux_src13_channel),                                     //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                               //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket)                                  //           .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (pcie_ip_pcie_core_clk_clk),                  //        clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),    //  clk_reset.reset
		.sink_ready         (sgdma_m_read_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (sgdma_m_read_limiter_cmd_src_channel),       //           .channel
		.sink_data          (sgdma_m_read_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (sgdma_m_read_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (sgdma_m_read_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (sgdma_m_read_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                   //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //           .valid
		.src0_data          (cmd_demux_001_src0_data),                    //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //           .valid
		.src1_data          (cmd_demux_001_src1_data),                    //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),             //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                   //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                   //           .valid
		.src2_data          (cmd_demux_001_src2_data),                    //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                 //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),           //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),             //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                   //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                   //           .valid
		.src3_data          (cmd_demux_001_src3_data),                    //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                 //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),           //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),             //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                   //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                   //           .valid
		.src4_data          (cmd_demux_001_src4_data),                    //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                 //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),           //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),             //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                   //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                   //           .valid
		.src5_data          (cmd_demux_001_src5_data),                    //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                 //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),           //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),             //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                   //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                   //           .valid
		.src6_data          (cmd_demux_001_src6_data),                    //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                 //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),           //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),             //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                   //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                   //           .valid
		.src7_data          (cmd_demux_001_src7_data),                    //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                 //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),           //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),             //           .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                   //       src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                   //           .valid
		.src8_data          (cmd_demux_001_src8_data),                    //           .data
		.src8_channel       (cmd_demux_001_src8_channel),                 //           .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),           //           .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)              //           .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                //          .valid
		.src1_data          (cmd_demux_002_src1_data),                 //          .data
		.src1_channel       (cmd_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                //          .valid
		.src2_data          (cmd_demux_002_src2_data),                 //          .data
		.src2_channel       (cmd_demux_002_src2_channel),              //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                //      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                //          .valid
		.src3_data          (cmd_demux_002_src3_data),                 //          .data
		.src3_channel       (cmd_demux_002_src3_channel),              //          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),          //          .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                //      src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                //          .valid
		.src4_data          (cmd_demux_002_src4_data),                 //          .data
		.src4_channel       (cmd_demux_002_src4_channel),              //          .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),          //          .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                //      src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                //          .valid
		.src5_data          (cmd_demux_002_src5_data),                 //          .data
		.src5_channel       (cmd_demux_002_src5_channel),              //          .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),        //          .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket),          //          .endofpacket
		.src6_ready         (cmd_demux_002_src6_ready),                //      src6.ready
		.src6_valid         (cmd_demux_002_src6_valid),                //          .valid
		.src6_data          (cmd_demux_002_src6_data),                 //          .data
		.src6_channel       (cmd_demux_002_src6_channel),              //          .channel
		.src6_startofpacket (cmd_demux_002_src6_startofpacket),        //          .startofpacket
		.src6_endofpacket   (cmd_demux_002_src6_endofpacket),          //          .endofpacket
		.src7_ready         (cmd_demux_002_src7_ready),                //      src7.ready
		.src7_valid         (cmd_demux_002_src7_valid),                //          .valid
		.src7_data          (cmd_demux_002_src7_data),                 //          .data
		.src7_channel       (cmd_demux_002_src7_channel),              //          .channel
		.src7_startofpacket (cmd_demux_002_src7_startofpacket),        //          .startofpacket
		.src7_endofpacket   (cmd_demux_002_src7_endofpacket),          //          .endofpacket
		.src8_ready         (cmd_demux_002_src8_ready),                //      src8.ready
		.src8_valid         (cmd_demux_002_src8_valid),                //          .valid
		.src8_data          (cmd_demux_002_src8_data),                 //          .data
		.src8_channel       (cmd_demux_002_src8_channel),              //          .channel
		.src8_startofpacket (cmd_demux_002_src8_startofpacket),        //          .startofpacket
		.src8_endofpacket   (cmd_demux_002_src8_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                //          .valid
		.src0_data          (cmd_demux_003_src0_data),                 //          .data
		.src0_channel       (cmd_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                //          .valid
		.src0_data          (cmd_demux_004_src0_data),                 //          .data
		.src0_channel       (cmd_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //          .valid
		.src_data            (cmd_mux_src_data),                                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                    //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                        //          .valid
		.src_data            (cmd_mux_001_src_data),                                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                           //          .valid
		.src_data            (cmd_mux_002_src_data),                                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_003_src_data),                                                     //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                  //          .channel
		.sink0_data          (cmd_demux_src4_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_004 cmd_mux_005 (
		.clk                 (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                  //          .channel
		.sink0_data          (cmd_demux_src5_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                //          .valid
		.src_data            (cmd_mux_006_src_data),                                                 //          .data
		.src_channel         (cmd_mux_006_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                                //          .valid
		.src_data            (cmd_mux_007_src_data),                                                 //          .data
		.src_channel         (cmd_mux_007_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                //          .valid
		.src_data            (cmd_mux_008_src_data),                                                 //          .data
		.src_channel         (cmd_mux_008_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                                //          .valid
		.src_data            (cmd_mux_009_src_data),                                                 //          .data
		.src_channel         (cmd_mux_009_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                                //          .valid
		.src_data            (cmd_mux_010_src_data),                                                 //          .data
		.src_channel         (cmd_mux_010_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                              //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_011_src_data),                                                   //          .data
		.src_channel         (cmd_mux_011_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                               //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                                   //          .valid
		.src_data            (cmd_mux_012_src_data),                                                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                                                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                              //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_013_src_data),                                                   //          .data
		.src_channel         (cmd_mux_013_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_mux_014 cmd_mux_014 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset               (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                                     //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                                     //          .valid
		.src_data            (cmd_mux_014_src_data),                                                      //          .data
		.src_channel         (cmd_mux_014_src_channel),                                                   //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                                                  //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                                                //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                                                   //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket),                                            //          .endofpacket
		.sink1_ready         (cmd_demux_002_src8_ready),                                                  //     sink1.ready
		.sink1_valid         (cmd_demux_002_src8_valid),                                                  //          .valid
		.sink1_channel       (cmd_demux_002_src8_channel),                                                //          .channel
		.sink1_data          (cmd_demux_002_src8_data),                                                   //          .data
		.sink1_startofpacket (cmd_demux_002_src8_startofpacket),                                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src8_endofpacket),                                            //          .endofpacket
		.sink2_ready         (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid),          //          .valid
		.sink2_channel       (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel),        //          .channel
		.sink2_data          (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data),           //          .data
		.sink2_startofpacket (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),    //          .endofpacket
		.sink3_ready         (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.sink3_channel       (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.sink3_data          (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.sink3_startofpacket (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_src2_data),                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_001 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_002 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_003 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux_004 rsp_demux_005 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                //          .valid
		.src1_data          (rsp_demux_005_src1_data),                 //          .data
		.src1_channel       (rsp_demux_005_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                //          .valid
		.src1_data          (rsp_demux_006_src1_data),                 //          .data
		.src1_channel       (rsp_demux_006_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                //          .valid
		.src2_data          (rsp_demux_006_src2_data),                 //          .data
		.src2_channel       (rsp_demux_006_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                //          .valid
		.src1_data          (rsp_demux_007_src1_data),                 //          .data
		.src1_channel       (rsp_demux_007_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                //          .valid
		.src2_data          (rsp_demux_007_src2_data),                 //          .data
		.src2_channel       (rsp_demux_007_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                //          .valid
		.src1_data          (rsp_demux_008_src1_data),                 //          .data
		.src1_channel       (rsp_demux_008_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                //          .valid
		.src2_data          (rsp_demux_008_src2_data),                 //          .data
		.src2_channel       (rsp_demux_008_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                //          .valid
		.src1_data          (rsp_demux_009_src1_data),                 //          .data
		.src1_channel       (rsp_demux_009_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                //          .valid
		.src2_data          (rsp_demux_009_src2_data),                 //          .data
		.src2_channel       (rsp_demux_009_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                    //      sink.ready
		.sink_channel       (router_015_src_channel),                  //          .channel
		.sink_data          (router_015_src_data),                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_015_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                //          .valid
		.src1_data          (rsp_demux_010_src1_data),                 //          .data
		.src1_channel       (rsp_demux_010_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                //          .valid
		.src2_data          (rsp_demux_010_src2_data),                 //          .data
		.src2_channel       (rsp_demux_010_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                    //      sink.ready
		.sink_channel       (router_016_src_channel),                  //          .channel
		.sink_data          (router_016_src_data),                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_016_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                //          .valid
		.src1_data          (rsp_demux_011_src1_data),                 //          .data
		.src1_channel       (rsp_demux_011_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                //          .valid
		.src2_data          (rsp_demux_011_src2_data),                 //          .data
		.src2_channel       (rsp_demux_011_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_012 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                    //      sink.ready
		.sink_channel       (router_017_src_channel),                  //          .channel
		.sink_data          (router_017_src_data),                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_017_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                //          .valid
		.src0_data          (rsp_demux_012_src0_data),                 //          .data
		.src0_channel       (rsp_demux_012_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_013 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                    //      sink.ready
		.sink_channel       (router_018_src_channel),                  //          .channel
		.sink_data          (router_018_src_data),                     //          .data
		.sink_startofpacket (router_018_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_018_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                //          .valid
		.src0_data          (rsp_demux_013_src0_data),                 //          .data
		.src0_channel       (rsp_demux_013_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)           //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_demux_014 rsp_demux_014 (
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                        //      sink.ready
		.sink_channel       (router_019_src_channel),                                      //          .channel
		.sink_data          (router_019_src_data),                                         //          .data
		.sink_startofpacket (router_019_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_019_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_014_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),                              //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                                    //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                                    //          .valid
		.src2_data          (rsp_demux_014_src2_data),                                     //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                                  //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),                            //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket),                              //          .endofpacket
		.src3_ready         (rsp_demux_014_src3_ready),                                    //      src3.ready
		.src3_valid         (rsp_demux_014_src3_valid),                                    //          .valid
		.src3_data          (rsp_demux_014_src3_data),                                     //          .data
		.src3_channel       (rsp_demux_014_src3_channel),                                  //          .channel
		.src3_startofpacket (rsp_demux_014_src3_startofpacket),                            //          .startofpacket
		.src3_endofpacket   (rsp_demux_014_src3_endofpacket)                               //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                        //          .valid
		.src_data             (rsp_mux_src_data),                                                         //          .data
		.src_channel          (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready          (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),              //     sink0.ready
		.sink0_valid          (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),              //          .valid
		.sink0_channel        (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),            //          .channel
		.sink0_data           (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),               //          .data
		.sink0_startofpacket  (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket    (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),        //          .endofpacket
		.sink1_ready          (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),                     //     sink1.ready
		.sink1_valid          (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),                     //          .valid
		.sink1_channel        (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),                   //          .channel
		.sink1_data           (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),                      //          .data
		.sink1_startofpacket  (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),             //          .startofpacket
		.sink1_endofpacket    (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),               //          .endofpacket
		.sink2_ready          (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),                  //     sink2.ready
		.sink2_valid          (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),                  //          .valid
		.sink2_channel        (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),                //          .channel
		.sink2_data           (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),                   //          .data
		.sink2_startofpacket  (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink2_endofpacket    (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink3_ready          (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid          (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.sink3_channel        (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.sink3_data           (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.sink3_startofpacket  (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket    (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready          (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),             //     sink6.ready
		.sink6_valid          (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),             //          .valid
		.sink6_channel        (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),           //          .channel
		.sink6_data           (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),              //          .data
		.sink6_startofpacket  (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink6_endofpacket    (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink7_ready          (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),             //     sink7.ready
		.sink7_valid          (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),             //          .valid
		.sink7_channel        (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),           //          .channel
		.sink7_data           (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),              //          .data
		.sink7_startofpacket  (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink7_endofpacket    (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink8_ready          (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),             //     sink8.ready
		.sink8_valid          (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),             //          .valid
		.sink8_channel        (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),           //          .channel
		.sink8_data           (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),              //          .data
		.sink8_startofpacket  (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink8_endofpacket    (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink9_ready          (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),             //     sink9.ready
		.sink9_valid          (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),             //          .valid
		.sink9_channel        (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),           //          .channel
		.sink9_data           (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),              //          .data
		.sink9_startofpacket  (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink9_endofpacket    (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink10_ready         (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),             //    sink10.ready
		.sink10_valid         (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),             //          .valid
		.sink10_channel       (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),           //          .channel
		.sink10_data          (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),              //          .data
		.sink10_startofpacket (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink10_endofpacket   (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink11_ready         (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),           //    sink11.ready
		.sink11_valid         (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),           //          .valid
		.sink11_channel       (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),         //          .channel
		.sink11_data          (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),            //          .data
		.sink11_startofpacket (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink11_endofpacket   (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink12_ready         (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),          //    sink12.ready
		.sink12_valid         (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),          //          .valid
		.sink12_channel       (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),        //          .channel
		.sink12_data          (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),           //          .data
		.sink12_startofpacket (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink12_endofpacket   (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink13_ready         (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),           //    sink13.ready
		.sink13_valid         (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),           //          .valid
		.sink13_channel       (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),         //          .channel
		.sink13_data          (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),            //          .data
		.sink13_startofpacket (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink13_endofpacket   (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket)      //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                //          .valid
		.src_data            (rsp_mux_001_src_data),                                                 //          .data
		.src_channel         (rsp_mux_001_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),            //     sink0.ready
		.sink0_valid         (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),            //          .valid
		.sink0_channel       (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),          //          .channel
		.sink0_data          (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_data),             //          .data
		.sink0_startofpacket (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink0_endofpacket   (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink1_ready         (rsp_demux_005_src1_ready),                                             //     sink1.ready
		.sink1_valid         (rsp_demux_005_src1_valid),                                             //          .valid
		.sink1_channel       (rsp_demux_005_src1_channel),                                           //          .channel
		.sink1_data          (rsp_demux_005_src1_data),                                              //          .data
		.sink1_startofpacket (rsp_demux_005_src1_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src1_endofpacket),                                       //          .endofpacket
		.sink2_ready         (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),           //     sink2.ready
		.sink2_valid         (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),           //          .valid
		.sink2_channel       (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),         //          .channel
		.sink2_data          (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_data),            //          .data
		.sink2_startofpacket (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink3_ready         (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),           //     sink3.ready
		.sink3_valid         (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),           //          .valid
		.sink3_channel       (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),         //          .channel
		.sink3_data          (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_data),            //          .data
		.sink3_startofpacket (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink3_endofpacket   (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink4_ready         (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),           //     sink4.ready
		.sink4_valid         (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),           //          .valid
		.sink4_channel       (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),         //          .channel
		.sink4_data          (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_data),            //          .data
		.sink4_startofpacket (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink4_endofpacket   (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink5_ready         (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),           //     sink5.ready
		.sink5_valid         (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),           //          .valid
		.sink5_channel       (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),         //          .channel
		.sink5_data          (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_data),            //          .data
		.sink5_startofpacket (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink5_endofpacket   (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink6_ready         (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),           //     sink6.ready
		.sink6_valid         (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),           //          .valid
		.sink6_channel       (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),         //          .channel
		.sink6_data          (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_data),            //          .data
		.sink6_startofpacket (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink6_endofpacket   (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink7_ready         (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //     sink7.ready
		.sink7_valid         (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.sink7_channel       (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.sink7_data          (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.sink7_startofpacket (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink7_endofpacket   (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink8_ready         (rsp_demux_014_src0_ready),                                             //     sink8.ready
		.sink8_valid         (rsp_demux_014_src0_valid),                                             //          .valid
		.sink8_channel       (rsp_demux_014_src0_channel),                                           //          .channel
		.sink8_data          (rsp_demux_014_src0_data),                                              //          .data
		.sink8_startofpacket (rsp_demux_014_src0_startofpacket),                                     //          .startofpacket
		.sink8_endofpacket   (rsp_demux_014_src0_endofpacket)                                        //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                             //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_002_src_data),                                                  //          .data
		.src_channel         (rsp_mux_002_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),            //     sink0.ready
		.sink0_valid         (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),            //          .valid
		.sink0_channel       (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),          //          .channel
		.sink0_data          (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_data),             //          .data
		.sink0_startofpacket (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink0_endofpacket   (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                                              //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                                              //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),                                            //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                                               //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket),                                        //          .endofpacket
		.sink2_ready         (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),           //     sink2.ready
		.sink2_valid         (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),           //          .valid
		.sink2_channel       (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),         //          .channel
		.sink2_data          (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_data),            //          .data
		.sink2_startofpacket (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink3_ready         (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),           //     sink3.ready
		.sink3_valid         (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),           //          .valid
		.sink3_channel       (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),         //          .channel
		.sink3_data          (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_data),            //          .data
		.sink3_startofpacket (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink3_endofpacket   (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink4_ready         (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),           //     sink4.ready
		.sink4_valid         (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),           //          .valid
		.sink4_channel       (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),         //          .channel
		.sink4_data          (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_data),            //          .data
		.sink4_startofpacket (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink4_endofpacket   (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink5_ready         (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),           //     sink5.ready
		.sink5_valid         (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),           //          .valid
		.sink5_channel       (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),         //          .channel
		.sink5_data          (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_data),            //          .data
		.sink5_startofpacket (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink5_endofpacket   (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink6_ready         (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),           //     sink6.ready
		.sink6_valid         (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),           //          .valid
		.sink6_channel       (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),         //          .channel
		.sink6_data          (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_data),            //          .data
		.sink6_startofpacket (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink6_endofpacket   (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink7_ready         (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //     sink7.ready
		.sink7_valid         (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.sink7_channel       (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.sink7_data          (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.sink7_startofpacket (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink7_endofpacket   (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink8_ready         (rsp_demux_014_src1_ready),                                              //     sink8.ready
		.sink8_valid         (rsp_demux_014_src1_valid),                                              //          .valid
		.sink8_channel       (rsp_demux_014_src1_channel),                                            //          .channel
		.sink8_data          (rsp_demux_014_src1_data),                                               //          .data
		.sink8_startofpacket (rsp_demux_014_src1_startofpacket),                                      //          .startofpacket
		.sink8_endofpacket   (rsp_demux_014_src1_endofpacket)                                         //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_003_src_data),                                                     //          .data
		.src_channel         (rsp_mux_003_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	de2i_150_qsys_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                     //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                     //          .valid
		.src_data            (rsp_mux_004_src_data),                                                      //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                //          .ready
		.in_data              (cmd_demux_src0_data),                                                 //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_fir_memory_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_led_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                    //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                         //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                       //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                         //          .ready
		.in_data              (cmd_demux_src1_data),                                          //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_button_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                            //          .ready
		.in_data              (cmd_demux_src2_data),                                             //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_button_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                                     //          .ready
		.in_data              (cmd_demux_src3_data),                                                      //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_fifo_memory_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_demux_src6_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_src6_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_src6_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src6_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_src6_ready),                                                 //          .ready
		.in_data              (cmd_demux_src6_data),                                                  //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_demux_src7_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_src7_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_src7_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src7_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_src7_ready),                                                 //          .ready
		.in_data              (cmd_demux_src7_data),                                                  //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_demux_src8_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_src8_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_src8_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src8_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_src8_ready),                                                 //          .ready
		.in_data              (cmd_demux_src8_data),                                                  //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_demux_src9_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_src9_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_src9_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src9_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_src9_ready),                                                 //          .ready
		.in_data              (cmd_demux_src9_data),                                                  //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_demux_src10_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_src10_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_src10_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_src10_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_src10_ready),                                                //          .ready
		.in_data              (cmd_demux_src10_data),                                                 //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                              //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_demux_src11_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_src11_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_src11_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_src11_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_src11_ready),                                                  //          .ready
		.in_data              (cmd_demux_src11_data),                                                   //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                               //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_demux_src12_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_src12_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_src12_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_src12_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_src12_ready),                                                   //          .ready
		.in_data              (cmd_demux_src12_data),                                                    //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_micfilter_cntl_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                              //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_demux_src13_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_src13_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_src13_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_src13_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_src13_ready),                                                  //          .ready
		.in_data              (cmd_demux_src13_data),                                                   //          .data
		.out_endofpacket      (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_bar1_0_to_micfilter_rst_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_fir_memory_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                         //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                          //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                        //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                    //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                          //          .ready
		.in_data              (cmd_demux_001_src0_data),                                           //          .data
		.out_endofpacket      (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_fir_memory_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src2_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_001_src2_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src2_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src2_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src2_ready),                                           //          .ready
		.in_data              (cmd_demux_001_src2_data),                                            //          .data
		.out_endofpacket      (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src3_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_001_src3_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src3_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src3_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src3_ready),                                           //          .ready
		.in_data              (cmd_demux_001_src3_data),                                            //          .data
		.out_endofpacket      (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src4_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_001_src4_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src4_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src4_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src4_ready),                                           //          .ready
		.in_data              (cmd_demux_001_src4_data),                                            //          .data
		.out_endofpacket      (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src5_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_001_src5_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src5_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src5_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src5_ready),                                           //          .ready
		.in_data              (cmd_demux_001_src5_data),                                            //          .data
		.out_endofpacket      (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src6_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_001_src6_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src6_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src6_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src6_ready),                                           //          .ready
		.in_data              (cmd_demux_001_src6_data),                                            //          .data
		.out_endofpacket      (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_demux_001_src7_valid),                                             //      sink.valid
		.in_channel           (cmd_demux_001_src7_channel),                                           //          .channel
		.in_startofpacket     (cmd_demux_001_src7_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src7_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_demux_001_src7_ready),                                             //          .ready
		.in_data              (cmd_demux_001_src7_data),                                              //          .data
		.out_endofpacket      (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_fir_memory_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                           //          .ready
		.in_data              (cmd_demux_002_src0_data),                                            //          .data
		.out_endofpacket      (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_fir_memory_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_002_src2_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_002_src2_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_002_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_002_src2_ready),                                            //          .ready
		.in_data              (cmd_demux_002_src2_data),                                             //          .data
		.out_endofpacket      (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_interpo_4_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_002_src3_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_002_src3_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_002_src3_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src3_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_002_src3_ready),                                            //          .ready
		.in_data              (cmd_demux_002_src3_data),                                             //          .data
		.out_endofpacket      (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_interpo_5_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_002_src4_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_002_src4_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_002_src4_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src4_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_002_src4_ready),                                            //          .ready
		.in_data              (cmd_demux_002_src4_data),                                             //          .data
		.out_endofpacket      (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_interpo_5_1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_002_src5_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_002_src5_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_002_src5_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src5_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_002_src5_ready),                                            //          .ready
		.in_data              (cmd_demux_002_src5_data),                                             //          .data
		.out_endofpacket      (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_interpo_5_2_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_002_src6_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_002_src6_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_002_src6_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src6_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_002_src6_ready),                                            //          .ready
		.in_data              (cmd_demux_002_src6_data),                                             //          .data
		.out_endofpacket      (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_interpo_5_3_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                             //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_valid             (cmd_demux_002_src7_valid),                                              //      sink.valid
		.in_channel           (cmd_demux_002_src7_channel),                                            //          .channel
		.in_startofpacket     (cmd_demux_002_src7_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src7_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_demux_002_src7_ready),                                              //          .ready
		.in_data              (cmd_demux_002_src7_data),                                               //          .data
		.out_endofpacket      (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_adapt_fir_mem_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_003_src0_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_003_src0_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_003_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_003_src0_ready),                                                 //          .ready
		.in_data              (cmd_demux_003_src0_data),                                                  //          .data
		.out_endofpacket      (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                  //          .ready
		.in_data              (cmd_demux_004_src0_data),                                                   //          .data
		.out_endofpacket      (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                //          .ready
		.in_data              (rsp_demux_src0_data),                                                 //          .data
		.out_endofpacket      (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fir_memory_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) fir_memory_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                         //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                              //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                            //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                        //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                              //          .ready
		.in_data              (rsp_demux_src1_data),                                               //          .data
		.out_endofpacket      (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fir_memory_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) fir_memory_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                               //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                             //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                         //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                               //          .ready
		.in_data              (rsp_demux_src2_data),                                                //          .data
		.out_endofpacket      (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fir_memory_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) led_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                    //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                     //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                   //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                               //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                     //          .ready
		.in_data              (rsp_demux_001_src0_data),                                      //          .data
		.out_endofpacket      (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (led_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) button_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                        //          .ready
		.in_data              (rsp_demux_002_src0_data),                                         //          .data
		.out_endofpacket      (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (button_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                 //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                               //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                 //          .ready
		.in_data              (rsp_demux_003_src0_data),                                                  //          .data
		.out_endofpacket      (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_memory_in_csr_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_006_src0_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_006_src0_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_006_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_006_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_006_src0_ready),                                             //          .ready
		.in_data              (rsp_demux_006_src0_data),                                              //          .data
		.out_endofpacket      (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_4_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_006_src1_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_006_src1_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_006_src1_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_006_src1_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_006_src1_ready),                                           //          .ready
		.in_data              (rsp_demux_006_src1_data),                                            //          .data
		.out_endofpacket      (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_4_0_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_006_src2_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_006_src2_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_006_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_006_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_006_src2_ready),                                            //          .ready
		.in_data              (rsp_demux_006_src2_data),                                             //          .data
		.out_endofpacket      (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_4_0_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_007_src0_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_007_src0_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_007_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_007_src0_ready),                                             //          .ready
		.in_data              (rsp_demux_007_src0_data),                                              //          .data
		.out_endofpacket      (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_0_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_007_src1_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_007_src1_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_007_src1_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src1_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_007_src1_ready),                                           //          .ready
		.in_data              (rsp_demux_007_src1_data),                                            //          .data
		.out_endofpacket      (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_0_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_007_src2_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_007_src2_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_007_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_007_src2_ready),                                            //          .ready
		.in_data              (rsp_demux_007_src2_data),                                             //          .data
		.out_endofpacket      (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_0_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_008_src0_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_008_src0_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_008_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_008_src0_ready),                                             //          .ready
		.in_data              (rsp_demux_008_src0_data),                                              //          .data
		.out_endofpacket      (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_1_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_008_src1_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_008_src1_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_008_src1_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src1_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_008_src1_ready),                                           //          .ready
		.in_data              (rsp_demux_008_src1_data),                                            //          .data
		.out_endofpacket      (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_1_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_008_src2_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_008_src2_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_008_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_008_src2_ready),                                            //          .ready
		.in_data              (rsp_demux_008_src2_data),                                             //          .data
		.out_endofpacket      (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_1_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_009_src0_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_009_src0_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_009_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_009_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_009_src0_ready),                                             //          .ready
		.in_data              (rsp_demux_009_src0_data),                                              //          .data
		.out_endofpacket      (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_2_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_009_src1_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_009_src1_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_009_src1_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_009_src1_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_009_src1_ready),                                           //          .ready
		.in_data              (rsp_demux_009_src1_data),                                            //          .data
		.out_endofpacket      (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_2_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_009_src2_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_009_src2_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_009_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_009_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_009_src2_ready),                                            //          .ready
		.in_data              (rsp_demux_009_src2_data),                                             //          .data
		.out_endofpacket      (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_2_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_010_src0_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_010_src0_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_010_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_010_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_010_src0_ready),                                             //          .ready
		.in_data              (rsp_demux_010_src0_data),                                              //          .data
		.out_endofpacket      (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_3_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                          //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_010_src1_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_010_src1_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_010_src1_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_010_src1_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_010_src1_ready),                                           //          .ready
		.in_data              (rsp_demux_010_src1_data),                                            //          .data
		.out_endofpacket      (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_3_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                           //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_010_src2_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_010_src2_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_010_src2_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_010_src2_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_010_src2_ready),                                            //          .ready
		.in_data              (rsp_demux_010_src2_data),                                             //          .data
		.out_endofpacket      (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (interpo_5_3_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                              //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_011_src0_valid),                                               //      sink.valid
		.in_channel           (rsp_demux_011_src0_channel),                                             //          .channel
		.in_startofpacket     (rsp_demux_011_src0_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src0_endofpacket),                                         //          .endofpacket
		.in_ready             (rsp_demux_011_src0_ready),                                               //          .ready
		.in_data              (rsp_demux_011_src0_data),                                                //          .data
		.out_endofpacket      (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (adapt_fir_mem_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                            //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_011_src1_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_011_src1_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_011_src1_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src1_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_011_src1_ready),                                             //          .ready
		.in_data              (rsp_demux_011_src1_data),                                              //          .data
		.out_endofpacket      (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (adapt_fir_mem_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                             //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_valid             (rsp_demux_011_src2_valid),                                              //      sink.valid
		.in_channel           (rsp_demux_011_src2_channel),                                            //          .channel
		.in_startofpacket     (rsp_demux_011_src2_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src2_endofpacket),                                        //          .endofpacket
		.in_ready             (rsp_demux_011_src2_ready),                                              //          .ready
		.in_data              (rsp_demux_011_src2_data),                                               //          .data
		.out_endofpacket      (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (adapt_fir_mem_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                               //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_012_src0_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_012_src0_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_012_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_012_src0_ready),                                                //          .ready
		.in_data              (rsp_demux_012_src0_data),                                                 //          .data
		.out_endofpacket      (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (micfilter_cntl_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (115),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                              //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_013_src0_valid),                                               //      sink.valid
		.in_channel           (rsp_demux_013_src0_channel),                                             //          .channel
		.in_startofpacket     (rsp_demux_013_src0_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_013_src0_endofpacket),                                         //          .endofpacket
		.in_ready             (rsp_demux_013_src0_ready),                                               //          .ready
		.in_data              (rsp_demux_013_src0_data),                                                //          .data
		.out_endofpacket      (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (micfilter_rst_s1_to_pcie_ip_bar1_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (rsp_demux_014_src2_valid),                                                 //      sink.valid
		.in_channel           (rsp_demux_014_src2_channel),                                               //          .channel
		.in_startofpacket     (rsp_demux_014_src2_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_014_src2_endofpacket),                                           //          .endofpacket
		.in_ready             (rsp_demux_014_src2_ready),                                                 //          .ready
		.in_data              (rsp_demux_014_src2_data),                                                  //          .data
		.out_endofpacket      (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (115),
		.ST_CHANNEL_W                  (15),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (rsp_demux_014_src3_valid),                                                  //      sink.valid
		.in_channel           (rsp_demux_014_src3_channel),                                                //          .channel
		.in_startofpacket     (rsp_demux_014_src3_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_014_src3_endofpacket),                                            //          .endofpacket
		.in_ready             (rsp_demux_014_src3_ready),                                                  //          .ready
		.in_data              (rsp_demux_014_src3_data),                                                   //          .data
		.out_endofpacket      (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

endmodule
